class Module
	inherits Node

	var _fileName as String
	var _csFileName as String?
	var _declsInOrder as List<of IMember>
	var _docString as String?

	def construct(fileName as String, verbosity as int, docString as String)
		require fileName
		base.construct()
		_fileName = fileName
		_declsInOrder = List<of IMember>()
		_docString = docString
		# TODO: what's going on with verbosity?

	get docString from var

	get fileName from var

	get declsInOrder as List<of IMember>
		return _declsInOrder

	def addDecl(decl as IMember)
		_declsInOrder.add(decl)

	get csSource as String
		if _csFileName
			return File.readAllText(_csFileName to String)  # CC: axe cast
		else
			throw FallThroughException(_csFileName)

	def addSubFields is override
		.addField('declsInOrder', _declsInOrder)

	def symbolForName(name as String) as IMember?
		# TODO: make faster?
		for decl in _declsInOrder
			if decl.name==name
				return decl
		for decl in _declsInOrder
			if decl inherits UseDirective
				x = decl.findSymbol(name)
				if x is not nil
					return x
		return nil

	def addMinFields is override
		base.addMinFields()
		.addField('fileName', _fileName)

	def _bindInt is override
		base._bindInt()
		for decl in _declsInOrder
			decl.bindInt()

	def _bindImp is override
		base._bindImp()
		assert .didBindInt
		for decl in _declsInOrder
			decl.bindImp()

	def writeSharpDef
		pass

class CobraModule
	inherits Module

	def construct(fileName as String, verbosity as int, docString as String)
		base.construct(fileName, verbosity, docString)

	def writeSharpDef is override
		base.writeSharpDef()
		_csFileName = _fileName + '.cs'
		file = File.createText(_csFileName to String)  # CC: axe cast
		using sw = SharpWriter(file)
			sw.write('// [_csFileName]\n')
			sw.write('// Generated by Cobra\n')  # TODO: put version number here
			sw.write('// on [DateTime.now]\n')
			# TODO: list op sys
			sw.write('\n')

			for decl in _declsInOrder
				decl.writeSharpDef(sw)

	# TODO: this does not seem to get called anywhere
#	def writeSharpTestInvocation(sw as SharpWriter)
#		for decl in _declsInOrder
#			decl.writeSharpTestInvocation(out)
