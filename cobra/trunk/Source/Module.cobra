class Module
	inherits Node

	var _fileName as String
	var _declsInOrder as List<of IMember>
	var _docString as String?

	def construct(fileName as String, verbosity as int, docString as String)
		require fileName
		base.construct()
		_fileName = fileName
		_declsInOrder = List<of IMember>()
		_docString = docString
		# TODO: what's going on with verbosity?

	get docString from var

	get declsInOrder as List<of IMember>
		return _declsInOrder

	def addDecl(decl as IMember)
		_declsInOrder.add(decl)

	get csSource as String
		return 'to do'

	def addSubFields is override
		.addField('declsInOrder', _declsInOrder)

	def symbolForName(name as String) as IMember?
		# TODO: make faster?
		for decl in _declsInOrder
			if decl.name==name
				return decl
		for decl in _declsInOrder
			if decl inherits UseDirective
				x = decl.findSymbol(name)
				if x is not nil
					return x
		return nil

	def addMinFields is override
		base.addMinFields()
		.addField('fileName', _fileName)

	def _bindInt is override
		base._bindInt()
		for decl in _declsInOrder
			decl.bindInt()

	def _bindImp is override
		base._bindImp()
		assert .didBindInt
		for decl in _declsInOrder
			decl.bindImp()


class CobraModule
	inherits Module

	def construct(fileName as String, verbosity as int, docString as String)
		base.construct(fileName, verbosity, docString)
