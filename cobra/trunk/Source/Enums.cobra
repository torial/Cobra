class EnumDecl
	inherits Container

	# TODO: defaultAccessLevel = 'public'

	var _storageType as IType?

	def construct(token as IToken, name as String, isNames as List<of String>, storageType as IType?, docString as String, enumMembers as List<of EnumMember>)
		base.construct(token, name, docString)
		# TODO: _isNames = isNames
		_storageType = storageType
		# TODO: put this at the container level. _docString = docString
		for em in enumMembers
			.addDecl(em)
			em.enumDecl = this

	get defaultAccessLevel as String is override
		return 'public'

	get englishName as String is override
		return 'enumeration type'

	get isShared as bool
		return true

	get isReference as bool is override
		# enums are not reference types
		return false

	get typeForIdentifier as IType is override
		return .compiler.typeType

	get typeForReceiver as IType is override
		return this

	def _bindInt is override
		base._bindInt()
		if _storageType
			_storageType.bindInt()

	def _bindImp() is override
		base._bindImp()
		if _storageType
			_storageType.bindImp()

	get csInit as String is override
		return _name + '.' + _declsInOrder[0].name

	def writeSharpDef(sw as SharpWriter) is override
		base.writeSharpDef(sw)
		.writeSharpIsNames(sw)
		sw.write('enum [_name]')
		storageType = _storageType
		if storageType is not nil and storageType is not .compiler.intType
			sw.write(' ')
			storageType.writeSharpRef(sw)
		sw.write(' {\n')
		sw.indent()
		sep = ''
		i = 0
		for em as EnumMember in .declsInOrder
			sw.write(sep)
			sw.write(Utils.capped(em.name))
			if em.value is not nil
				sw.write(' = [em.value]')
			i += 1
			sep = ',\n'
		sw.write('\n')
		sw.dedent()
		sw.write('}\n\n')


class EnumMember
	inherits NamedNode
	implements IMember
	"""
	Holds the name and (optionally) value of a member of an EnumDecl.
	"""

	var _value as int?
	var _enumDecl as EnumDecl?

	def construct(token as IToken, value as int?)
		require token.which=='ID'
		base.construct(token, token.text)
		_value = value

	def addMinFields is override
		base.addMinFields()
		.addField('value', _value)

	pro enumDecl from var

	get isCallable as bool
		return false

	get isShared as bool
		return true

	get englishName as String
		return 'enumeration value'

	get requiresThis as bool
		# This property probably doesn't make much sense for an enum member which must always
		# be accessed via its containg enum type.
		return false

	get resultType as IType
		require _enumDecl
		return _enumDecl to IType # CC: axe typecast

	get value from var
