"""
The Cobra Parser
"""


class Parser
	"""
	Notes:

		* The tokenizer's verbosity is set to 4 less than the parser's. In other words, the
		  tokenizer will not print messages unless the parser's verbosity is 5 or greater.

	"""

	test
		p = Parser()

	enum WhenError
		exit

	enum WhenWarning
		emit
		throww

	var _lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz'
	var _uppercaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

	var _fileName as String?
	var _willShowTokens = false
	var _verbosity = 0

	var _tokens as List<of IToken>?
	var _curTokenIndex as int


	def construct
		pass

	def parseFileNamed(fileName as String) as Node
		_fileName = fileName
		source = File.readAllText(_fileName to String)  # CC: axe "to String" when "if" gets smart about non-nil
		return .parseSource(source)

	def parseSource(source as String) as Node
		"""
		Parses module source code and returns resulting module.
		"""
		tokVerbosity = _verbosity - 4  # in order words, tokenizer does not spew unless our verbosity is 5 or greater
		if tokVerbosity<0
			tokVerbosity = 0

		_tokens = nil
		try
			_tokens = CobraTokenizer(tokVerbosity).startSource(source).allTokens()
		catch te as TokenizerError
			print '<> Caught TokenizerError'
			print te
			assert false
		_curTokenIndex = 0

		return .parseTokens()


	## Tokens

	get grab as IToken?
		"""
		Returns the next token or nil if there are none left.
		"""
		if _curTokenIndex >= _tokens.count
			return nil
		token = _tokens[_curTokenIndex]
		_curTokenIndex += 1
		if _willShowTokens
			print 'grab    --> [token]'
		return token


	## Parsing

	def parseTokens as Node
		return Node()


class Node
	pass
