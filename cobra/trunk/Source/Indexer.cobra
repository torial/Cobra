class Indexer
	inherits ProperDexer

	var _params as List<of Param>

	# TODO: add implements support. constructor param will be:
	# implementsList as List<of INode>,

	def init(token as IToken, box as Box, name as String, paramsList as List<of Param>, isNames as List<of String>, coverVar as ClassVar, coverAccess as String, docString as String)
		base.init(token, box, name, isNames, docString)
		_params = paramsList
		_coverVar = coverVar
		_coverAccess = coverAccess
		_isNames = isNames
		.defaultToVirtual()

	def init(token as IToken, box as Box, name as String, paramsList as List<of Param>, returnTypeOrNode as INode, isNames as List<of String>, docString as String)
		base.init(token, box, name, returnTypeOrNode, isNames, docString)
		_params = paramsList

	get params as List<of Param> is override
		return _params

	get isCallable as bool is override
		return false

	get englishName as String is override
		return 'indexer'

	def _bindInt is override
		base._bindInt()
		for param in .params  # TODO: where is params declared? Why not bind there? Or move params down?
			param.bindInt()

	def makeGetPart(token as IToken) as OneCodeBlockMember is override
		require .getPart is nil
		ensure .getPart!
		_getPart = IndexerGetter(token, this)
		return _getPart to IndexerGetter  # CC: to ! | CC: shouldn't need because of assignment

	def makeSetPart(token as IToken) as OneCodeBlockMember is override
		require .setPart is nil
		ensure .setPart!
		_setPart = IndexerSetter(token, this)
		return _setPart to IndexerSetter  # CC: to ! | CC: shouldn't need because of assignment

	def writeSharpDef(sw as SharpWriter) is override
		base.writeSharpDef(sw)
		assert _name==r'[]'
		sw.write('\n')
		.writeSharpIsNames(sw)
		sw.write(' [_returnType.sharpRef] this')
		.writeSharpParams(sw, r'[]')
		.writeSharpBody(sw)
		.writeSharpTest(sw)


class IndexerGetter
	inherits ProperDexerXetter

	def init(token as IToken, indexer as Indexer)
		base.init(token, indexer, List<of String>())  # TODO: take in docString

	get xetPartName as String is override
		return 'get'

	def _bindInt is override
		base._bindInt()
		_returnType = .parent.returnType
		assert _returnType
		for param in .parent.params
			_params.add(param)


class IndexerSetter
	inherits ProperDexerXetter

	def init(token as IToken, indexer as Indexer)
		base.init(token, indexer, List<of String>())  # TODO: take in docString

		# make a token for the Param()
		t = token.copy
		t.which = 'ID'
		t.text = 'value'
		t.value = 'value'

		if indexer.returnType
			p = Param(t, indexer.returnType, true)
		else if indexer.returnTypeNode
			p = Param(t, indexer.returnTypeNode, true)
		else
			throw FallThroughException(indexer)
		_params.add(p)

	get xetPartName as String is override
		return 'set'

	def _bindInt is override
		base._bindInt()
		_returnType = .compiler.voidType
		assert _returnType
		for param in .parent.params
			_params.add(param)
