class Box
	inherits NamedNode
	"""
	The abstract base class for:
		* Class
		* Interface
		* Struct
	These are collectively known as "boxes".
	"""

	var _declsInOrder as List<of Node>  # TODO: can the inner list type be narrowed more? say to IClassMemberDecl or ClassMemberDecl

	def construct(token as IToken, name as String)
		base.construct(token, name)
		_declsInOrder = List<of Node>()

	get declsInOrder from var

	def addDecl(decl as Node)
		_declsInOrder.add(decl)

	get specificName as String
		"""
		Return the specific name of this type of box: class, interface, struct.
		"""
		return ''


class Class
	inherits Box

	def construct(token as IToken, name as String, paramList as List<of Node>, isNames as List<of String>, baseName as String?, interfaceNames as List<of String>, docString as String?)
		base.construct(token, name)

	get specificName as String is override
		return 'class'


class Interface
	inherits Box

	def construct(token as IToken, name as String, paramList as List<of Node>, isNames as List<of String>, baseName as String?, interfaceNames as List<of String>, docString as String?)
		base.construct(token, name)

	get specificName as String is override
		return 'interface'


class ClassMember
	inherits NamedNode

	var _box as Box

	def construct(token as IToken, box as Box, name as String)
		base.construct(token, name)
		_box = box



interface ICodePart
	"""
	The common interface to:
		- methods
		- inits (special methods)
		- property getter
		- property setter
		- nested method
		- anonymous method
	"""

	def addStmt(stmt as Stmt)



class Method
	inherits ClassMember
	implements ICodePart

	var _params as List<of Param>
	var _returnTypeNode as Node
	var _isNames as List<of String>
	var _implementsList as List<of Node>
	var _docString as String
	var _stmts as List<of Stmt>

	def construct(token as IToken, box as Box, name as String, paramsList as List<of Param>, returnTypeNode as Node, isNames as List<of String>, implementsList as List<of Node>, docString as String)
		base.construct(token, box, name)
		_params = paramsList
		_returnTypeNode = returnTypeNode
		_isNames = isNames
		_implementsList = implementsList
		_docString = docString
		_stmts = List<of Stmt>()

	def addStmt(stmt as Stmt)
		_stmts.add(stmt)


class Param
	inherits NamedNode

	def construct(token as IToken, name as String)
		base.construct(token, name)


class LocalVar
	inherits NamedNode

	def construct(token as IToken, type as IType)
		base.construct(token, token.text)
