class Utils

	shared

		def capped(s as String) as String
			"""
			Returns the string with the first character capitalized.
			Returns a blank string for a blank string.
			"""
			ensure
				result.length==s.length
				result implies result[0]==result[0].toString().toUpper()
			test
				assert Utils.capped('chuck')=='Chuck'
				assert Utils.capped('Chuck')=='Chuck'
				assert Utils.capped('')==''
				assert Utils.capped(' foo')==' foo'
				assert Utils.capped('f')=='F'
				assert Utils.capped('1aoeu')=='1aoeu'
			code
				if s.length==0
					return s
				return s.substring(0, 1).toUpper() + s.substring(1, s.length-1)

		def isCapped(s as String) as bool
			test
				assert Utils.isCapped('Aoeu')
				assert Utils.isCapped('Zaoeu')
				assert not Utils.isCapped('aoeu')
				assert not Utils.isCapped('')
				assert not Utils.isCapped('1234')
			code
				return s and s[0]>=c'A' and s[0]<=c'Z'

		# CC: the getXX() methods should be generic methods

		def getSI(d as Dictionary<of String, int>, key as String, defaultValue as int) as int
			if d.containsKey(key)
				return d[key]
			else
				return defaultValue

class OverrideException
	inherits Exception

	# TODO: is there already an exception for this in .NET?

	def construct
		base.construct()
