class Utils

	shared

		def combinePaths(a as String, b as String) as String
			"""
			Same as Path.combine() but leaves no '\.\' or '/./' in the result.
			"""
			p = Path.combine(a, b)
			good = Path.directorySeparatorChar.toString()
			bad = '[good].[good]'
			p = p.replace(bad, good)
			return p

		def capped(s as String) as String
			"""
			Returns the string with the first character capitalized.
			Returns a blank string for a blank string.
			"""
			ensure
				result.length==s.length
				result implies result[0]==result[0].toString().toUpper()
			test
				assert Utils.capped('chuck')=='Chuck'
				assert Utils.capped('Chuck')=='Chuck'
				assert Utils.capped('')==''
				assert Utils.capped(' foo')==' foo'
				assert Utils.capped('f')=='F'
				assert Utils.capped('1aoeu')=='1aoeu'
			code
				if s.length==0
					return s
				return s.substring(0, 1).toUpper() + s.substring(1, s.length-1)

		def uncapped(s as String) as String
			"""
			Returns the string with the first character NOT-capitalized.
			Returns a blank string for a blank string.
			"""
			ensure
				result.length==s.length
				result implies result[0]==result[0].toString().toLower()
			test
				assert Utils.uncapped('Chuck')=='chuck'
				assert Utils.uncapped('chuck')=='chuck'
				assert Utils.uncapped('')==''
				assert Utils.uncapped(' foo')==' foo'
				assert Utils.uncapped('F')=='f'
				assert Utils.uncapped('1aoeu')=='1aoeu'
			code
				if s.length==0
					return s
				return s[0].toString().toLower() + s.substring(1)

		def isCapped(s as String) as bool
			test
				assert Utils.isCapped('Aoeu')
				assert Utils.isCapped('Zaoeu')
				assert not Utils.isCapped('aoeu')
				assert not Utils.isCapped('')
				assert not Utils.isCapped('1234')
			code
				return s and s[0]>=c'A' and s[0]<=c'Z'

		def startsWithLowerLetter(s as String) as bool
			require
				s
			test
				assert Utils.startsWithLowerLetter('a')
				assert Utils.startsWithLowerLetter('z')
				assert not Utils.startsWithLowerLetter('A')
				assert not Utils.startsWithLowerLetter('1')
				assert not Utils.startsWithLowerLetter('_')
			code
				return $sharp(r'char.IsLower(s[0])')

		def startsNonLower(s as String) as bool
			require
				s
			test
				assert not Utils.startsNonLower('a')
				assert not Utils.startsNonLower('z')
				assert not Utils.startsNonLower('1')
				assert Utils.startsNonLower('A')
			code
				return not s[0].toString()==s[0].toString().toLower()  # CC: should be char.isLower(s[0]), but cannot see members of char at this time

		# CC: the getXX() methods should be generic methods

		def getSI(d as Dictionary<of String, int>, key as String, defaultValue as int) as int
			if d.containsKey(key)
				return d[key]
			else
				return defaultValue

		def join(sep as String, parts as System.Collections.IEnumerable) as String  # TODO: given that this seems necessary, should Cobra add "use System.Collections" to all programs?
			test
				assert Utils.join('.', ['a', 'b'])=='a.b'
			code
				sb = StringBuilder()
				s = ''
				for part in parts
					sb.append(s)
					sb.append(part.toString())
					s = sep
				return sb.toString()


class OverrideException
	inherits Exception

	# TODO: is there already an exception for this in .NET?

	var _type as Type

	def construct
		base.construct()

	def construct(t as Type)
		base.construct('Type is [t]')
		_type = t
