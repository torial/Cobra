"""
This module contains ClassMember on down, except Property and Indexer which have their own files.
"""

class ClassMember  # TODO: rename to BoxMember
	inherits NamedNode
	implements IMember

	shared
		var _accessLevels = ['public', 'protected', 'internal', 'protected internal', 'private']
			"""
			The access level names are the same in both Cobra and C#.
			"""

	var _box as Box
	var _docString as String?
	var _isNames as List<of String>?
	var _overloadGroup as MemberOverload?
	var _testMethod as TestMethod?

	def init(token as IToken, box as Box, name as String, isNames as List<of String>)
		this.init(token, box, name, isNames, nil)

	def init(token as IToken, box as Box, name as String, isNames as List<of String>, docString as String?)
		base.init(token, name)
		_isNames = isNames
		_box = box
		_docString = docString
		.defaultToVirtual()

	## Properties

	get box from var

	pro docString from var

	pro isNames from var

	pro overloadGroup from var

	pro testMethod from var

	get isCallable as bool
		return false

	get isShared as bool
		return 'shared' in _isNames

	get englishName as String
		throw OverrideException(.getType())
		return ''

	get defaultAccessLevel as String
		throw OverrideException(.getType())
		return ''

	get hasVariParams as bool
		"""
		Retuns true if the class member takes variable number of arguments.
		"""
		return false

	get hasParams as bool
		"""
		Returns true if the class member has one or more parameters defined.
		"""
		return false

	get params as List<of Param>
		"""
		Returns the list of params of this method, possibly empty.
		Checking hasParams first is recommended since it's more efficient.
		"""
		return List<of Param>()

	get isClassMember as bool
		return _box inherits Class

	get isInterfaceMember as bool
		return _box inherits Interface

	get isStructMember as bool
		return _box inherits Struct

	get requiresThis as bool
		return not _name.startsWith('_')

	get resultType as IType
		"""
		The result type of the var, method or property.
		"""
		throw OverrideException(.getType())
		return CobraType()

	## Other

	def defaultToVirtual
		"""
		A hook for subclasses to add the virtual keyword to _isNames, if appropriate.
		"""
		require _isNames is not nil
		pass

	## INamedNode

	get typeForIdentifier as IType is override
		return .resultType

	get typeForReceiver as IType is override
		return .resultType


	## Binding

	def _bindInt is override
		base._bindInt()
		if _testMethod
			_testMethod.bindInt()

	def _bindImp is override
		base._bindImp()
		assert .didBindInt  # class members should have always received a bindInt first
		if _testMethod
			_testMethod.bindImp()


	## Fields

	def addMinFields is override
		base.addMinFields()
		.addField('name', _name)
		.addField('isNames', _isNames)

	def addRefFields is override
		base.addRefFields()
		.addField('classDecl', _box)

	def addSubFields is override
		base.addSubFields()
		if _isNames
			.addField('isNames', _isNames)
		.addField('docString', _docString)


	## Code gen

	def writeSharpTest(sw as SharpWriter)
		if _testMethod
			_testMethod.writeSharpDef(sw)

	def writeSharpTestInvocation(sw as SharpWriter)
		if _testMethod
			sw.write('[_testMethod.sharpName]();\n')

	def writeSharpParams(sw as SharpWriter)
		.writeSharpParams(sw, '()')

	def writeSharpParams(sw as SharpWriter, parens as String) # TODO: could this be pushed down to OneCodeBlockMember
		require parens.length==2
		sw.write(parens[0])
		sep = ''
		for param in .params
			sw.write(sep)
			param.writeSharpDef(sw)
			sep = ', '
		sw.write(parens[1].toString()+' ')

	def writeSharpIsNames(sw as SharpWriter)
		# TODO: cache this somewhere
		accessLevels = ['public', 'protected', 'internal', 'protected internal', 'private']
		# CC: accessLevels = 'public,protected,internal,protected internal,private'.split(c',')
			# same names in both Cobra and C#

		# TODO:
		# if isNames is nil
		#	isNames = _isNames
		isNames = List<of String>()
		if _isNames
			isNames.addRange(_isNames)
		if .defaultAccessLevel
			found = false
			for level as String in accessLevels  # CC: axe as
				if level in isNames
					found = true
			if not found
				isNames.insert(0, .defaultAccessLevel)
		isNameCS = {
			# only have to specify the ones that are different
			'shared': 'static',
			'nonvirtual': '',
		}
		sep = ''
		for name in isNames
			name = Utils.getSS(isNameCS to passthrough, name, name) to String # CC: to !
			sw.write(sep)
			sw.write(name)
			sep = ' '
		if sep
			sw.write(' ')


class ClassVar
	inherits ClassMember
	implements IVar

	var _typeNode as INode
	var _type as IType?
	var _initExpr as Expr?
	var _ifInheritsStack as Stack<of IType>
	var _useCSNameStack as Stack<of String>

	def init(token as IToken, box as Box, name as String, typeNode as INode, isNames as List<of String>, initExpr as Expr?, docString as String)
		base.init(token, box, name, isNames, docString)
		_typeNode = typeNode
		_initExpr = initExpr
		_ifInheritsStack = Stack<of IType>()
		_useCSNameStack = Stack<of String>()  # for if-inherits

	def addRefFields is override
		base.addRefFields()
		if _type
			.addField('type', _type)
		else
			.addField('typeNode', _typeNode)

	def addSubFields is override
		base.addSubFields()
		.addField('initExpr', _initExpr)

	get defaultAccessLevel as String is override
		return 'protected'

	pro ifInheritsStack from var

	get requiresDotPrefix as bool
		return _box is not nil and not _name.startsWith('_')

	get useCSNameStack from var

	# TODO @@@ who calls this and when?
	def symbolForName(name as String, canBeMember as bool) as IMember?
		t as IType? = if(_ifInheritsStack, _ifInheritsStack.peek() to passthrough, _type)  # CC: get rid of cast and 'as'
		return t.memberForName(name)  # TODO is "true" the correct value here?

	def _bindInt is override
		base._bindInt()
		if _initExpr
			_initExpr.bindImp()  # that's bindImp intentionally
			if _type is nil
				_type = _initExpr.type
		if _type is nil
			assert _typeNode, 'typeNode should be set if _type is nil'
			_typeNode.bindInt()
			t = _typeNode.namedType
			t.bindInt()
			assert t, _typeNode
			if _initExpr and not _initExpr.isKindOf(t to IType)  # CC: axe cast when "assert foo" is understood to prove that foo is not nil
				_error('The expression type of [_initExpr.type] does not match the variable type of [t].')
			_type = t
		_type.bindInt()  # TODO: is this needed?

	get resultType as IType is override
		"""
		The result type of the var, method or property.
		"""
		if _type
			return _type to passthrough  # CC: axe cast
		else
			assert false, '_type is nil. this=[this]'

	## INamedNode

	get typeForReceiver as IType is override
		assert .resultType
		return if(_ifInheritsStack, _ifInheritsStack.peek(), .resultType to IType)

	## IVar

	pro type as IType?
		get
			require _type
			return if(_ifInheritsStack, _ifInheritsStack.peek(), .resultType)  # CC: change last "to IType" to "to !" or make if() smarter
		set
			assert false, 'Cannot set the type of a ClassVar.'
			# TODO: remove
			#assert _type is nil  # TODO: in [nil, tpassthrough, tunknown)
			#assert not _ifInheritsStack
			#_type = value

	## Code Gen

	get sharpAssignmentNames as List<of String>
		return List<of String>(_useCSNameStack)

	get sharpRef as String is override
		return if(_useCSNameStack, _useCSNameStack.peek(), _name)

	def writeSharpDef(sw as SharpWriter) is override
		base.writeSharpDef(sw)
		.writeSharpIsNames(sw)
		sw.write(_type.sharpRef)
		sw.write(' [_name]')
		if _initExpr
			sw.write(' = ')
			_initExpr.writeSharpDef(sw)
		sw.write(';\n')

	get sharpName as String is override
		return if(_useCSNameStack, _useCSNameStack.peek(), .name)


interface ICodePart
	"""
	A code part responds to addStmt(stmt).

	It is the common interface to:
		- methods
		- inits (special methods)
		- property getter
		- property setter
		- nested method
		- anonymous method
	"""

	get name as String

	def addStmt(stmt as Stmt)

	def addLocal(local as LocalVar)

	def findLocal(name as String) as AbstractLocalVar?

	def findLocalCI(name as String) as AbstractLocalVar?

	def removeLocal(name as String)

	pro hasReturnStmt as bool

	get resultType as IType

	pro requirePart as RequirePart?

	pro ensurePart as EnsurePart?

	def addOldExpr(oldExpr as OldExpr)

	get sharpResultVarName as String


class OneCodeBlockMember
	inherits ClassMember
	implements ICodePart
	"""
	The abstract ancestor class for
		Constructor
		Method
		PropertyXetter

	But not for Property (which has two code blocks "get" and "set"),
	or other class decls like variables.

	Subclasses must set _params.
	"""

	var _returnTypeNode as INode
	var _returnType as IType?
	var _requirePart as RequirePart
	var _ensurePart as EnsurePart
	var _oldExprs as List<of OldExpr>  # TODO: add a doc string for this
	var _params as List<of Param>
	var _locals as List<of LocalVar>
	var _stmts as List<of Stmt>
	var _hasReturnStmt as bool
	var _sharpResultVarName as String?

	def init(token as IToken, box as Box, name as String, paramsList as List<of Param>, isNames as List<of String>, docString as String)
		base.init(token, box, name, isNames, docString)
		_params = paramsList
		_oldExprs = List<of OldExpr>()
		_locals = List<of LocalVar>()
		_stmts = List<of Stmt>()

	get hasParams as bool is override
		return _params.count > 0

	get params as List<of Param> is override
		return _params

	get defaultAccessLevel as String is override
		if .isClassMember or .isStructMember
			return 'public'
		else if .isInterfaceMember
			return ''
		else
			throw FallThroughException(this)

	def defaultToVirtual is override
		if .isClassMember
			for name in ['nonvirtual', 'virtual', 'shared', 'override']
				if name in _isNames
					return
			_isNames.add('virtual')

	get isCallable as bool is override
		return true

	pro hasReturnStmt from var

	def addStmt(stmt as Stmt)
		_stmts.add(stmt)

	pro requirePart from var

	pro ensurePart from var

	get resultType as IType is override
		require
			.didBindInt
			_returnType!
		body
			return _returnType to IType  # CC: to !

	def findLocal(name as String) as AbstractLocalVar?  # TODO: narrow to common base of Param and LocalVar
		# TODO: does it really matter if a the symbols are traversed in reverse order?
		# TODO: should this use a dictionary lookup?
		i = _locals.count - 1
		while i>=0
			if _locals[i].name==name
				return _locals[i]
			i -= 1
		for param in _params
			if param.name==name
				return param
		return nil

	def findLocalCI(name as String) as AbstractLocalVar?
		name = name.toLower()
		# TODO: does it really matter if a the symbols are traversed in reverse order?
		# TODO: should this use a dictionary lookup?
		i = _locals.count - 1
		while i>=0
			if _locals[i].name.toLower()==name
				return _locals[i]
			i -= 1
		for param in _params
			if param.name.toLower()==name
				return param
		return nil

	def addLocal(local as LocalVar)
		require
			local.name
			.findLocal(local.name) is nil  # TODO: , 'symbol=[symbol], symbolForName=[.symbolForName(symbol.name)]'
		body
			other = .findLocalCI(local.name)
			if other!
				_error('Parameters and locals must vary by more than just their case. Change "[local.name]" or "[other.name]" to match, or rename one of them to something different.')
			local.isTracked = true
			_locals.add(local)

	def removeLocal(name as String)
		require
			name
			.findLocal(name) is not nil
		body
			for i = 0 .. _locals.count
				if _locals[i].name==name
					_locals.removeAt(i)
					break

#	def dumpName(sw)
#		name = getattr('name', '(noname)')
#		returnType = getattr('returnType', '(no return type)')
#		while iscallable(returnType)
#			returnType = returnType()
#		sw.write('%s as %s  (%s)\n' % (name, returnType, .className))

# TODO: is pushName() needed?
#	def pushName(var)
#		.addSymbol(var)

#	def dumpNames(sw)
#		sw.write('%s\n' % .__class__.__name__)
#		sw.indent()
#		for param in .params
#			param.dumpName(sw)
#		for name in .names
#			name.dumpName(sw)
#		sw.indent()

	def addOldExpr(oldExpr as OldExpr)
		_oldExprs.add(oldExpr)
		oldExpr.sharpVarName = '_lh_old_' + _oldExprs.count.toString()

	def addRefFields is override
		base.addRefFields()
		.addField('returnTypeNode', _returnTypeNode)
		.addField('returnType', _returnType)

	def addSubFields is override
		base.addSubFields()
		.addField('params', _params)
		if _returnType inherits QualifiedType  # TODO: another QualifiedType special case
			.addField('returnType', _returnType)
		.addField('locals', _locals)
		.addField('stmts', _stmts)

	def _bindInt is override
		base._bindInt()
		.compiler.codeMemberStack.push(this)
		for param in _params
			param.bindInt()
		if _returnType is nil
			if _returnTypeNode is nil
				_returnType = .compiler.voidType
			else
				_returnTypeNode.bindInt()
				_returnType = _returnTypeNode.namedType
			assert _returnType, _returnTypeNode
		_returnType.bindInt()  # TODO: needs a test case. like: def foo as String?; return ''
		if _requirePart
			_requirePart.bindInt()
		if _ensurePart
			_ensurePart.bindInt()
		.compiler.codeMemberStack.pop()

	def _bindImp is override
		base._bindImp()
		.compiler.codeMemberStack.push(this)
		for param in _params
			param.bindImp()
		for local in _locals
			local.bindImp()
		# TODO re-enable the assertion below
		#assert compiler.opStack.count==0, repr(compiler.opStack._items)
		if _requirePart
			_requirePart.bindImp()
		if _ensurePart and _returnType is not nil and _returnType is not .compiler.voidType
			_sharpResultVarName = '_lh_result_[_box.makeNextPrivateSerialNumber()]'
		else
			_sharpResultVarName = nil
		for stmt in _stmts
			try
				stmt.bindImp()
				stmt.afterStatementBindImp()  # to let expressions know when they are used as statements
			catch ne as NodeException
				if .compiler.recordErrorAndThrow(ne)
					throw
		if _ensurePart
			_ensurePart.bindImp()
		.compiler.codeMemberStack.pop()

	## Code gen

	get sharpResultVarName from var

	def writeSharpImp(sw as SharpWriter, skipFirst as bool)
		sw.writeAndIndent('{\n')
		if .compiler.hasSuperStackTraceOption
			.writeSSTHead(sw)
		for param in _params
			.writeSharpParamCheck(param, sw)
		if _requirePart
			_requirePart.writeSharpDef(sw)
		.writeSharpLocals(sw, nil, false)
		if _ensurePart
			sw.write('bool _lh_canEnsure = true;\n')
			if _sharpResultVarName  # set in _bindImp
				sw.write('[_returnType.sharpRef] [_sharpResultVarName] = [_returnType.csInit];\n')
			sw.writeAndIndent('try {\n')
		for stmt in _stmts
			if skipFirst
				skipFirst = false
				continue
			stmt.writeSharpStmt(sw)
		if _ensurePart
			sw.dedentAndWrite('} catch {\n')
			sw.indent()
			sw.write('_lh_canEnsure = false;\n')
			sw.write('throw;\n')
			sw.dedentAndWrite('} finally { // ensure\n')
			sw.indentAndWrite('if (_lh_canEnsure) {\n')
			sw.indent()
			_ensurePart.writeSharpDef(sw)
			sw.dedentAndWrite('}\n')
			sw.dedentAndWrite('}\n')
		if .compiler.hasSuperStackTraceOption
			.writeSSTTail(sw)
		sw.dedent()
		sw.write('}\n')
		sw.write('\n')

	# TODO: axe?
#	def writeSharpLocals(sw as SharpWriter)
#		.writeSharpLocals(sw, nil, true)

	def writeSharpLocals(sw as SharpWriter, locals as List<of LocalVar>?, open as bool)
		if open
			sw.writeAndIndent('{\n')
		# record the `old` expressions for `ensure`
		for oldExpr in _oldExprs
			oldExpr.writeSharpAssignment(sw)
		if locals is nil
			locals = _locals
		if locals
			sw.write('// locals\n')
			for local in locals
				if not local.isImplicit
					sw.write('[local.type.sharpRef] [local.name]')
					init = local.type.csInit
					if init
						sw.write(' = [init]')
					sw.write(';\n')

	def writeSharpParamCheck(param as Param, sw as SharpWriter)
		if param.type.isReference and not param.type inherits NilableType
			sw.write('if ([param.name]==null) throw new ArgumentNullException("[param.name]");\n')
			# TODO axe the code below or above
			#sw.write('if (%s==null) throw new ArgumentNullException("%s", string.Format("Object reference \\"%s\\" not set to an instance of an object."));\n' % (
			#	param.name, param.name, param.name))

	def writeSSTHead(sw as SharpWriter)
		sw.write('CobraImp.PushFrame("[.box.name]", "[.name]"')
		if not .isShared
			sw.write(', "this", this')
		for param in .params
			sw.write(', "[param.name]", [param.name]')
		sw.write(');\n')
		sw.write('CobraImp.SetLine([.token.lineNum]);\n')
		sw.writeAndIndent('try {\n')

	def writeSSTTail(sw as SharpWriter)
		sw.dedentAndWrite('} catch {\n')
		sw.indent()
		sw.write('CobraImp.CaughtUncaughtException();\n')
		sw.write('throw;\n')
		sw.dedentAndWrite('} finally {\n')
		sw.indent()
		sw.write('CobraImp.PopFrame();\n')
		sw.dedentAndWrite('}\n')



class Constructor
	inherits OneCodeBlockMember
	implements ICodePart  # TODO: should OneCodeBlockMember inherit ICodePart

	def init(token as IToken, box as Box, paramsList as List<of Param>, isNames as List<of String>, docString as String)
		base.init(token, box, 'init', paramsList, isNames, docString)
		_isNames = isNames
		_stmts = List<of Stmt>()

	get englishName as String is override
		return 'method'

	get hasVariArgs as bool
		assert false, 'TODO: complete Method.hasVariArgs'
		return false

	get isCallable as bool is override
		return true

	def defaultToVirtual is override
		pass

	## Code gen

	def writeSharpDef(sw as SharpWriter) is override
		base.writeSharpDef(sw)
		first = if(_stmts, _stmts[0], nil)
		callConstructor as String? = nil
		if first inherits DotExpr
			if (first.left inherits ThisLit or first.left inherits BaseLit) and (first.right to CallExpr).name=='init'
				callConstructor = (first.left to AtomicLiteral).asSharp
				args = (first.right to CallExpr).args
		.writeSharpIsNames(sw)
		sw.write(' [.box.rootName]')
		.writeSharpParams(sw)
		if callConstructor
			sw.writeAndIndent('\n')
			sw.write(': [callConstructor](')
			sep = ''
			for arg in args
				sw.write(sep)
				arg.writeSharpDef(sw)
				sep = ', '
			sw.write(') ')
			sw.dedent()
		.writeSharpImp(sw, if(callConstructor, true, false))
		.writeSharpTest(sw)


class Method
	inherits OneCodeBlockMember
	implements ICodePart

	var _implementsTypeNode as ISyntaxNode?
	var _implementsType as IType?

	def init(token as IToken, box as Box, name as String, paramsList as List<of Param>, returnTypeNode as INode, implementsTypeNode as ISyntaxNode?, isNames as List<of String>, docString as String)
		base.init(token, box, name, paramsList, isNames, docString)
		_returnTypeNode = returnTypeNode
		_implementsTypeNode = implementsTypeNode
		# TODO: feels kind of hacky:
		if 'virtual' in _isNames and _implementsTypeNode
			_isNames.remove('virtual')
		_stmts = List<of Stmt>()

	get englishName as String is override
		return 'method'

	get hasVariArgs as bool
		assert false, 'TODO: complete Method.hasVariArgs'
		return false

	get isCallable as bool is override
		return true

	get isMethod as bool is override
		return true

	def addRefFields is override
		base.addRefFields()
		.addField('implementsType', _implementsType)

	def addSubFields is override
		base.addSubFields()
		if _implementsTypeNode
			.addField('implementsTypeNode', _implementsTypeNode)

	get defaultAccessLevel as String is override
		dal = base.defaultAccessLevel
		if dal and not _implementsType and not _implementsTypeNode
			return dal
		else
			return ''

	def defaultToVirtual is override
		if .isClassMember and not _implementsTypeNode and not _implementsType
			base.defaultToVirtual()

	def _bindImp is override
		numErrors = .compiler.errors.count
		base._bindImp()
		if _implementsTypeNode is not nil
			_implementsTypeNode.bindAll()
			assert _implementsTypeNode.namedType
			_implementsType = _implementsTypeNode.namedType
			# TODO: make sure the type is among the interfaces of the box
		if .compiler.errors.count==numErrors and _returnType is not .compiler.voidType and not .hasReturnStmt and not .box.isFake and not .box inherits Interface
			_error('Missing return statement for method "[_name]" which returns [_returnType.name].')

	## Code gen

	def writeSharpDef(sw as SharpWriter) is override
		base.writeSharpDef(sw)
		name = .sharpName
		returnType = _returnType ? .compiler.voidType to IType  # CC: axe cast
		if _implementsType
			name = _implementsType.name + '.' + name  # TODO: is name sufficient?
		.writeSharpIsNames(sw)
		sw.write('[returnType.sharpRef] [name]')
		.writeSharpParams(sw)
		if .isInterfaceMember
			sw.write(';\n')
		else
			.writeSharpImp(sw, false)
			.writeSharpTest(sw)

	get sharpName as String is override
		return Utils.capped(.name)


class ProperDexer
	inherits ClassMember
	"""
	The abstract base class for Property and Indexer.

	This captures some of the common interface between them--whatever happens to be needed
	(currenty by the parser only).

	Why not do an IProperDexer interface? Because it wouldn't be compatible with a ClassMember
	unless we also defined an IClassMember.
	"""

	var _getPart as ProperDexerXetter?
	var _setPart as ProperDexerXetter?
	var _coverVar as ClassVar
	var _coverAccess as String
	var _returnType as IType?
	var _returnTypeNode as INode?

	def init(token as IToken, box as Box, name as String, isNames as List<of String>, docString as String)
		base.init(token, box, name, isNames, docString)

	def init(token as IToken, box as Box, name as String, returnTypeOrNode as INode, isNames as List<of String>, docString as String)
		.init(token, box, name, isNames, docString)
		if returnTypeOrNode
			if returnTypeOrNode inherits IType
				_returnType = returnTypeOrNode
				_returnTypeNode = nil
			else if returnTypeOrNode inherits INode
				_returnType = nil
				_returnTypeNode = returnTypeOrNode
			else
				throw FallThroughException(returnTypeOrNode)

	def makeGetPart(token as IToken) as OneCodeBlockMember
		throw OverrideException()
		# CC: shouldn't need a return:
		return nil to passthrough

	def makeSetPart(token as IToken) as OneCodeBlockMember
		throw OverrideException()
		# CC: shouldn't need a return:
		return nil to passthrough

	def addRefFields is override
		base.addRefFields()
		if _coverVar
			.addField('coverVar', _coverVar)
		if _returnType
			.addField('returnType', _returnType)
		else
			.addField('returnTypeNode', _returnTypeNode)

	def addSubFields is override
		base.addSubFields()
		if _getPart
			.addField('getPart', _getPart)
		if _setPart
			.addField('setPart', _setPart)

	get returnType from var

	get returnTypeNode from var

	get resultType as IType is override
		assert .didBindInt
		assert _returnType
		return _returnType to IType  # CC: axe when code flow understands the assert

	get getPart from var

	get setPart from var

	def defaultToVirtual is override
		# TODO: dup'ed in OneCodeBlockMember
		if .isClassMember
			for name in ['nonvirtual', 'virtual', 'shared', 'override']
				if name in _isNames
					return
			_isNames.add('virtual')

	get defaultAccessLevel as String is override
		if .isClassMember
			return 'public'
		else
			return ''

	def _bindInt is override
		base._bindInt()
		if _returnType is nil
			if _coverVar
				_coverVar.bindInt()
				assert _coverVar.resultType, _coverVar
				_returnType = _coverVar.resultType
			else
				assert _returnTypeNode
				_returnTypeNode.bindInt()
				_returnType = _returnTypeNode.namedType
		_returnType.bindInt()
		assert _returnType  # properties always have a return type
		if _getPart
			_getPart.bindInt()
		if _setPart
			_setPart.bindInt()

	def _bindImp is override
		base._bindImp()
		if _getPart
			_getPart.bindImp()
		if _setPart
			_setPart.bindImp()

	## Code gen

	def writeSharpBody(sw as SharpWriter)
		sw.write(' {\n')
		sw.indent()
		if _coverVar
			if _coverAccess in ['getset', 'get']
				sw.write('get { return [_coverVar.sharpName]; }')
			if _coverAccess in ['getset', 'set']
				sw.write('set { [_coverVar.sharpName] = value; }')
		else
			if _getPart
				if .isClassMember
					_getPart.writeSharpDef(sw)
				else if .isInterfaceMember
					sw.write('\tget;\n')
				else
					throw FallThroughException(this)
			if _setPart
				if .isClassMember
					_setPart.writeSharpDef(sw)
				else if .isInterfaceMember
					sw.write('\tset;\n')
				else
					throw FallThroughException(this)
		sw.dedent()
		sw.write('}\n')


class ProperDexerXetter
	inherits OneCodeBlockMember
	"""
	Base class for IndexerGetter, IndexerSetter, PropertyGetter and PropertySetter.
	"""

	var _parent as ProperDexer

	def init(token as IToken, parent as ProperDexer, isNames as List<of String>)
		base.init(token, parent.box, parent.name, List<of Param>(), isNames, '')  # TODO: should be docString, right?
		_name = parent.name + '.' + .xetPartName  # CC: somewhat awkward. belongs in the base.init() call
		_parent = parent

	get parent from var

	get xetPartName as String  # CC: make abstract
		throw OverrideException(.getType())
		return '(override indexerPartName)'

	get isShared as bool is override
		return _parent.isShared

	def writeSharpDef(sw as SharpWriter) is override
		base.writeSharpDef(sw)
		sw.write(.xetPartName)
		.writeSharpImp(sw, false)


class MemberOverload
	inherits ClassMember

	var _members as List<of ClassMember>

	def init(member as ClassMember)
		require
			member.name
			member.box
		ensure
			.members
			.members[0]==member
		body
			base.init(member.token, member.box, member.name, member.isNames)
			member.overloadGroup = this
			_members = [member]
			_isNames = member.isNames  # pick up 'shared' for example

	def addSubFields is override
		base.addSubFields()
		.addField('members', _members)

	get members from var

	get englishName as String is override
		assert _members
		return _members[0].englishName

	get isCallable as bool is override
		assert _members
		return _members[0].isCallable

	get isMethod as bool is override
		return _members[0] inherits Method

	def addMember(member as ClassMember)
		require
			member is not this
			not member inherits MemberOverload
			member.overloadGroup is nil
			member.name==.name # CC:, '.name=[.name], member.name=[member.name]'
			.members implies member not in .members # CC: , member
			.members implies member.getType() is .members[0].getType()
		body
			member.overloadGroup = this
			_members.add(member)
			.box.addDeclFromOverload(member, this)

	get resultType as IType? is override
		assert .didBindInt
		assert _members[0] is not this
		return _members[0].resultType

	def _bindInt is override
		base._bindInt()
		# rename the test members of the overload by suffixing them with '_o1' '_o2' etc.
		i = 1
		for member in _members
			if member.testMethod
				member.testMethod.name = member.testMethod.name + '_ol' + i.toString()
			i += 1
		# TODO: error if the returnType is different among any members
		# TODO: error if the two members have the same arguments

	def _bindImp is override
		base._bindImp()


class TestMethod
	inherits Method
	"""
	TODO: It's weird that you have to pass voidType. Maybe Node should have a shared typeProvider
	like it has a shared compiler. The parser could set it.
	"""

	var _forMember as ClassMember?
	var _forBox as Box?

	def init(token as IToken, member as ClassMember, voidType as IType)
		require
			member.box
			member.name
		body
			# CC: shouldn't the .getCompiler() work? C# code gen puts a "this" in there even though it's shared and C# chokes on it
			#base.init(token, member.box, 'test_'+Utils.capped(member.name), List<of Param>(), .getCompiler().voidType, List<of String>(), nil, '')
			base.init(token, member.box, 'test_'+Utils.capped(member.name), List<of Param>(), voidType, nil, List<of String>(), '')
			_forMember = member

	def init(token as IToken, box as Box, voidType as IType)
		require
			box.name
		body
			# CC: shouldn't the .getCompiler() work? C# code gen puts a "this" in there even though it's shared and C# chokes on it
			# base.init(token, box, 'test_class_'+Utils.capped(box.name), List<of Param>(), .getCompiler().voidType, List<of String>(), List<of INode>(), '')
			base.init(token, box, 'test_class_'+Utils.capped(box.name), List<of Param>(), voidType, nil, List<of String>(), '')
			_forBox = box

	pro name as String is new
		"""
		NamedNode.name does not allow the name to be set because that could mess up dictionaries
		that index the node by name. However, there are no such dictionaries for TestMethod and
		MemberOverload() needs to mangle test method names so they don't collide.
		"""
		get
			return base.name
		set
			require value
			_name = value

	def defaultToVirtual is override
		_isNames.add('shared')


class ConditionPart
	inherits SyntaxNode
	"""
	TODO: Rename to ContractPart
	The abstract base class for RequirePart and EnsurePart.
	"""

	var _codeMember as ICodePart
	var _exprs as List<of Expr>

	def init(token as IToken, codeMember as ICodePart, exprs as List<of Expr>)
		base.init(token)
		_codeMember = codeMember
		_exprs = exprs

	def _bindImp is override
		base._bindImp()
		i = 0
		for expr as Expr in _exprs.toArray()  # CC: axe cast
			expr.bindImp()
			assert expr.type
			if expr.type is not .compiler.boolType
				expr = TruthExpr(expr).bindAll() to Expr # CC: axe cast when Cobra supports "as this"
				assert expr.type
				_exprs[i] = expr
			i += 1


class RequirePart
	inherits ConditionPart

	def init(token as IToken, codeMember as ICodePart, exprs as List<of Expr>)
		base.init(token, codeMember, exprs)
		codeMember.requirePart = this

	def writeSharpDef(sw as SharpWriter) is override
		base.writeSharpDef(sw)
		sw.write('// require\n')
		for expr in _exprs
			sw.write('if (!')
			expr.writeSharpDef(sw)
			sw.write(') ')
			sw.indent()
			s = expr.toCobraSource()
			s = Utils.csStringLitFor(s)
			sw.write('throw new RequireException([Utils.csStringLitFor(_token.fileName)], [_token.lineNum], [s], null);\n')
			sw.dedent()
		sw.write('// end require\n')


class EnsurePart
	inherits ConditionPart

	def init(token as IToken, codeMember as ICodePart, exprs as List<of Expr>)
		base.init(token, codeMember, exprs)
		codeMember.ensurePart = this

	def _bindImp is override
		assert _codeMember.resultType
		if _codeMember.resultType is .compiler.voidType
			base._bindImp()
		else
			_codeMember.addLocal(ResultVar(.token, _codeMember))
			try
				base._bindImp()
			finally
				_codeMember.removeLocal('result')

	def writeSharpDef(sw as SharpWriter) is override
		base.writeSharpDef(sw)
		for expr in _exprs
			sw.write('if (!')
			expr.writeSharpDef(sw)
			sw.write(') ')
			sw.indent()
			s = expr.toCobraSource()
			s = Utils.csStringLitFor(s)
			sw.write('throw new EnsureException([Utils.csStringLitFor(_token.fileName)], [_token.lineNum], [s], null);\n')
			sw.dedent()


