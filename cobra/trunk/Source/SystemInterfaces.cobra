namespace System

	interface IComparable<of T>
		is fake
		def compareTo(obj as T) as int

	interface IEquatable<of T>
		is fake
		pass

	namespace Collections

		namespace Generic

			interface IComparer<of T>
				is fake
				def compare(a as T, b as T) as int

			interface IEqualityComparer<of T>
				is fake
				pass
			
			interface IEnumerator<of T>
				is fake
				inherits IDisposable, System.Collections.IEnumerator
				get current as T

			interface IEnumerable<of T>
				is fake
				inherits System.Collections.IEnumerable
				def getEnumerator as IEnumerator<of T>

			interface ICollection<of T>
				is fake
				inherits IEnumerable<of T>, System.Collections.IEnumerable
				get count as int
				get isReadOnly as bool
				def add(item as T)
				def clear
				def contains(item as T) as bool
				def copyTo(arr as T[], arrayIndex as int)
				def remove(item as T) as bool

			interface IList<of T>
				is fake
				inherits ICollection<of T>, IEnumerable<of T>, System.Collections.IList, System.Collections.IEnumerable
				get count as int

			class List<of T>
				is fake
				implements IList<of T>, ICollection<of T>, IEnumerable<of T>, System.Collections.IEnumerable
				pro [index as int] as T
					get
						pass
					set
						pass
				def add(obj as T)
					pass
				def addRange(stuff as passthrough)
					pass
				def contains(item as T) as bool
					pass
				get count as int
					pass
				def getEnumerator as IEnumerator<of T>
					pass
				def getRange(start as int, count as int) as List<of T>
					pass
				def indexOf(item as T) as int
					pass
				def indexOf(item as T, index as int) as int
					pass
				def indexOf(item as T, index as int, count as int) as int
					pass
				def insert(index as int, item as T)
					pass
				def remove(item as T) as bool
					pass
				def removeAt(index as int)
					pass
				def reverse
					pass
				def sort
					pass
				def toArray as List<of T>
					pass
				def copyTo(array as T[], index as int)
					pass

			class Stack<of T>
				is fake
				implements IEnumerable<of T>, System.Collections.ICollection, System.Collections.IEnumerable
				get count as int
					pass
				def peek as T
					pass
				def pop as T
					pass
				def push(obj as T)
					pass

			class Queue<of T>
				is fake
				get count as int
					pass
				def enqueue(obj as T?)
					pass
				def dequeue as T
					pass

			struct KeyValuePair<of TKey, TValue>
				is fake
				def init(key as TKey, value as TValue)
					pass
				get key as TKey
					pass
				get value as TValue
					pass

			interface IDictionary<of TKey, TValue>
				is fake
				inherits ICollection<of KeyValuePair<of TKey, TValue>>, System.Collections.IEnumerable
				get count as int
				pro [key as TKey] as TValue
				get keys as ICollection<of TKey>
				get values as ICollection<of TValue>

				def add(key as TKey, value as TValue)
				def containsKey(key as TKey) as bool
				def remove(key as TKey) as bool
				# def tryGetValue(key as TKey, value as out TValue) as bool

			class Dictionary<of TKey, TValue>
				is fake
				implements ICollection<of KeyValuePair<of TKey, TValue>>, IDictionary<of TKey, TValue>
				def init
					pass
				def init(d as IDictionary<of TKey, TValue>)
					pass
				def clear
					pass
				get count as int
					pass
				pro [key as TKey] as TValue
					get
						pass
					set
						pass
				get keys as ICollection<of TKey>
					pass
				get values as ICollection<of TValue>
					pass
				def add(key as TKey, value as TValue)
					pass
				def containsKey(key as TKey) as bool
					pass
				def remove(key as TKey) as bool
					pass
				# def tryGetValue(key as TKey, value as out TValue) as bool


namespace Cobra

	namespace Lang

		use System.Collections.Generic

		interface ICallable
			is fake
			pass

		class AssertException
			is fake
			inherits Exception
			get info as Object?
				pass

		class ExpectException
			is fake
			inherits Exception
			get expectedExceptionType as Type
				pass
			get actualException as Exception
				pass

		class RequireException
			is fake
			inherits AssertException
			pro next as RequireException?
				get
					return nil
				set
					pass

		class EnsureException
			is fake
			inherits AssertException
			pass

		class SliceException
			is fake
			inherits SystemException
			pass
