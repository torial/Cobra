namespace System

	class Object
		is fake
		def init
			pass
		def equals(obj as Object?) as bool
			pass
		def getHashCode as int
			pass
		def getType as Type
			pass
		def toString as String
			pass
		def toString(fmt as String) as String  # technically untrue, but comes in handy for primitive types at this point
			pass
		def memberwiseClone as Object is protected
			pass
		shared
			# TODO:
			#def equals(a as Object, b as Object) as bool is shared
			#	pass
			def referenceEquals(a as Object, b as Object) as bool is shared
				pass

	class String
		is fake
		inherits System.Object
		implements System.IComparable, System.ICloneable, System.Collections.IEnumerable
		def init(value as char[], startIndex as int, length as int)
			pass
		def init(value as char[])
			pass
		def init(c as char, count as int)
			pass
		get [i as int] as char
			pass
		get chars as char is new
			pass
		get length as int is new
			pass
		def indexOf(value as char, startIndex as int, count as int) as int is new
			pass
		def indexOfAny(anyOf as char[], startIndex as int, count as int) as int is new
			pass
		def lastIndexOf(value as char, startIndex as int, count as int) as int is new
			pass
		def lastIndexOfAny(anyOf as char[], startIndex as int, count as int) as int is new
			pass
		def insert(startIndex as int, value as String) as String is new
			pass
		def replace(oldChar as char, newChar as char) as String is new
			pass
		def replace(oldValue as String, newValue as String) as String is new
			pass
		def remove(startIndex as int, count as int) as String is new
			pass
		def join(separator as String, value as String[]) as String is shared
			pass
		def join(separator as String, value as String[], startIndex as int, count as int) as String is shared
			pass
		def equals(obj as Object) as bool is override
			pass
		def equals(value as String) as bool is override
			pass
		def equals(value as String, comparisonType as StringComparison) as bool is new
			pass
		def equals(a as String, b as String) as bool is shared
			pass
		def equals(a as String, b as String, comparisonType as StringComparison) as bool is shared
			pass
		def op_Equality(a as String, b as String) as bool is shared
			pass
		def op_Inequality(a as String, b as String) as bool is shared
			pass
		def copyTo(sourceIndex as int, destination as char[], destinationIndex as int, count as int) is new
			pass
		def toCharArray as char[] is new
			pass
		def toCharArray(startIndex as int, length as int) as char[] is new
			pass
		def isNullOrEmpty(value as String) as bool is shared
			pass
		def getHashCode as int is override
			pass
		def split(separator as char[]) as String[] is new
			pass
		def split(separator as char[], count as int) as String[] is new
			pass
		def split(separator as char[], options as StringSplitOptions) as String[] is new
			pass
		def split(separator as char[], count as int, options as StringSplitOptions) as String[] is new
			pass
		def split(separator as String[], options as StringSplitOptions) as String[] is new
			pass
		def split(separator as String[], count as int, options as StringSplitOptions) as String[] is new
			pass
		def substring(startIndex as int) as String is new
			pass
		def substring(startIndex as int, length as int) as String is new
			pass
		def trim(trimChars as char[]) as String is new
			pass
		def trimStart(trimChars as char[]) as String is new
			pass
		def trimEnd(trimChars as char[]) as String is new
			pass
		def isNormalized as bool is new
			pass
		def isNormalized(normalizationForm as System.Text.NormalizationForm) as bool is new
			pass
		def normalize as String is new
			pass
		def normalize(normalizationForm as System.Text.NormalizationForm) as String is new
			pass
		def compare(strA as String, strB as String) as int is shared
			pass
		def compare(strA as String, strB as String, ignoreCase as bool) as int is shared
			pass
		def compare(strA as String, strB as String, comparisonType as StringComparison) as int is shared
			pass
		def compare(strA as String, strB as String, ignoreCase as bool, culture as System.Globalization.CultureInfo) as int is shared
			pass
		def compare(strA as String, indexA as int, strB as String, indexB as int, length as int) as int is shared
			pass
		def compare(strA as String, indexA as int, strB as String, indexB as int, length as int, ignoreCase as bool) as int is shared
			pass
		def compare(strA as String, indexA as int, strB as String, indexB as int, length as int, ignoreCase as bool, culture as System.Globalization.CultureInfo) as int is shared
			pass
		def compare(strA as String, indexA as int, strB as String, indexB as int, length as int, comparisonType as StringComparison) as int is shared
			pass
		def compareTo(value as Object) as int is new
			pass
		def compareTo(strB as String) as int is new
			pass
		def compareOrdinal(strA as String, strB as String) as int is shared
			pass
		def compareOrdinal(strA as String, indexA as int, strB as String, indexB as int, length as int) as int is shared
			pass
		def contains(value as String) as bool is new
			pass
		def endsWith(value as String) as bool is new
			pass
		def endsWith(value as String, comparisonType as StringComparison) as bool is new
			pass
		def endsWith(value as String, ignoreCase as bool, culture as System.Globalization.CultureInfo) as bool is new
			pass
		def indexOf(value as char) as int is new
			pass
		def indexOf(value as char, startIndex as int) as int is new
			pass
		def indexOfAny(anyOf as char[]) as int is new
			pass
		def indexOfAny(anyOf as char[], startIndex as int) as int is new
			pass
		def indexOf(value as String) as int is new
			pass
		def indexOf(value as String, startIndex as int) as int is new
			pass
		def indexOf(value as String, startIndex as int, count as int) as int is new
			pass
		def indexOf(value as String, comparisonType as StringComparison) as int is new
			pass
		def indexOf(value as String, startIndex as int, comparisonType as StringComparison) as int is new
			pass
		def indexOf(value as String, startIndex as int, count as int, comparisonType as StringComparison) as int is new
			pass
		def lastIndexOf(value as char) as int is new
			pass
		def lastIndexOf(value as char, startIndex as int) as int is new
			pass
		def lastIndexOfAny(anyOf as char[]) as int is new
			pass
		def lastIndexOfAny(anyOf as char[], startIndex as int) as int is new
			pass
		def lastIndexOf(value as String) as int is new
			pass
		def lastIndexOf(value as String, startIndex as int) as int is new
			pass
		def lastIndexOf(value as String, startIndex as int, count as int) as int is new
			pass
		def lastIndexOf(value as String, comparisonType as StringComparison) as int is new
			pass
		def lastIndexOf(value as String, startIndex as int, comparisonType as StringComparison) as int is new
			pass
		def lastIndexOf(value as String, startIndex as int, count as int, comparisonType as StringComparison) as int is new
			pass
		def padLeft(totalWidth as int) as String is new
			pass
		def padLeft(totalWidth as int, paddingChar as char) as String is new
			pass
		def padRight(totalWidth as int) as String is new
			pass
		def padRight(totalWidth as int, paddingChar as char) as String is new
			pass
		def startsWith(value as String) as bool is new
			pass
		def startsWith(value as String, comparisonType as StringComparison) as bool is new
			pass
		def startsWith(value as String, ignoreCase as bool, culture as System.Globalization.CultureInfo) as bool is new
			pass
		def toLower as String is new
			pass
		def toLower(culture as System.Globalization.CultureInfo) as String is new
			pass
		def toLowerInvariant as String is new
			pass
		def toUpper as String is new
			pass
		def toUpper(culture as System.Globalization.CultureInfo) as String is new
			pass
		def toUpperInvariant as String is new
			pass
		def toString as String is override
			pass
		def toString(provider as IFormatProvider) as String is new
			pass
		def clone as Object is new
			pass
		def trim as String is new
			pass
		def remove(startIndex as int) as String is new
			pass
		def format(format as String, arg0 as Object) as String is shared
			pass
		def format(format as String, arg0 as Object, arg1 as Object) as String is shared
			pass
		def format(format as String, arg0 as Object, arg1 as Object, arg2 as Object) as String is shared
			pass
		def format(format as String, args as Object[]) as String is shared
			pass
		def format(provider as IFormatProvider, format as String, args as Object[]) as String is shared
			pass
		def copy(str as String) as String is shared
			pass
		def concat(arg0 as Object) as String is shared
			pass
		def concat(arg0 as Object, arg1 as Object) as String is shared
			pass
		def concat(arg0 as Object, arg1 as Object, arg2 as Object) as String is shared
			pass
		def concat(arg0 as Object, arg1 as Object, arg2 as Object, arg3 as Object) as String is shared
			pass
		def concat(args as Object[]) as String is shared
			pass
		def concat(str0 as String, str1 as String) as String is shared
			pass
		def concat(str0 as String, str1 as String, str2 as String) as String is shared
			pass
		def concat(str0 as String, str1 as String, str2 as String, str3 as String) as String is shared
			pass
		def concat(values as String[]) as String is shared
			pass
		def intern(str as String) as String is shared
			pass
		def isInterned(str as String) as String is shared
			pass
		def getTypeCode as TypeCode is new
			pass
		def getEnumerator as CharEnumerator is new
			pass

	enum StringComparison
		is fake
		CurrentCulture
		CurrentCultureIgnoreCase
		InvariantCulture
		InvariantCultureIgnoreCase
		Ordinal
		OrdinalIgnoreCase

	enum StringSplitOptions
		is fake
		None
		RemoveEmptyEntries

	class Type
		is fake
		inherits System.Reflection.MemberInfo
		implements System.Reflection.ICustomAttributeProvider
		get memberType as System.Reflection.MemberTypes is override
			pass
		get declaringType as Type is override
			pass
		get declaringMethod as System.Reflection.MethodBase is new
			pass
		get reflectedType as Type is override
			pass
		get structLayoutAttribute as System.Runtime.InteropServices.StructLayoutAttribute is new
			pass
		get gUID as Guid is new
			pass
		get defaultBinder as System.Reflection.Binder is shared
			pass
		get module as System.Reflection.Module is override
			pass
		get assembly as System.Reflection.Assembly is new
			pass
		get typeHandle as RuntimeTypeHandle is new
			pass
		get fullName as String is new
			pass
		get namespace as String is new
			pass
		get assemblyQualifiedName as String is new
			pass
		get baseType as Type is new
			pass
		get typeInitializer as System.Reflection.ConstructorInfo is new
			pass
		get isNested as bool is new
			pass
		get attributes as System.Reflection.TypeAttributes is new
			pass
		get genericParameterAttributes as System.Reflection.GenericParameterAttributes is new
			pass
		get isVisible as bool is new
			pass
		get isNotPublic as bool is new
			pass
		get isPublic as bool is new
			pass
		get isNestedPublic as bool is new
			pass
		get isNestedPrivate as bool is new
			pass
		get isNestedFamily as bool is new
			pass
		get isNestedAssembly as bool is new
			pass
		get isNestedFamANDAssem as bool is new
			pass
		get isNestedFamORAssem as bool is new
			pass
		get isAutoLayout as bool is new
			pass
		get isLayoutSequential as bool is new
			pass
		get isExplicitLayout as bool is new
			pass
		get isClass as bool is new
			pass
		get isInterface as bool is new
			pass
		get isValueType as bool is new
			pass
		get isAbstract as bool is new
			pass
		get isSealed as bool is new
			pass
		get isEnum as bool is new
			pass
		get isSpecialName as bool is new
			pass
		get isImport as bool is new
			pass
		get isSerializable as bool is new
			pass
		get isAnsiClass as bool is new
			pass
		get isUnicodeClass as bool is new
			pass
		get isAutoClass as bool is new
			pass
		get isArray as bool is new
			pass
		get isGenericType as bool is new
			pass
		get isGenericTypeDefinition as bool is new
			pass
		get isGenericParameter as bool is new
			pass
		get genericParameterPosition as int is new
			pass
		get containsGenericParameters as bool is new
			pass
		get isByRef as bool is new
			pass
		get isPointer as bool is new
			pass
		get isPrimitive as bool is new
			pass
		get isCOMObject as bool is new
			pass
		get hasElementType as bool is new
			pass
		get isContextful as bool is new
			pass
		get isMarshalByRef as bool is new
			pass
		get underlyingSystemType as Type is new
			pass
		def getTypeFromHandle(handle as RuntimeTypeHandle) as Type is shared
			pass
		def getTypeHandle(o as Object) as RuntimeTypeHandle is shared
			pass
		def getType as Type is override
			pass
		def getType(typeName as String, throwOnError as bool, ignoreCase as bool) as Type is shared
			pass
		def getType(typeName as String, throwOnError as bool) as Type is shared
			pass
		def getType(typeName as String) as Type is shared
			pass
		def reflectionOnlyGetType(typeName as String, throwIfNotFound as bool, ignoreCase as bool) as Type is shared
			pass
		def makePointerType as Type is new
			pass
		def makeByRefType as Type is new
			pass
		def makeArrayType as Type is new
			pass
		def makeArrayType(rank as int) as Type is new
			pass
		def getTypeFromProgID(progID as String) as Type is shared
			pass
		def getTypeFromProgID(progID as String, throwOnError as bool) as Type is shared
			pass
		def getTypeFromProgID(progID as String, server as String) as Type is shared
			pass
		def getTypeFromProgID(progID as String, server as String, throwOnError as bool) as Type is shared
			pass
		def getTypeFromCLSID(clsid as Guid) as Type is shared
			pass
		def getTypeFromCLSID(clsid as Guid, throwOnError as bool) as Type is shared
			pass
		def getTypeFromCLSID(clsid as Guid, server as String) as Type is shared
			pass
		def getTypeFromCLSID(clsid as Guid, server as String, throwOnError as bool) as Type is shared
			pass
		def getTypeCode(type as Type) as TypeCode is shared
			pass
		def invokeMember(name as String, invokeAttr as System.Reflection.BindingFlags, binder as System.Reflection.Binder, target as Object, args as Object[], modifiers as System.Reflection.ParameterModifier[], culture as System.Globalization.CultureInfo, namedParameters as String[]) as Object is new
			pass
		def invokeMember(name as String, invokeAttr as System.Reflection.BindingFlags, binder as System.Reflection.Binder, target as Object, args as Object[], culture as System.Globalization.CultureInfo) as Object is new
			pass
		def invokeMember(name as String, invokeAttr as System.Reflection.BindingFlags, binder as System.Reflection.Binder, target as Object, args as Object[]) as Object is new
			pass
		def getArrayRank as int is new
			pass
		def getConstructor(bindingAttr as System.Reflection.BindingFlags, binder as System.Reflection.Binder, callConvention as System.Reflection.CallingConventions, types as Type[], modifiers as System.Reflection.ParameterModifier[]) as System.Reflection.ConstructorInfo is new
			pass
		def getConstructor(bindingAttr as System.Reflection.BindingFlags, binder as System.Reflection.Binder, types as Type[], modifiers as System.Reflection.ParameterModifier[]) as System.Reflection.ConstructorInfo is new
			pass
		def getConstructor(types as Type[]) as System.Reflection.ConstructorInfo is new
			pass
		def getConstructors as System.Reflection.ConstructorInfo[] is new
			pass
		def getConstructors(bindingAttr as System.Reflection.BindingFlags) as System.Reflection.ConstructorInfo[] is new
			pass
		def getMethod(name as String, bindingAttr as System.Reflection.BindingFlags, binder as System.Reflection.Binder, callConvention as System.Reflection.CallingConventions, types as Type[], modifiers as System.Reflection.ParameterModifier[]) as System.Reflection.MethodInfo is new
			pass
		def getMethod(name as String, bindingAttr as System.Reflection.BindingFlags, binder as System.Reflection.Binder, types as Type[], modifiers as System.Reflection.ParameterModifier[]) as System.Reflection.MethodInfo is new
			pass
		def getMethod(name as String, types as Type[], modifiers as System.Reflection.ParameterModifier[]) as System.Reflection.MethodInfo is new
			pass
		def getMethod(name as String, types as Type[]) as System.Reflection.MethodInfo is new
			pass
		def getMethod(name as String, bindingAttr as System.Reflection.BindingFlags) as System.Reflection.MethodInfo is new
			pass
		def getMethod(name as String) as System.Reflection.MethodInfo is new
			pass
		def getMethods as System.Reflection.MethodInfo[] is new
			pass
		def getMethods(bindingAttr as System.Reflection.BindingFlags) as System.Reflection.MethodInfo[] is new
			pass
		def getField(name as String, bindingAttr as System.Reflection.BindingFlags) as System.Reflection.FieldInfo is new
			pass
		def getField(name as String) as System.Reflection.FieldInfo is new
			pass
		def getFields as System.Reflection.FieldInfo[] is new
			pass
		def getFields(bindingAttr as System.Reflection.BindingFlags) as System.Reflection.FieldInfo[] is new
			pass
		def getInterface(name as String) as Type is new
			pass
		def getInterface(name as String, ignoreCase as bool) as Type is new
			pass
		def getInterfaces as Type[] is new
			pass
		def findInterfaces(filter as System.Reflection.TypeFilter, filterCriteria as Object) as Type[] is new
			pass
		def getEvent(name as String) as System.Reflection.EventInfo is new
			pass
		def getEvent(name as String, bindingAttr as System.Reflection.BindingFlags) as System.Reflection.EventInfo is new
			pass
		def getEvents as System.Reflection.EventInfo[] is new
			pass
		def getEvents(bindingAttr as System.Reflection.BindingFlags) as System.Reflection.EventInfo[] is new
			pass
		def getProperty(name as String, bindingAttr as System.Reflection.BindingFlags, binder as System.Reflection.Binder, returnType as Type, types as Type[], modifiers as System.Reflection.ParameterModifier[]) as System.Reflection.PropertyInfo is new
			pass
		def getProperty(name as String, returnType as Type, types as Type[], modifiers as System.Reflection.ParameterModifier[]) as System.Reflection.PropertyInfo is new
			pass
		def getProperty(name as String, bindingAttr as System.Reflection.BindingFlags) as System.Reflection.PropertyInfo is new
			pass
		def getProperty(name as String, returnType as Type, types as Type[]) as System.Reflection.PropertyInfo is new
			pass
		def getProperty(name as String, types as Type[]) as System.Reflection.PropertyInfo is new
			pass
		def getProperty(name as String, returnType as Type) as System.Reflection.PropertyInfo is new
			pass
		def getProperty(name as String) as System.Reflection.PropertyInfo is new
			pass
		def getProperties(bindingAttr as System.Reflection.BindingFlags) as System.Reflection.PropertyInfo[] is new
			pass
		def getProperties as System.Reflection.PropertyInfo[] is new
			pass
		def getNestedTypes as Type[] is new
			pass
		def getNestedTypes(bindingAttr as System.Reflection.BindingFlags) as Type[] is new
			pass
		def getNestedType(name as String) as Type is new
			pass
		def getNestedType(name as String, bindingAttr as System.Reflection.BindingFlags) as Type is new
			pass
		def getMember(name as String) as System.Reflection.MemberInfo[] is new
			pass
		def getMember(name as String, bindingAttr as System.Reflection.BindingFlags) as System.Reflection.MemberInfo[] is new
			pass
		def getMember(name as String, type as System.Reflection.MemberTypes, bindingAttr as System.Reflection.BindingFlags) as System.Reflection.MemberInfo[] is new
			pass
		def getMembers as System.Reflection.MemberInfo[] is new
			pass
		def getMembers(bindingAttr as System.Reflection.BindingFlags) as System.Reflection.MemberInfo[] is new
			pass
		def getDefaultMembers as System.Reflection.MemberInfo[] is new
			pass
		def findMembers(memberType as System.Reflection.MemberTypes, bindingAttr as System.Reflection.BindingFlags, filter as System.Reflection.MemberFilter, filterCriteria as Object) as System.Reflection.MemberInfo[] is new
			pass
		def getGenericParameterConstraints as Type[] is new
			pass
		def makeGenericType(typeArguments as Type[]) as Type is new
			pass
		def getElementType as Type is new
			pass
		def getGenericArguments as Type[] is new
			pass
		def getGenericTypeDefinition as Type is new
			pass
		def isSubclassOf(c as Type) as bool is new
			pass
		def isInstanceOfType(o as Object) as bool is new
			pass
		def isAssignableFrom(c as Type) as bool is new
			pass
		def toString as String is override
			pass
		def getTypeArray(args as Object[]) as Type[] is shared
			pass
		def equals(o as Object) as bool is override
			pass
		def equals(o as Type) as bool is override
			pass
		def getHashCode as int is override
			pass
		def getInterfaceMap(interfaceType as Type) as System.Reflection.InterfaceMapping is new
			pass

	class Console
		is fake
		inherits System.Object

		get error as System.IO.TextWriter is shared
			pass
		get in as System.IO.TextReader is shared
			pass
		get out as System.IO.TextWriter is shared
			pass
		pro inputEncoding as System.Text.Encoding is shared
			get
				pass
			set
				pass
		pro outputEncoding as System.Text.Encoding is shared
			get
				pass
			set
				pass
		pro bufferHeight as int is shared
			get
				pass
			set
				pass
		pro bufferWidth as int is shared
			get
				pass
			set
				pass
		pro windowHeight as int is shared
			get
				pass
			set
				pass
		pro windowWidth as int is shared
			get
				pass
			set
				pass
		get largestWindowWidth as int is shared
			pass
		get largestWindowHeight as int is shared
			pass
		pro windowLeft as int is shared
			get
				pass
			set
				pass
		pro windowTop as int is shared
			get
				pass
			set
				pass
		pro cursorLeft as int is shared
			get
				pass
			set
				pass
		pro cursorTop as int is shared
			get
				pass
			set
				pass
		pro cursorSize as int is shared
			get
				pass
			set
				pass
		pro cursorVisible as bool is shared
			get
				pass
			set
				pass
		pro title as String is shared
			get
				pass
			set
				pass
		get keyAvailable as bool is shared
			pass
		get numberLock as bool is shared
			pass
		get capsLock as bool is shared
			pass
		pro treatControlCAsInput as bool is shared
			get
				pass
			set
				pass
		def beep is shared
			pass
		def beep(frequency as int, duration as int) is shared
			pass
		def clear is shared
			pass
		def resetColor is shared
			pass
		def moveBufferArea(sourceLeft as int, sourceTop as int, sourceWidth as int, sourceHeight as int, targetLeft as int, targetTop as int) is shared
			pass
		def setBufferSize(width as int, height as int) is shared
			pass
		def setWindowSize(width as int, height as int) is shared
			pass
		def setWindowPosition(left as int, top as int) is shared
			pass
		def setCursorPosition(left as int, top as int) is shared
			pass
		def openStandardError as System.IO.Stream is shared
			pass
		def openStandardError(bufferSize as int) as System.IO.Stream is shared
			pass
		def openStandardInput as System.IO.Stream is shared
			pass
		def openStandardInput(bufferSize as int) as System.IO.Stream is shared
			pass
		def openStandardOutput as System.IO.Stream is shared
			pass
		def openStandardOutput(bufferSize as int) as System.IO.Stream is shared
			pass
		def setIn(newIn as System.IO.TextReader) is shared
			pass
		def setOut(newOut as System.IO.TextWriter) is shared
			pass
		def setError(newError as System.IO.TextWriter) is shared
			pass
		def read as int is shared
			pass
		def readLine as String is shared
			pass
		def writeLine is shared
			pass
		def writeLine(value as bool) is shared
			pass
		def writeLine(value as char) is shared
			pass
		def writeLine(buffer as char[]) is shared
			pass
		def writeLine(buffer as char[], index as int, count as int) is shared
			pass
		def writeLine(value as decimal) is shared
			pass
		def writeLine(value as float) is shared
			pass
		def writeLine(value as float) is shared
			pass
		def writeLine(value as int) is shared
			pass
		def writeLine(value as int) is shared
			pass
		def writeLine(value as int) is shared
			pass
		def writeLine(value as int) is shared
			pass
		def writeLine(value as Object) is shared
			pass
		def writeLine(value as String) is shared
			pass
		def writeLine(format as String, arg0 as Object) is shared
			pass
		def writeLine(format as String, arg0 as Object, arg1 as Object) is shared
			pass
		def writeLine(format as String, arg0 as Object, arg1 as Object, arg2 as Object) is shared
			pass
		def writeLine(format as String, arg0 as Object, arg1 as Object, arg2 as Object, arg3 as Object) is shared
			pass
		def writeLine(format as String, arg as Object[]) is shared
			pass
		def write(format as String, arg0 as Object) is shared
			pass
		def write(format as String, arg0 as Object, arg1 as Object) is shared
			pass
		def write(format as String, arg0 as Object, arg1 as Object, arg2 as Object) is shared
			pass
		def write(format as String, arg0 as Object, arg1 as Object, arg2 as Object, arg3 as Object) is shared
			pass
		def write(format as String, arg as Object[]) is shared
			pass
		def write(value as bool) is shared
			pass
		def write(value as char) is shared
			pass
		def write(buffer as char[]) is shared
			pass
		def write(buffer as char[], index as int, count as int) is shared
			pass
		def write(value as float) is shared
			pass
		def write(value as decimal) is shared
			pass
		def write(value as float) is shared
			pass
		def write(value as int) is shared
			pass
		def write(value as int) is shared
			pass
		def write(value as int) is shared
			pass
		def write(value as int) is shared
			pass
		def write(value as Object) is shared
			pass
		def write(value as String) is shared
			pass

	class Environment
		is fake
		inherits System.Object

		get tickCount as int is shared
			pass
		pro exitCode as int is shared
			get
				pass
			set
				pass
		get commandLine as String is shared
			pass
		pro currentDirectory as String is shared
			get
				pass
			set
				pass
		get systemDirectory as String is shared
			pass
		get machineName as String is shared
			pass
		get processorCount as int is shared
			pass
		get newLine as String is shared
			pass
		get version as Version is shared
			pass
		get workingSet as int is shared
			pass
		get stackTrace as String is shared
			pass
		get hasShutdownStarted as bool is shared
			pass
		get userName as String is shared
			pass
		get userInteractive as bool is shared
			pass
		get userDomainName as String is shared
			pass
		def failFast(message as String) is shared
			pass
		def getEnvironmentVariable(variable as String) as String is shared
			pass
		def setEnvironmentVariable(variable as String, value as String) is shared
			pass
		def exit(exitCode as int) is shared
			pass
		def expandEnvironmentVariables(name as String) as String is shared
			pass
		def getCommandLineArgs as String[] is shared
			pass
		def getEnvironmentVariables as System.Collections.IDictionary is shared
			pass
		def getLogicalDrives as String[] is shared
			pass

	class Array
		is fake
		inherits System.Object
		implements System.ICloneable, System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
		get length as int is new
			pass
		get longLength as int is new
			pass
		get rank as int is new
			pass
		get syncRoot as Object is new
			pass
		get isReadOnly as bool is new
			pass
		get isFixedSize as bool is new
			pass
		get isSynchronized as bool is new
			pass
		def clear(array as Array, index as int, length as int) is shared
			pass
		def getLength(dimension as int) as int is new
			pass
		def getUpperBound(dimension as int) as int is new
			pass
		def getLowerBound(dimension as int) as int is new
			pass
		def initialize is new
			pass
		def createInstance(elementType as Type, length as int) as Array is shared
			pass
		def createInstance(elementType as Type, length1 as int, length2 as int) as Array is shared
			pass
		def createInstance(elementType as Type, length1 as int, length2 as int, length3 as int) as Array is shared
			pass
		def createInstance(elementType as Type, lengths as int[]) as Array is shared
			pass
		def createInstance(elementType as Type, lengths as int[]) as Array is shared
			pass
		def createInstance(elementType as Type, lengths as int[], lowerBounds as int[]) as Array is shared
			pass
		def copy(sourceArray as Array, destinationArray as Array, length as int) is shared
			pass
		def copy(sourceArray as Array, sourceIndex as int, destinationArray as Array, destinationIndex as int, length as int) is shared
			pass
		def constrainedCopy(sourceArray as Array, sourceIndex as int, destinationArray as Array, destinationIndex as int, length as int) is shared
			pass
		def copy(sourceArray as Array, destinationArray as Array, length as int) is shared
			pass
		def copy(sourceArray as Array, sourceIndex as int, destinationArray as Array, destinationIndex as int, length as int) is shared
			pass
		def getValue(indices as int[]) as Object is new
			pass
		def getValue(index as int) as Object is new
			pass
		def getValue(index1 as int, index2 as int) as Object is new
			pass
		def getValue(index1 as int, index2 as int, index3 as int) as Object is new
			pass
		def getValue(index as int) as Object is new
			pass
		def getValue(index1 as int, index2 as int) as Object is new
			pass
		def getValue(index1 as int, index2 as int, index3 as int) as Object is new
			pass
		def getValue(indices as int[]) as Object is new
			pass
		def setValue(value as Object, index as int) is new
			pass
		def setValue(value as Object, index1 as int, index2 as int) is new
			pass
		def setValue(value as Object, index1 as int, index2 as int, index3 as int) is new
			pass
		def setValue(value as Object, indices as int[]) is new
			pass
		def setValue(value as Object, index as int) is new
			pass
		def setValue(value as Object, index1 as int, index2 as int) is new
			pass
		def setValue(value as Object, index1 as int, index2 as int, index3 as int) is new
			pass
		def setValue(value as Object, indices as int[]) is new
			pass
		def getLongLength(dimension as int) as int is new
			pass
		def clone as Object is new
			pass
		def binarySearch(array as Array, value as Object) as int is shared
			pass
		def binarySearch(array as Array, index as int, length as int, value as Object) as int is shared
			pass
		def binarySearch(array as Array, value as Object, comparer as System.Collections.IComparer) as int is shared
			pass
		def binarySearch(array as Array, index as int, length as int, value as Object, comparer as System.Collections.IComparer) as int is shared
			pass
		def copyTo(array as Array, index as int) is new
			pass
		def copyTo(array as Array, index as int) is new
			pass
		def getEnumerator as System.Collections.IEnumerator is new
			pass
		def indexOf(array as Array, value as Object) as int is shared
			pass
		def indexOf(array as Array, value as Object, startIndex as int) as int is shared
			pass
		def indexOf(array as Array, value as Object, startIndex as int, count as int) as int is shared
			pass
		def lastIndexOf(array as Array, value as Object) as int is shared
			pass
		def lastIndexOf(array as Array, value as Object, startIndex as int) as int is shared
			pass
		def lastIndexOf(array as Array, value as Object, startIndex as int, count as int) as int is shared
			pass
		def reverse(array as Array) is shared
			pass
		def reverse(array as Array, index as int, length as int) is shared
			pass
		def sort(array as Array) is shared
			pass
		def sort(keys as Array, items as Array) is shared
			pass
		def sort(array as Array, index as int, length as int) is shared
			pass
		def sort(keys as Array, items as Array, index as int, length as int) is shared
			pass
		def sort(array as Array, comparer as System.Collections.IComparer) is shared
			pass
		def sort(keys as Array, items as Array, comparer as System.Collections.IComparer) is shared
			pass
		def sort(array as Array, index as int, length as int, comparer as System.Collections.IComparer) is shared
			pass
		def sort(keys as Array, items as Array, index as int, length as int, comparer as System.Collections.IComparer) is shared
			pass

	interface IAsyncResult
		is fake
		get isCompleted as bool
		get asyncState as Object
		get completedSynchronously as bool

	class CharEnumerator
		is fake
		inherits System.Object
		implements System.ICloneable, System.IDisposable, System.Collections.IEnumerator
		get current as char is new
			pass
		def clone as Object is new
			pass
		def moveNext as bool is new
			pass
		def reset is new
			pass

	struct DateTime
		is fake
		def init(ticks as int)
			pass
		def init(ticks as int, kind as DateTimeKind)
			pass
		def init(year as int, month as int, day as int)
			pass
		def init(year as int, month as int, day as int, calendar as System.Globalization.Calendar)
			pass
		def init(year as int, month as int, day as int, hour as int, minute as int, second as int)
			pass
		def init(year as int, month as int, day as int, hour as int, minute as int, second as int, kind as DateTimeKind)
			pass
		def init(year as int, month as int, day as int, hour as int, minute as int, second as int, calendar as System.Globalization.Calendar)
			pass
		def init(year as int, month as int, day as int, hour as int, minute as int, second as int, millisecond as int)
			pass
		def init(year as int, month as int, day as int, hour as int, minute as int, second as int, millisecond as int, kind as DateTimeKind)
			pass
		def init(year as int, month as int, day as int, hour as int, minute as int, second as int, millisecond as int, calendar as System.Globalization.Calendar)
			pass
		def init(year as int, month as int, day as int, hour as int, minute as int, second as int, millisecond as int, calendar as System.Globalization.Calendar, kind as DateTimeKind)
			pass
		get date as DateTime is new
			pass
		get day as int is new
			pass
		get dayOfWeek as DayOfWeek is new
			pass
		get dayOfYear as int is new
			pass
		get hour as int is new
			pass
		get kind as DateTimeKind is new
			pass
		get millisecond as int is new
			pass
		get minute as int is new
			pass
		get month as int is new
			pass
		get now as DateTime is shared
			pass
		get utcNow as DateTime is shared
			pass
		get second as int is new
			pass
		get ticks as int is new
			pass
		get timeOfDay as TimeSpan is new
			pass
		get today as DateTime is shared
			pass
		get year as int is new
			pass
		def add(value as TimeSpan) as DateTime is new
			pass
		def addDays(value as float) as DateTime is new
			pass
		def addHours(value as float) as DateTime is new
			pass
		def addMilliseconds(value as float) as DateTime is new
			pass
		def addMinutes(value as float) as DateTime is new
			pass
		def addMonths(months as int) as DateTime is new
			pass
		def addSeconds(value as float) as DateTime is new
			pass
		def addTicks(value as int) as DateTime is new
			pass
		def addYears(value as int) as DateTime is new
			pass
		def compare(t1 as DateTime, t2 as DateTime) as int is shared
			pass
		def compareTo(value as Object) as int is new
			pass
		def compareTo(value as DateTime) as int is new
			pass
		def daysInMonth(year as int, month as int) as int is shared
			pass
		def equals(value as Object) as bool is override
			pass
		def equals(value as DateTime) as bool is override
			pass
		def equals(t1 as DateTime, t2 as DateTime) as bool is shared
			pass
		def fromBinary(dateData as int) as DateTime is shared
			pass
		def fromFileTime(fileTime as int) as DateTime is shared
			pass
		def fromFileTimeUtc(fileTime as int) as DateTime is shared
			pass
		def fromOADate(d as float) as DateTime is shared
			pass
		def isDaylightSavingTime as bool is new
			pass
		def specifyKind(value as DateTime, kind as DateTimeKind) as DateTime is shared
			pass
		def toBinary as int is new
			pass
		def getHashCode as int is override
			pass
		def isLeapYear(year as int) as bool is shared
			pass
		def parse(s as String) as DateTime is shared
			pass
		def parse(s as String, provider as IFormatProvider) as DateTime is shared
			pass
		def parse(s as String, provider as IFormatProvider, styles as System.Globalization.DateTimeStyles) as DateTime is shared
			pass
		def parseExact(s as String, format as String, provider as IFormatProvider) as DateTime is shared
			pass
		def parseExact(s as String, format as String, provider as IFormatProvider, style as System.Globalization.DateTimeStyles) as DateTime is shared
			pass
		def parseExact(s as String, formats as String[], provider as IFormatProvider, style as System.Globalization.DateTimeStyles) as DateTime is shared
			pass
		def subtract(value as DateTime) as TimeSpan is new
			pass
		def subtract(value as TimeSpan) as DateTime is new
			pass
		def toOADate as float is new
			pass
		def toFileTime as int is new
			pass
		def toFileTimeUtc as int is new
			pass
		def toLocalTime as DateTime is new
			pass
		def toLongDateString as String is new
			pass
		def toLongTimeString as String is new
			pass
		def toShortDateString as String is new
			pass
		def toShortTimeString as String is new
			pass
		def toString as String is override
			pass
		def toString(format as String) as String is new
			pass
		def toString(provider as IFormatProvider) as String is new
			pass
		def toString(format as String, provider as IFormatProvider) as String is new
			pass
		def toUniversalTime as DateTime is new
			pass
		def tryParse(s as String, rsult as DateTime) as bool is shared
			pass
		def tryParse(s as String, provider as IFormatProvider, styles as System.Globalization.DateTimeStyles, rsult as DateTime) as bool is shared
			pass
		def tryParseExact(s as String, format as String, provider as IFormatProvider, style as System.Globalization.DateTimeStyles, rsult as DateTime) as bool is shared
			pass
		def tryParseExact(s as String, formats as String[], provider as IFormatProvider, style as System.Globalization.DateTimeStyles, rsult as DateTime) as bool is shared
			pass
		def op_Addition(d as DateTime, t as TimeSpan) as DateTime is shared
			pass
		def op_Subtraction(d as DateTime, t as TimeSpan) as DateTime is shared
			pass
		def op_Subtraction(d1 as DateTime, d2 as DateTime) as TimeSpan is shared
			pass
		def op_Equality(d1 as DateTime, d2 as DateTime) as bool is shared
			pass
		def op_Inequality(d1 as DateTime, d2 as DateTime) as bool is shared
			pass
		def op_LessThan(t1 as DateTime, t2 as DateTime) as bool is shared
			pass
		def op_LessThanOrEqual(t1 as DateTime, t2 as DateTime) as bool is shared
			pass
		def op_GreaterThan(t1 as DateTime, t2 as DateTime) as bool is shared
			pass
		def op_GreaterThanOrEqual(t1 as DateTime, t2 as DateTime) as bool is shared
			pass
		def getDateTimeFormats as String[] is new
			pass
		def getDateTimeFormats(provider as IFormatProvider) as String[] is new
			pass
		def getDateTimeFormats(format as char) as String[] is new
			pass
		def getDateTimeFormats(format as char, provider as IFormatProvider) as String[] is new
			pass
		def getTypeCode as TypeCode is new
			pass

	enum DateTimeKind
		is fake
		Unspecified
		Utc
		Local

	enum DayOfWeek
		is fake
		Sunday
		Monday
		Tuesday
		Wednesday
		Thursday
		Friday
		Saturday

	struct TimeSpan
		is fake
		def init(ticks as int)
			pass
		def init(hours as int, minutes as int, seconds as int)
			pass
		def init(days as int, hours as int, minutes as int, seconds as int)
			pass
		def init(days as int, hours as int, minutes as int, seconds as int, milliseconds as int)
			pass
		get ticks as int is new
			pass
		get days as int is new
			pass
		get hours as int is new
			pass
		get milliseconds as int is new
			pass
		get minutes as int is new
			pass
		get seconds as int is new
			pass
		get totalDays as float is new
			pass
		get totalHours as float is new
			pass
		get totalMilliseconds as float is new
			pass
		get totalMinutes as float is new
			pass
		get totalSeconds as float is new
			pass
		def compareTo(value as TimeSpan) as int is new
			pass
		def equals(value as Object) as bool is override
			pass
		def equals(obj as TimeSpan) as bool is override
			pass
		def getHashCode as int is override
			pass
		def toString as String is override
			pass
		def add(ts as TimeSpan) as TimeSpan is new
			pass
		def compare(t1 as TimeSpan, t2 as TimeSpan) as int is shared
			pass
		def compareTo(value as Object) as int is new
			pass
		def fromDays(value as float) as TimeSpan is shared
			pass
		def duration as TimeSpan is new
			pass
		def equals(t1 as TimeSpan, t2 as TimeSpan) as bool is shared
			pass
		def fromHours(value as float) as TimeSpan is shared
			pass
		def fromMilliseconds(value as float) as TimeSpan is shared
			pass
		def fromMinutes(value as float) as TimeSpan is shared
			pass
		def negate as TimeSpan is new
			pass
		def parse(s as String) as TimeSpan is shared
			pass
		def tryParse(s as String, rsult as TimeSpan) as bool is shared
			pass
		def fromSeconds(value as float) as TimeSpan is shared
			pass
		def subtract(ts as TimeSpan) as TimeSpan is new
			pass
		def fromTicks(value as int) as TimeSpan is shared
			pass
		def op_UnaryNegation(t as TimeSpan) as TimeSpan is shared
			pass
		def op_Subtraction(t1 as TimeSpan, t2 as TimeSpan) as TimeSpan is shared
			pass
		def op_UnaryPlus(t as TimeSpan) as TimeSpan is shared
			pass
		def op_Addition(t1 as TimeSpan, t2 as TimeSpan) as TimeSpan is shared
			pass
		def op_Equality(t1 as TimeSpan, t2 as TimeSpan) as bool is shared
			pass
		def op_Inequality(t1 as TimeSpan, t2 as TimeSpan) as bool is shared
			pass
		def op_LessThan(t1 as TimeSpan, t2 as TimeSpan) as bool is shared
			pass
		def op_LessThanOrEqual(t1 as TimeSpan, t2 as TimeSpan) as bool is shared
			pass
		def op_GreaterThan(t1 as TimeSpan, t2 as TimeSpan) as bool is shared
			pass
		def op_GreaterThanOrEqual(t1 as TimeSpan, t2 as TimeSpan) as bool is shared
			pass

	struct Guid
		is fake
		def init(b as int[])
			pass
		def init(a as int, b as int, c as int, d as int, e as int, f as int, g as int, h as int, i as int, j as int, k as int)
			pass
		def init(g as String)
			pass
		def init(a as int, b as int, c as int, d as int[])
			pass
		def init(a as int, b as int, c as int, d as int, e as int, f as int, g as int, h as int, i as int, j as int, k as int)
			pass
		def toByteArray as int[] is new
			pass
		def toString as String is override
			pass
		def getHashCode as int is override
			pass
		def equals(o as Object) as bool is override
			pass
		def equals(g as Guid) as bool is override
			pass
		def compareTo(value as Object) as int is new
			pass
		def compareTo(value as Guid) as int is new
			pass
		def op_Equality(a as Guid, b as Guid) as bool is shared
			pass
		def op_Inequality(a as Guid, b as Guid) as bool is shared
			pass
		def newGuid as Guid is shared
			pass
		def toString(format as String) as String is new
			pass
		def toString(format as String, provider as IFormatProvider) as String is new
			pass

	interface IFormatProvider
		is fake
		def getFormat(formatType as Type) as Object

	struct ModuleHandle
		is fake
		get mDStreamVersion as int is new
			pass
		def getHashCode as int is override
			pass
		def equals(obj as Object) as bool is override
			pass
		def equals(handle as ModuleHandle) as bool is new
			pass
		def op_Equality(left as ModuleHandle, right as ModuleHandle) as bool is shared
			pass
		def op_Inequality(left as ModuleHandle, right as ModuleHandle) as bool is shared
			pass
		def getRuntimeTypeHandleFromMetadataToken(typeToken as int) as RuntimeTypeHandle is new
			pass
		def resolveTypeHandle(typeToken as int) as RuntimeTypeHandle is new
			pass
		def resolveTypeHandle(typeToken as int, typeInstantiationContext as RuntimeTypeHandle[], methodInstantiationContext as RuntimeTypeHandle[]) as RuntimeTypeHandle is new
			pass
		def getRuntimeMethodHandleFromMetadataToken(methodToken as int) as RuntimeMethodHandle is new
			pass
		def resolveMethodHandle(methodToken as int) as RuntimeMethodHandle is new
			pass
		def resolveMethodHandle(methodToken as int, typeInstantiationContext as RuntimeTypeHandle[], methodInstantiationContext as RuntimeTypeHandle[]) as RuntimeMethodHandle is new
			pass
		def getRuntimeFieldHandleFromMetadataToken(fieldToken as int) as RuntimeFieldHandle is new
			pass
		def resolveFieldHandle(fieldToken as int) as RuntimeFieldHandle is new
			pass
		def resolveFieldHandle(fieldToken as int, typeInstantiationContext as RuntimeTypeHandle[], methodInstantiationContext as RuntimeTypeHandle[]) as RuntimeFieldHandle is new
			pass

	struct RuntimeMethodHandle
		is fake
		get value as int is new
			pass
		def getFunctionPointer as int is new
			pass
		def getObjectData(info as System.Runtime.Serialization.SerializationInfo, context as System.Runtime.Serialization.StreamingContext) is new
			pass
		def getHashCode as int is override
			pass
		def equals(obj as Object) as bool is override
			pass
		def op_Equality(left as RuntimeMethodHandle, right as RuntimeMethodHandle) as bool is shared
			pass
		def op_Inequality(left as RuntimeMethodHandle, right as RuntimeMethodHandle) as bool is shared
			pass
		def equals(handle as RuntimeMethodHandle) as bool is new
			pass

	struct RuntimeFieldHandle
		is fake
		get value as int is new
			pass
		def getHashCode as int is override
			pass
		def equals(obj as Object) as bool is override
			pass
		def equals(handle as RuntimeFieldHandle) as bool is new
			pass
		def op_Equality(left as RuntimeFieldHandle, right as RuntimeFieldHandle) as bool is shared
			pass
		def op_Inequality(left as RuntimeFieldHandle, right as RuntimeFieldHandle) as bool is shared
			pass
		def getObjectData(info as System.Runtime.Serialization.SerializationInfo, context as System.Runtime.Serialization.StreamingContext) is new
			pass

	struct RuntimeTypeHandle
		is fake
		get value as int is new
			pass
		def op_Equality(left as RuntimeTypeHandle, right as Object) as bool is shared
			pass
		def op_Equality(left as Object, right as RuntimeTypeHandle) as bool is shared
			pass
		def op_Inequality(left as RuntimeTypeHandle, right as Object) as bool is shared
			pass
		def op_Inequality(left as Object, right as RuntimeTypeHandle) as bool is shared
			pass
		def getHashCode as int is override
			pass
		def equals(obj as Object) as bool is override
			pass
		def equals(handle as RuntimeTypeHandle) as bool is new
			pass
		def getModuleHandle as ModuleHandle is new
			pass
		def getObjectData(info as System.Runtime.Serialization.SerializationInfo, context as System.Runtime.Serialization.StreamingContext) is new
			pass

	enum TypeCode
		is fake
		Empty
		Object
		DBNull
		Boolean
		Char
		SByte
		Byte
		Int16
		UInt16
		Int32
		UInt32
		Int64
		UInt64
		Single
		Double
		Decimal
		DateTime
		String

	struct TypedReference
		is fake
		def makeTypedReference(target as Object, flds as System.Reflection.FieldInfo[]) as TypedReference is shared
			pass
		def getHashCode as int is override
			pass
		def equals(o as Object) as bool is override
			pass
		def toObject(value as TypedReference) as Object is shared
			pass
		def getTargetType(value as TypedReference) as Type is shared
			pass
		def targetTypeToken(value as TypedReference) as RuntimeTypeHandle is shared
			pass
		def setTypedReference(target as TypedReference, value as Object) is shared
			pass

	class Version
		is fake
		inherits System.Object
		implements System.ICloneable, System.IComparable
		def init(major as int, minor as int, build as int, revision as int)
			pass
		def init(major as int, minor as int, build as int)
			pass
		def init(major as int, minor as int)
			pass
		def init(version as String)
			pass
		def init
			pass
		get major as int is new
			pass
		get minor as int is new
			pass
		get build as int is new
			pass
		get revision as int is new
			pass
		get majorRevision as int is new
			pass
		get minorRevision as int is new
			pass
		def clone as Object is new
			pass
		def compareTo(version as Object) as int is new
			pass
		def compareTo(value as Version) as int is new
			pass
		def equals(obj as Object) as bool is override
			pass
		def equals(obj as Version) as bool is override
			pass
		def getHashCode as int is override
			pass
		def toString as String is override
			pass
		def toString(fieldCount as int) as String is new
			pass
		def op_Equality(v1 as Version, v2 as Version) as bool is shared
			pass
		def op_Inequality(v1 as Version, v2 as Version) as bool is shared
			pass
		def op_LessThan(v1 as Version, v2 as Version) as bool is shared
			pass
		def op_LessThanOrEqual(v1 as Version, v2 as Version) as bool is shared
			pass
		def op_GreaterThan(v1 as Version, v2 as Version) as bool is shared
			pass
		def op_GreaterThanOrEqual(v1 as Version, v2 as Version) as bool is shared
			pass

	class Exception
		is fake
		inherits System.Object
		implements System.Runtime.Serialization.ISerializable
		def init
			pass
		def init(message as String)
			pass
		def init(message as String, innerException as Exception)
			pass
		get message as String is new
			pass
		get data as System.Collections.IDictionary is new
			pass
		get innerException as Exception is new
			pass
		get targetSite as System.Reflection.MethodBase is new
			pass
		get stackTrace as String is new
			pass
		pro helpLink as String is new
			get
				pass
			set
				pass
		pro source as String is new
			get
				pass
			set
				pass
		def getBaseException as Exception is new
			pass
		def toString as String is override
			pass
		def getObjectData(info as System.Runtime.Serialization.SerializationInfo, context as System.Runtime.Serialization.StreamingContext) is new
			pass
		def getType as Type is override
			pass

	class ApplicationException
		is fake
		inherits System.Exception
		implements System.Runtime.Serialization.ISerializable
		def init
			pass
		def init(message as String)
			pass
		def init(message as String, innerException as Exception)
			pass

	class SystemException
		is fake
		inherits System.Exception
		implements System.Runtime.Serialization.ISerializable
		def init
			pass
		def init(message as String)
			pass
		def init(message as String, innerException as Exception)
			pass

	class ArgumentException
		is fake
		inherits System.SystemException
		implements System.Runtime.Serialization.ISerializable
		def init(message as String)
			pass
		def init
			pass
		def init(message as String, innerException as Exception)
			pass
		def init(message as String, paramName as String, innerException as Exception)
			pass
		def init(message as String, paramName as String)
			pass
		get message as String is override
			pass
		get paramName as String is new
			pass
		def getObjectData(info as System.Runtime.Serialization.SerializationInfo, context as System.Runtime.Serialization.StreamingContext) is override
			pass

	class ArgumentNullException
		is fake
		inherits System.ArgumentException
		implements System.Runtime.Serialization.ISerializable
		def init
			pass
		def init(paramName as String)
			pass
		def init(message as String, innerException as Exception)
			pass
		def init(paramName as String, message as String)
			pass

	class ArithmeticException
		is fake
		inherits System.SystemException
		implements System.Runtime.Serialization.ISerializable
		def init
			pass
		def init(message as String)
			pass
		def init(message as String, innerException as Exception)
			pass

	class IndexOutOfRangeException
		is fake
		inherits System.SystemException
		implements System.Runtime.Serialization.ISerializable
		def init
			pass
		def init(message as String)
			pass
		def init(message as String, innerException as Exception)
			pass

	class NullReferenceException
		is fake
		inherits System.SystemException
		implements System.Runtime.Serialization.ISerializable
		def init
			pass
		def init(message as String)
			pass
		def init(message as String, innerException as Exception)
			pass

	class FormatException
		is fake
		inherits System.SystemException
		implements System.Runtime.Serialization.ISerializable
		def init
			pass
		def init(message as String)
			pass
		def init(message as String, innerException as Exception)
			pass

	class OverflowException
		is fake
		inherits System.ArithmeticException
		implements System.Runtime.Serialization.ISerializable
		def init
			pass
		def init(message as String)
			pass
		def init(message as String, innerException as Exception)
			pass

	class Math
		is fake
		inherits System.Object

		def sqrt(d as float) as float is shared
			pass
		def acos(d as float) as float is shared
			pass
		def asin(d as float) as float is shared
			pass
		def atan(d as float) as float is shared
			pass
		def atan2(y as float, x as float) as float is shared
			pass
		def ceiling(a as float) as float is shared
			pass
		def cos(d as float) as float is shared
			pass
		def cosh(value as float) as float is shared
			pass
		def floor(d as float) as float is shared
			pass
		def sin(a as float) as float is shared
			pass
		def tan(a as float) as float is shared
			pass
		def sinh(value as float) as float is shared
			pass
		def tanh(value as float) as float is shared
			pass
		def round(a as float) as float is shared
			pass
		def log(d as float) as float is shared
			pass
		def log10(d as float) as float is shared
			pass
		def exp(d as float) as float is shared
			pass
		def pow(x as float, y as float) as float is shared
			pass
		def abs(value as float) as float is shared
			pass
		def abs(value as float) as float is shared
			pass
		def ceiling(d as decimal) as decimal is shared
			pass
		def floor(d as decimal) as decimal is shared
			pass
		def round(value as float, digits as int) as float is shared
			pass
		def round(value as float, mode as MidpointRounding) as float is shared
			pass
		def round(value as float, digits as int, mode as MidpointRounding) as float is shared
			pass
		def round(d as decimal) as decimal is shared
			pass
		def round(d as decimal, decimals as int) as decimal is shared
			pass
		def round(d as decimal, mode as MidpointRounding) as decimal is shared
			pass
		def round(d as decimal, decimals as int, mode as MidpointRounding) as decimal is shared
			pass
		def truncate(d as decimal) as decimal is shared
			pass
		def truncate(d as float) as float is shared
			pass
		def iEEERemainder(x as float, y as float) as float is shared
			pass
		def abs(value as int) as int is shared
			pass
		def abs(value as int) as int is shared
			pass
		def abs(value as int) as int is shared
			pass
		def abs(value as int) as int is shared
			pass
		def abs(value as decimal) as decimal is shared
			pass
		def max(val1 as int, val2 as int) as int is shared
			pass
		def max(val1 as int, val2 as int) as int is shared
			pass
		def max(val1 as int, val2 as int) as int is shared
			pass
		def max(val1 as int, val2 as int) as int is shared
			pass
		def max(val1 as int, val2 as int) as int is shared
			pass
		def max(val1 as int, val2 as int) as int is shared
			pass
		def max(val1 as int, val2 as int) as int is shared
			pass
		def max(val1 as int, val2 as int) as int is shared
			pass
		def max(val1 as float, val2 as float) as float is shared
			pass
		def max(val1 as float, val2 as float) as float is shared
			pass
		def max(val1 as decimal, val2 as decimal) as decimal is shared
			pass
		def min(val1 as int, val2 as int) as int is shared
			pass
		def min(val1 as int, val2 as int) as int is shared
			pass
		def min(val1 as int, val2 as int) as int is shared
			pass
		def min(val1 as int, val2 as int) as int is shared
			pass
		def min(val1 as int, val2 as int) as int is shared
			pass
		def min(val1 as int, val2 as int) as int is shared
			pass
		def min(val1 as int, val2 as int) as int is shared
			pass
		def min(val1 as int, val2 as int) as int is shared
			pass
		def min(val1 as float, val2 as float) as float is shared
			pass
		def min(val1 as float, val2 as float) as float is shared
			pass
		def min(val1 as decimal, val2 as decimal) as decimal is shared
			pass
		def log(a as float, newBase as float) as float is shared
			pass
		def sign(value as int) as int is shared
			pass
		def sign(value as int) as int is shared
			pass
		def sign(value as int) as int is shared
			pass
		def sign(value as int) as int is shared
			pass
		def sign(value as float) as int is shared
			pass
		def sign(value as float) as int is shared
			pass
		def sign(value as decimal) as int is shared
			pass
		def bigMul(a as int, b as int) as int is shared
			pass

	class Random
		is fake
		inherits System.Object

		def init
			pass
		def init(seed as int)
			pass
		def next as int is new
			pass
		def next(minValue as int, maxValue as int) as int is new
			pass
		def next(maxValue as int) as int is new
			pass
		def nextDouble as float is new
			pass
		def nextBytes(buffer as int[]) is new
			pass

	enum MidpointRounding
		is fake
		ToEven
		AwayFromZero

	class MarshalByRefObject
		is fake
		inherits System.Object

		def getLifetimeService as Object is new
			pass
		def initializeLifetimeService as Object is new
			pass

	class Delegate
		is fake
		inherits System.Object
		implements System.ICloneable, System.Runtime.Serialization.ISerializable
		get method as System.Reflection.MethodInfo is new
			pass
		get target as Object is new
			pass
		def dynamicInvoke(args as Object[]) as Object is new
			pass
		def equals(obj as Object) as bool is override
			pass
		def getHashCode as int is override
			pass
		def combine(a as Delegate, b as Delegate) as Delegate is shared
			pass
		def combine(delegates as Delegate[]) as Delegate is shared
			pass
		def getInvocationList as Delegate[] is new
			pass
		def remove(source as Delegate, value as Delegate) as Delegate is shared
			pass
		def removeAll(source as Delegate, value as Delegate) as Delegate is shared
			pass
		def clone as Object is new
			pass
		def createDelegate(type as Type, target as Object, method as String) as Delegate is shared
			pass
		def createDelegate(type as Type, target as Object, method as String, ignoreCase as bool) as Delegate is shared
			pass
		def createDelegate(type as Type, target as Object, method as String, ignoreCase as bool, throwOnBindFailure as bool) as Delegate is shared
			pass
		def createDelegate(type as Type, target as Type, method as String) as Delegate is shared
			pass
		def createDelegate(type as Type, target as Type, method as String, ignoreCase as bool) as Delegate is shared
			pass
		def createDelegate(type as Type, target as Type, method as String, ignoreCase as bool, throwOnBindFailure as bool) as Delegate is shared
			pass
		def createDelegate(type as Type, method as System.Reflection.MethodInfo) as Delegate is shared
			pass
		def createDelegate(type as Type, method as System.Reflection.MethodInfo, throwOnBindFailure as bool) as Delegate is shared
			pass
		def createDelegate(type as Type, firstArgument as Object, method as System.Reflection.MethodInfo) as Delegate is shared
			pass
		def createDelegate(type as Type, firstArgument as Object, method as System.Reflection.MethodInfo, throwOnBindFailure as bool) as Delegate is shared
			pass
		def op_Equality(d1 as Delegate, d2 as Delegate) as bool is shared
			pass
		def op_Inequality(d1 as Delegate, d2 as Delegate) as bool is shared
			pass
		def getObjectData(info as System.Runtime.Serialization.SerializationInfo, context as System.Runtime.Serialization.StreamingContext) is new
			pass

	class MulticastDelegate
		is fake
		inherits System.Delegate
		implements System.ICloneable, System.Runtime.Serialization.ISerializable
		def getObjectData(info as System.Runtime.Serialization.SerializationInfo, context as System.Runtime.Serialization.StreamingContext) is override
			pass
		def equals(obj as Object) as bool is override
			pass
		def getInvocationList as Delegate[] is override
			pass
		def op_Equality(d1 as MulticastDelegate, d2 as MulticastDelegate) as bool is shared
			pass
		def op_Inequality(d1 as MulticastDelegate, d2 as MulticastDelegate) as bool is shared
			pass
		def getHashCode as int is override
			pass

	class Attribute
		is fake
		inherits System.Object
		implements
		get typeId as Object is new
			pass
		def equals(obj as Object) as bool is override
			pass
		def getHashCode as int is override
			pass
		def match(obj as Object) as bool is new
			pass
		def isDefaultAttribute as bool is new
			pass
		def getCustomAttributes(element as System.Reflection.MemberInfo, type as Type) as Attribute[] is shared
			pass
		def getCustomAttributes(element as System.Reflection.MemberInfo, type as Type, inherit as bool) as Attribute[] is shared
			pass
		def getCustomAttributes(element as System.Reflection.MemberInfo) as Attribute[] is shared
			pass
		def getCustomAttributes(element as System.Reflection.MemberInfo, inherit as bool) as Attribute[] is shared
			pass
		def isDefined(element as System.Reflection.MemberInfo, attributeType as Type) as bool is shared
			pass
		def isDefined(element as System.Reflection.MemberInfo, attributeType as Type, inherit as bool) as bool is shared
			pass
		def getCustomAttribute(element as System.Reflection.MemberInfo, attributeType as Type) as Attribute is shared
			pass
		def getCustomAttribute(element as System.Reflection.MemberInfo, attributeType as Type, inherit as bool) as Attribute is shared
			pass
		def getCustomAttributes(element as System.Reflection.ParameterInfo) as Attribute[] is shared
			pass
		def getCustomAttributes(element as System.Reflection.ParameterInfo, attributeType as Type) as Attribute[] is shared
			pass
		def getCustomAttributes(element as System.Reflection.ParameterInfo, attributeType as Type, inherit as bool) as Attribute[] is shared
			pass
		def getCustomAttributes(element as System.Reflection.ParameterInfo, inherit as bool) as Attribute[] is shared
			pass
		def isDefined(element as System.Reflection.ParameterInfo, attributeType as Type) as bool is shared
			pass
		def isDefined(element as System.Reflection.ParameterInfo, attributeType as Type, inherit as bool) as bool is shared
			pass
		def getCustomAttribute(element as System.Reflection.ParameterInfo, attributeType as Type) as Attribute is shared
			pass
		def getCustomAttribute(element as System.Reflection.ParameterInfo, attributeType as Type, inherit as bool) as Attribute is shared
			pass
		def getCustomAttributes(element as System.Reflection.Module, attributeType as Type) as Attribute[] is shared
			pass
		def getCustomAttributes(element as System.Reflection.Module) as Attribute[] is shared
			pass
		def getCustomAttributes(element as System.Reflection.Module, inherit as bool) as Attribute[] is shared
			pass
		def getCustomAttributes(element as System.Reflection.Module, attributeType as Type, inherit as bool) as Attribute[] is shared
			pass
		def isDefined(element as System.Reflection.Module, attributeType as Type) as bool is shared
			pass
		def isDefined(element as System.Reflection.Module, attributeType as Type, inherit as bool) as bool is shared
			pass
		def getCustomAttribute(element as System.Reflection.Module, attributeType as Type) as Attribute is shared
			pass
		def getCustomAttribute(element as System.Reflection.Module, attributeType as Type, inherit as bool) as Attribute is shared
			pass
		def getCustomAttributes(element as System.Reflection.Assembly, attributeType as Type) as Attribute[] is shared
			pass
		def getCustomAttributes(element as System.Reflection.Assembly, attributeType as Type, inherit as bool) as Attribute[] is shared
			pass
		def getCustomAttributes(element as System.Reflection.Assembly) as Attribute[] is shared
			pass
		def getCustomAttributes(element as System.Reflection.Assembly, inherit as bool) as Attribute[] is shared
			pass
		def isDefined(element as System.Reflection.Assembly, attributeType as Type) as bool is shared
			pass
		def isDefined(element as System.Reflection.Assembly, attributeType as Type, inherit as bool) as bool is shared
			pass
		def getCustomAttribute(element as System.Reflection.Assembly, attributeType as Type) as Attribute is shared
			pass
		def getCustomAttribute(element as System.Reflection.Assembly, attributeType as Type, inherit as bool) as Attribute is shared
			pass

	interface ICloneable
		is fake
		def clone as Object

	interface IComparable
		is fake
		def compareTo(obj as Object) as int

	interface IDisposable
		is fake
		def dispose

	class Uri
		is fake
		inherits System.Object
		implements System.Runtime.Serialization.ISerializable
		def init(uriString as String)
			pass
		def init(uriString as String, dontEscape as bool)
			pass
		def init(baseUri as Uri, relativeUri as String)
			pass
		def init(baseUri as Uri, relativeUri as String, dontEscape as bool)
			pass
		def init(baseUri as Uri, relativeUri as Uri)
			pass
		get absolutePath as String is new
			pass
		get absoluteUri as String is new
			pass
		get authority as String is new
			pass
		get host as String is new
			pass
		get hostNameType as UriHostNameType is new
			pass
		get isDefaultPort as bool is new
			pass
		get isFile as bool is new
			pass
		get isLoopback as bool is new
			pass
		get isUnc as bool is new
			pass
		get localPath as String is new
			pass
		get pathAndQuery as String is new
			pass
		get port as int is new
			pass
		get query as String is new
			pass
		get fragment as String is new
			pass
		get scheme as String is new
			pass
		get originalString as String is new
			pass
		get dnsSafeHost as String is new
			pass
		get isAbsoluteUri as bool is new
			pass
		get segments as String[] is new
			pass
		get userEscaped as bool is new
			pass
		get userInfo as String is new
			pass
		def checkHostName(name as String) as UriHostNameType is shared
			pass
		def checkSchemeName(schemeName as String) as bool is shared
			pass
		def fromHex(digit as char) as int is shared
			pass
		def getHashCode as int is override
			pass
		def toString as String is override
			pass
		def op_Equality(uri1 as Uri, uri2 as Uri) as bool is shared
			pass
		def op_Inequality(uri1 as Uri, uri2 as Uri) as bool is shared
			pass
		def equals(comparand as Object) as bool is override
			pass
		def hexEscape(character as char) as String is shared
			pass
		def isHexDigit(character as char) as bool is shared
			pass
		def isHexEncoding(pattern as String, index as int) as bool is shared
			pass
		def makeRelative(toUri as Uri) as String is new
			pass
		def makeRelativeUri(uri as Uri) as Uri is new
			pass
		def tryCreate(baseUri as Uri, relativeUri as String, rsult as Uri) as bool is shared
			pass
		def tryCreate(baseUri as Uri, relativeUri as Uri, rsult as Uri) as bool is shared
			pass
		def isBaseOf(uri as Uri) as bool is new
			pass
		def isWellFormedOriginalString as bool is new
			pass
		def unescapeDataString(stringToUnescape as String) as String is shared
			pass
		def escapeUriString(stringToEscape as String) as String is shared
			pass
		def escapeDataString(stringToEscape as String) as String is shared
			pass

	enum UriHostNameType
		is fake
		Unknown
		Basic
		Dns
		IPv4
		IPv6

	namespace Collections

		interface ICollection
			is fake
			get count as int
			get syncRoot as Object
			get isSynchronized as bool
			def copyTo(array as Array, index as int)

		interface IComparer
			is fake
			def compare(x as Object, y as Object) as int

		interface IDictionaryEnumerator
			is fake
			get key as Object
			get value as Object
			get entry as DictionaryEntry

		struct DictionaryEntry
			is fake
			def init(key as Object, value as Object)
				pass
			pro key as Object is new
				get
					pass
				set
					pass
			pro value as Object is new
				get
					pass
				set
					pass

		interface IEnumerable
			is fake
			def getEnumerator as IEnumerator

		interface IEnumerator
			is fake
			get current as Object
			def moveNext as bool
			def reset

		interface IList
			is fake
			inherits IEnumerable
			pro [index as int] as Object
			get count as int
			get isReadOnly as bool
			get isFixedSize as bool
			def add(value as Object) as int
			def contains(value as Object) as bool
			def clear
			def indexOf(value as Object) as int
			def insert(index as int, value as Object)
			def remove(value as Object)
			def removeAt(index as int)

		class ArrayList
			is fake
			inherits System.Object
			implements System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
			def init
				pass
			def init(capacity as int)
				pass
			def init(c as ICollection)
				pass
			pro capacity as int is new
				get
					pass
				set
					pass
			get count as int is new
				pass
			get isFixedSize as bool is new
				pass
			get isReadOnly as bool is new
				pass
			get isSynchronized as bool is new
				pass
			get syncRoot as Object is new
				pass
			pro [index as int] as Object
				get
					pass
				set
					pass
			def adapter(list as IList) as ArrayList is shared
				pass
			def add(value as Object) as int is new
				pass
			def addRange(c as ICollection) is new
				pass
			def binarySearch(index as int, count as int, value as Object, comparer as IComparer) as int is new
				pass
			def binarySearch(value as Object) as int is new
				pass
			def binarySearch(value as Object, comparer as IComparer) as int is new
				pass
			def clear is new
				pass
			def clone as Object is new
				pass
			def contains(item as Object) as bool is new
				pass
			def copyTo(array as Array) is new
				pass
			def copyTo(array as Array, arrayIndex as int) is new
				pass
			def copyTo(index as int, array as Array, arrayIndex as int, count as int) is new
				pass
			def fixedSize(list as IList) as IList is shared
				pass
			def fixedSize(list as ArrayList) as ArrayList is shared
				pass
			def getEnumerator as IEnumerator is new
				pass
			def getEnumerator(index as int, count as int) as IEnumerator is new
				pass
			def indexOf(value as Object) as int is new
				pass
			def indexOf(value as Object, startIndex as int) as int is new
				pass
			def indexOf(value as Object, startIndex as int, count as int) as int is new
				pass
			def insert(index as int, value as Object) is new
				pass
			def insertRange(index as int, c as ICollection) is new
				pass
			def lastIndexOf(value as Object) as int is new
				pass
			def lastIndexOf(value as Object, startIndex as int) as int is new
				pass
			def lastIndexOf(value as Object, startIndex as int, count as int) as int is new
				pass
			def readOnly(list as IList) as IList is shared
				pass
			def readOnly(list as ArrayList) as ArrayList is shared
				pass
			def remove(obj as Object) is new
				pass
			def removeAt(index as int) is new
				pass
			def removeRange(index as int, count as int) is new
				pass
			def repeat(value as Object, count as int) as ArrayList is shared
				pass
			def reverse is new
				pass
			def reverse(index as int, count as int) is new
				pass
			def setRange(index as int, c as ICollection) is new
				pass
			def getRange(index as int, count as int) as ArrayList is new
				pass
			def sort is new
				pass
			def sort(comparer as IComparer) is new
				pass
			def sort(index as int, count as int, comparer as IComparer) is new
				pass
			def synchronized(list as IList) as IList is shared
				pass
			def synchronized(list as ArrayList) as ArrayList is shared
				pass
			def toArray as Object[] is new
				pass
			def toArray(type as Type) as Array is new
				pass
			def trimToSize is new
				pass

		class Hashtable
			is fake
			inherits System.Object
			implements System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.ISerializable, System.ICloneable
			def init
				pass
			def init(capacity as int)
				pass
			def init(capacity as int, loadFactor as float)
				pass
			def init(d as IDictionary)
				pass
			def init(d as IDictionary, loadFactor as float)
				pass
			pro [key as Object] as Object
				get
					pass
				set
					pass
			get isReadOnly as bool is new
				pass
			get isFixedSize as bool is new
				pass
			get isSynchronized as bool is new
				pass
			get keys as ICollection is new
				pass
			get values as ICollection is new
				pass
			get syncRoot as Object is new
				pass
			get count as int is new
				pass
			def add(key as Object, value as Object) is new
				pass
			def clear is new
				pass
			def clone as Object is new
				pass
			def contains(key as Object) as bool is new
				pass
			def containsKey(key as Object) as bool is new
				pass
			def containsValue(value as Object) as bool is new
				pass
			def copyTo(array as Array, arrayIndex as int) is new
				pass
			def getEnumerator as IDictionaryEnumerator is new
				pass
			def remove(key as Object) is new
				pass
			def synchronized(table as Hashtable) as Hashtable is shared
				pass
			def getObjectData(info as System.Runtime.Serialization.SerializationInfo, context as System.Runtime.Serialization.StreamingContext) is new
				pass
			def onDeserialization(sender as Object) is new
				pass

		interface IDictionary
			is fake
			pro [key as Object] as Object
			get keys as ICollection
			get values as ICollection
			get isReadOnly as bool
			get isFixedSize as bool
			def contains(key as Object) as bool
			def add(key as Object, value as Object)
			def clear
			def getEnumerator as IDictionaryEnumerator
			def remove(key as Object)

		namespace Specialized

			class NameObjectCollectionBase
				is fake
				inherits System.Object
				implements System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.ISerializable
				get count as int is new
					pass
				def getObjectData(info as System.Runtime.Serialization.SerializationInfo, context as System.Runtime.Serialization.StreamingContext) is new
					pass
				def onDeserialization(sender as Object) is new
					pass
				def getEnumerator as IEnumerator is new
					pass

			class NameValueCollection
				is fake
				inherits System.Collections.Specialized.NameObjectCollectionBase
				implements System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.ISerializable
				def init
					pass
				def init(capacity as int)
					pass
				pro [name as String] as String
					get
						pass
					set
						pass
				get [index as int] as String
					pass
				get allKeys as String[] is new
					pass
				def clear is new
					pass
				def copyTo(dest as Array, index as int) is new
					pass
				def hasKeys as bool is new
					pass
				def add(name as String, value as String) is new
					pass
				def get(name as String) as String is new
					pass
				def getValues(name as String) as String[] is new
					pass
				def set(name as String, value as String) is new
					pass
				def remove(name as String) is new
					pass
				def get(index as int) as String is new
					pass
				def getValues(index as int) as String[] is new
					pass
				def getKey(index as int) as String is new
					pass

		namespace Generic

			interface IEnumerator<of T>
				is fake
				inherits IDisposable, System.Collections.IEnumerator
				get current as T

			interface IEnumerable<of T>
				is fake
				inherits System.Collections.IEnumerable
				def getEnumerator as IEnumerator<of T>

			interface ICollection<of T>
				is fake
				inherits IEnumerable<of T>, System.Collections.IEnumerable
				get count as int
				get isReadOnly as bool
				def add(item as T)
				def clear
				def contains(item as T) as bool
				#def copyTo(arr as T[], arrayIndex as int)
				def remove(item as T) as bool

			interface IList<of T>
				is fake
				inherits ICollection<of T>, IEnumerable<of T>, System.Collections.IList, System.Collections.IEnumerable
				get count as int

			class List<of T>
				is fake
				implements IList<of T>, ICollection<of T>, IEnumerable<of T>, System.Collections.IEnumerable
				pro [index as int] as T
					get
						pass
					set
						pass
				def add(obj as T)
					pass
				def addRange(stuff as passthrough)
					pass
				def contains(item as T) as bool
					pass
				get count as int
					pass
				def getEnumerator as IEnumerator<of T>
					pass
				def getRange(start as int, count as int) as List<of T>
					pass
				def indexOf(item as T) as int
					pass
				def indexOf(item as T, index as int) as int
					pass
				def indexOf(item as T, index as int, count as int) as int
					pass
				def insert(index as int, item as T)
					pass
				def remove(item as T) as bool
					pass
				def removeAt(index as int)
					pass
				def reverse
					pass
				def sort
					pass
				def toArray as List<of T>
					pass
				def copyTo(array as T[], index as int)
					pass

			class Stack<of T>
				is fake
				get count as int
					pass
				def peek as T
					pass
				def pop as T
					pass
				def push(obj as T)
					pass

			class Queue<of T>
				is fake
				get count as int
					pass
				def enqueue(obj as T?)
					pass
				def dequeue as T
					pass

			interface IDictionary<of TKey, TValue>
				is fake
				inherits System.Collections.IEnumerable
				# TODO:  ICollection<KeyValuePair<TKey,TValue>>, IEnumerable<KeyValuePair<TKey,TValue>>,
				get count as int
				pro [key as TKey] as TValue
				get keys as passthrough  # CC: ICollection<of TKey>
				get values as passthrough  # CC: ICollection<of TValue>

				def add(key as TKey, value as TValue)
				def containsKey(key as TKey) as bool
				def remove(key as TKey) as bool
				# def tryGetValue(key as TKey, value as out TValue) as bool

			class Dictionary<of TKey, TValue>
				is fake
				implements IDictionary<of TKey, TValue>
				def clear
					pass
				get count as int
					pass
				pro [key as TKey] as TValue
					get
						pass
					set
						pass
				get keys as passthrough # CC: ICollection<of TKey>
					pass
				get values as passthrough # CC: ICollection<of TValue>
					pass
				def add(key as TKey, value as TValue)
					pass
				def containsKey(key as TKey) as bool
					pass
				def remove(key as TKey) as bool
					pass
				# def tryGetValue(key as TKey, value as out TValue) as bool


	namespace IO

		class Stream
			is fake
			inherits System.MarshalByRefObject
			implements System.IDisposable
			get canRead as bool is new
				pass
			get canSeek as bool is new
				pass
			get canTimeout as bool is new
				pass
			get canWrite as bool is new
				pass
			get length as int is new
				pass
			pro position as int is new
				get
					pass
				set
					pass
			pro readTimeout as int is new
				get
					pass
				set
					pass
			pro writeTimeout as int is new
				get
					pass
				set
					pass
			def close is new
				pass
			def dispose is new
				pass
			def flush is new
				pass
			def endRead(asyncResult as IAsyncResult) as int is new
				pass
			def endWrite(asyncResult as IAsyncResult) is new
				pass
			def setLength(value as int) is new
				pass
			def read(buffer as int[], offset as int, count as int) as int is new
				pass
			def readByte as int is new
				pass
			def write(buffer as int[], offset as int, count as int) is new
				pass
			def writeByte(value as int) is new
				pass
			def synchronized(stream as Stream) as Stream is shared
				pass

		class FileStream
			is fake
			inherits System.IO.Stream
			implements System.IDisposable
			def init(path as String, mode as FileMode)
				pass
			def init(path as String, mode as FileMode, access as FileAccess)
				pass
			def init(path as String, mode as FileMode, access as FileAccess, share as FileShare)
				pass
			def init(path as String, mode as FileMode, access as FileAccess, share as FileShare, bufferSize as int, options as FileOptions)
				pass
			def init(path as String, mode as FileMode, access as FileAccess, share as FileShare, bufferSize as int)
				pass
			def init(path as String, mode as FileMode, access as FileAccess, share as FileShare, bufferSize as int, useAsync as bool)
				pass
			def init(handle as int, access as FileAccess)
				pass
			def init(handle as int, access as FileAccess, ownsHandle as bool)
				pass
			def init(handle as int, access as FileAccess, ownsHandle as bool, bufferSize as int)
				pass
			def init(handle as int, access as FileAccess, ownsHandle as bool, bufferSize as int, isAsync as bool)
				pass
			get canRead as bool is override
				pass
			get canWrite as bool is override
				pass
			get canSeek as bool is override
				pass
			get isAsync as bool is new
				pass
			get length as int is override
				pass
			get name as String is new
				pass
			pro position as int is override
				get
					pass
				set
					pass
			get handle as int is new
				pass
			def flush is override
				pass
			def setLength(value as int) is override
				pass
			def read(array as int[], offset as int, count as int) as int is override
				pass
			def write(array as int[], offset as int, count as int) is override
				pass
			def endRead(asyncResult as IAsyncResult) as int is override
				pass
			def readByte as int is override
				pass
			def endWrite(asyncResult as IAsyncResult) is override
				pass
			def writeByte(value as int) is override
				pass
			def lock(position as int, length as int) is new
				pass
			def unlock(position as int, length as int) is new
				pass

		class IOException
			is fake
			inherits System.SystemException
			implements System.Runtime.Serialization.ISerializable
			def init
				pass
			def init(message as String)
				pass
			def init(message as String, hresult as int)
				pass
			def init(message as String, innerException as Exception)
				pass

		class TextReader
			is fake
			inherits System.MarshalByRefObject
			implements System.IDisposable
			def close is new
				pass
			def dispose is new
				pass
			def peek as int is new
				pass
			def read as int is new
				pass
			def read(buffer as char[], index as int, count as int) as int is new
				pass
			def readToEnd as String is new
				pass
			def readBlock(buffer as char[], index as int, count as int) as int is new
				pass
			def readLine as String is new
				pass
			def synchronized(reader as TextReader) as TextReader is shared
				pass

		class MemoryStream
			is fake
			inherits System.IO.Stream
			implements System.IDisposable
			def init
				pass
			def init(capacity as int)
				pass
			def init(buffer as int[])
				pass
			def init(buffer as int[], writable as bool)
				pass
			def init(buffer as int[], index as int, count as int)
				pass
			def init(buffer as int[], index as int, count as int, writable as bool)
				pass
			def init(buffer as int[], index as int, count as int, writable as bool, publiclyVisible as bool)
				pass
			get canRead as bool is override
				pass
			get canSeek as bool is override
				pass
			get canWrite as bool is override
				pass
			pro capacity as int is new
				get
					pass
				set
					pass
			get length as int is override
				pass
			pro position as int is override
				get
					pass
				set
					pass
			def flush is override
				pass
			def getBuffer as int[] is new
				pass
			def read(buffer as int[], offset as int, count as int) as int is override
				pass
			def readByte as int is override
				pass
			def setLength(value as int) is override
				pass
			def toArray as int[] is new
				pass
			def write(buffer as int[], offset as int, count as int) is override
				pass
			def writeByte(value as int) is override
				pass
			def writeTo(stream as Stream) is new
				pass

		class StreamReader
			is fake
			inherits System.IO.TextReader
			implements System.IDisposable
			def init(stream as Stream, encoding as System.Text.Encoding, detectEncodingFromByteOrderMarks as bool, bufferSize as int)
				pass
			def init(stream as Stream)
				pass
			def init(stream as Stream, detectEncodingFromByteOrderMarks as bool)
				pass
			def init(stream as Stream, encoding as System.Text.Encoding)
				pass
			def init(stream as Stream, encoding as System.Text.Encoding, detectEncodingFromByteOrderMarks as bool)
				pass
			def init(path as String)
				pass
			def init(path as String, detectEncodingFromByteOrderMarks as bool)
				pass
			def init(path as String, encoding as System.Text.Encoding)
				pass
			def init(path as String, encoding as System.Text.Encoding, detectEncodingFromByteOrderMarks as bool)
				pass
			def init(path as String, encoding as System.Text.Encoding, detectEncodingFromByteOrderMarks as bool, bufferSize as int)
				pass
			get currentEncoding as System.Text.Encoding is new
				pass
			get baseStream as Stream is new
				pass
			get endOfStream as bool is new
				pass
			def close is override
				pass
			def discardBufferedData is new
				pass
			def peek as int is override
				pass
			def read as int is override
				pass
			def read(buffer as char[], index as int, count as int) as int is override
				pass
			def readToEnd as String is override
				pass
			def readLine as String is override
				pass

		class StringReader
			is fake
			inherits System.IO.TextReader
			implements System.IDisposable
			def init(s as String)
				pass
			def close is override
				pass
			def peek as int is override
				pass
			def read as int is override
				pass
			def read(buffer as char[], index as int, count as int) as int is override
				pass
			def readToEnd as String is override
				pass
			def readLine as String is override
				pass

		class TextWriter
			is fake
			inherits System.MarshalByRefObject
			implements System.IDisposable
			get formatProvider as IFormatProvider is new
				pass
			get encoding as System.Text.Encoding is new
				pass
			pro newLine as String is new
				get
					pass
				set
					pass
			def close is new
				pass
			def dispose is new
				pass
			def flush is new
				pass
			def synchronized(writer as TextWriter) as TextWriter is shared
				pass
			def write(value as char) is new
				pass
			def write(buffer as char[]) is new
				pass
			def write(buffer as char[], index as int, count as int) is new
				pass
			def write(value as bool) is new
				pass
			def write(value as int) is new
				pass
			def write(value as int) is new
				pass
			def write(value as int) is new
				pass
			def write(value as int) is new
				pass
			def write(value as float) is new
				pass
			def write(value as float) is new
				pass
			def write(value as decimal) is new
				pass
			def write(value as String) is new
				pass
			def write(value as Object) is new
				pass
			def write(format as String, arg0 as Object) is new
				pass
			def write(format as String, arg0 as Object, arg1 as Object) is new
				pass
			def write(format as String, arg0 as Object, arg1 as Object, arg2 as Object) is new
				pass
			def write(format as String, arg as Object[]) is new
				pass
			def writeLine is new
				pass
			def writeLine(value as char) is new
				pass
			def writeLine(buffer as char[]) is new
				pass
			def writeLine(buffer as char[], index as int, count as int) is new
				pass
			def writeLine(value as bool) is new
				pass
			def writeLine(value as int) is new
				pass
			def writeLine(value as int) is new
				pass
			def writeLine(value as int) is new
				pass
			def writeLine(value as int) is new
				pass
			def writeLine(value as float) is new
				pass
			def writeLine(value as float) is new
				pass
			def writeLine(value as decimal) is new
				pass
			def writeLine(value as String) is new
				pass
			def writeLine(value as Object) is new
				pass
			def writeLine(format as String, arg0 as Object) is new
				pass
			def writeLine(format as String, arg0 as Object, arg1 as Object) is new
				pass
			def writeLine(format as String, arg0 as Object, arg1 as Object, arg2 as Object) is new
				pass
			def writeLine(format as String, arg as Object[]) is new
				pass

		class StreamWriter
			is fake
			inherits System.IO.TextWriter
			implements System.IDisposable
			def init(path as String, append as bool, encoding as System.Text.Encoding)
				pass
			def init(stream as Stream)
				pass
			def init(stream as Stream, encoding as System.Text.Encoding)
				pass
			def init(stream as Stream, encoding as System.Text.Encoding, bufferSize as int)
				pass
			def init(path as String)
				pass
			def init(path as String, append as bool)
				pass
			def init(path as String, append as bool, encoding as System.Text.Encoding, bufferSize as int)
				pass
			pro autoFlush as bool is new
				get
					pass
				set
					pass
			get baseStream as Stream is new
				pass
			get encoding as System.Text.Encoding is override
				pass
			def close is override
				pass
			def flush is override
				pass
			def write(value as char) is override
				pass
			def write(buffer as char[]) is override
				pass
			def write(buffer as char[], index as int, count as int) is override
				pass
			def write(value as String) is override
				pass

		class StringWriter
			is fake
			inherits System.IO.TextWriter
			implements System.IDisposable
			def init(sb as System.Text.StringBuilder, formatProvider as IFormatProvider)
				pass
			def init
				pass
			def init(formatProvider as IFormatProvider)
				pass
			def init(sb as System.Text.StringBuilder)
				pass
			get encoding as System.Text.Encoding is override
				pass
			def close is override
				pass
			def getStringBuilder as System.Text.StringBuilder is new
				pass
			def write(value as char) is override
				pass
			def write(buffer as char[], index as int, count as int) is override
				pass
			def write(value as String) is override
				pass
			def toString as String is override
				pass

		class File
			is fake
			inherits System.Object

			def delete(path as String) is shared
				pass
			def exists(path as String) as bool is shared
				pass
			def openText(path as String) as StreamReader is shared
				pass
			def createText(path as String) as StreamWriter is shared
				pass
			def appendText(path as String) as StreamWriter is shared
				pass
			def copy(sourceFileName as String, destFileName as String) is shared
				pass
			def copy(sourceFileName as String, destFileName as String, overwrite as bool) is shared
				pass
			def create(path as String) as FileStream is shared
				pass
			def create(path as String, bufferSize as int) as FileStream is shared
				pass
			def create(path as String, bufferSize as int, options as FileOptions) as FileStream is shared
				pass
			def decrypt(path as String) is shared
				pass
			def encrypt(path as String) is shared
				pass
			def open(path as String, mode as FileMode) as FileStream is shared
				pass
			def open(path as String, mode as FileMode, access as FileAccess) as FileStream is shared
				pass
			def open(path as String, mode as FileMode, access as FileAccess, share as FileShare) as FileStream is shared
				pass
			def setCreationTime(path as String, creationTime as DateTime) is shared
				pass
			def setCreationTimeUtc(path as String, creationTimeUtc as DateTime) is shared
				pass
			def getCreationTime(path as String) as DateTime is shared
				pass
			def getCreationTimeUtc(path as String) as DateTime is shared
				pass
			def setLastAccessTime(path as String, lastAccessTime as DateTime) is shared
				pass
			def setLastAccessTimeUtc(path as String, lastAccessTimeUtc as DateTime) is shared
				pass
			def getLastAccessTime(path as String) as DateTime is shared
				pass
			def getLastAccessTimeUtc(path as String) as DateTime is shared
				pass
			def setLastWriteTime(path as String, lastWriteTime as DateTime) is shared
				pass
			def setLastWriteTimeUtc(path as String, lastWriteTimeUtc as DateTime) is shared
				pass
			def getLastWriteTime(path as String) as DateTime is shared
				pass
			def getLastWriteTimeUtc(path as String) as DateTime is shared
				pass
			def getAttributes(path as String) as FileAttributes is shared
				pass
			def setAttributes(path as String, fileAttributes as FileAttributes) is shared
				pass
			def openRead(path as String) as FileStream is shared
				pass
			def openWrite(path as String) as FileStream is shared
				pass
			def readAllText(path as String) as String is shared
				pass
			def readAllText(path as String, encoding as System.Text.Encoding) as String is shared
				pass
			def writeAllText(path as String, contents as String) is shared
				pass
			def writeAllText(path as String, contents as String, encoding as System.Text.Encoding) is shared
				pass
			def readAllBytes(path as String) as int[] is shared
				pass
			def writeAllBytes(path as String, bytes as int[]) is shared
				pass
			def readAllLines(path as String) as String[] is shared
				pass
			def readAllLines(path as String, encoding as System.Text.Encoding) as String[] is shared
				pass
			def writeAllLines(path as String, contents as String[]) is shared
				pass
			def writeAllLines(path as String, contents as String[], encoding as System.Text.Encoding) is shared
				pass
			def appendAllText(path as String, contents as String) is shared
				pass
			def appendAllText(path as String, contents as String, encoding as System.Text.Encoding) is shared
				pass
			def move(sourceFileName as String, destFileName as String) is shared
				pass
			def replace(sourceFileName as String, destinationFileName as String, destinationBackupFileName as String) is shared
				pass
			def replace(sourceFileName as String, destinationFileName as String, destinationBackupFileName as String, ignoreMetadataErrors as bool) is shared
				pass

		class Path
			is fake
			inherits System.Object

			get directorySeparatorChar as char is shared
				pass
			get pathSeparator as char is shared
				pass
			def getFullPath(path as String) as String is shared
				pass
			def changeExtension(path as String, extension as String) as String is shared
				pass
			def getDirectoryName(path as String) as String is shared
				pass
			def getInvalidPathChars as char[] is shared
				pass
			def getInvalidFileNameChars as char[] is shared
				pass
			def getExtension(path as String) as String is shared
				pass
			def getFileName(path as String) as String is shared
				pass
			def getFileNameWithoutExtension(path as String) as String is shared
				pass
			def getPathRoot(path as String) as String is shared
				pass
			def getTempPath as String is shared
				pass
			def getRandomFileName as String is shared
				pass
			def getTempFileName as String is shared
				pass
			def hasExtension(path as String) as bool is shared
				pass
			def isPathRooted(path as String) as bool is shared
				pass
			def combine(path1 as String, path2 as String) as String is shared
				pass

		class Directory
			is fake
			inherits System.Object

			def exists(path as String) as bool is shared
				pass
			def getParent(path as String) as DirectoryInfo is shared
				pass
			def createDirectory(path as String) as DirectoryInfo is shared
				pass
			def setCreationTime(path as String, creationTime as DateTime) is shared
				pass
			def setCreationTimeUtc(path as String, creationTimeUtc as DateTime) is shared
				pass
			def getCreationTime(path as String) as DateTime is shared
				pass
			def getCreationTimeUtc(path as String) as DateTime is shared
				pass
			def setLastWriteTime(path as String, lastWriteTime as DateTime) is shared
				pass
			def setLastWriteTimeUtc(path as String, lastWriteTimeUtc as DateTime) is shared
				pass
			def getLastWriteTime(path as String) as DateTime is shared
				pass
			def getLastWriteTimeUtc(path as String) as DateTime is shared
				pass
			def setLastAccessTime(path as String, lastAccessTime as DateTime) is shared
				pass
			def setLastAccessTimeUtc(path as String, lastAccessTimeUtc as DateTime) is shared
				pass
			def getLastAccessTime(path as String) as DateTime is shared
				pass
			def getLastAccessTimeUtc(path as String) as DateTime is shared
				pass
			def getFiles(path as String) as String[] is shared
				pass
			def getFiles(path as String, searchPattern as String) as String[] is shared
				pass
			def getFiles(path as String, searchPattern as String, searchOption as SearchOption) as String[] is shared
				pass
			def getDirectories(path as String) as String[] is shared
				pass
			def getDirectories(path as String, searchPattern as String) as String[] is shared
				pass
			def getDirectories(path as String, searchPattern as String, searchOption as SearchOption) as String[] is shared
				pass
			def getFileSystemEntries(path as String) as String[] is shared
				pass
			def getFileSystemEntries(path as String, searchPattern as String) as String[] is shared
				pass
			def getLogicalDrives as String[] is shared
				pass
			def getDirectoryRoot(path as String) as String is shared
				pass
			def getCurrentDirectory as String is shared
				pass
			def setCurrentDirectory(path as String) is shared
				pass
			def move(sourceDirName as String, destDirName as String) is shared
				pass
			def delete(path as String) is shared
				pass
			def delete(path as String, recursive as bool) is shared
				pass

		class FileSystemInfo
			is fake
			inherits System.MarshalByRefObject
			implements System.Runtime.Serialization.ISerializable
			get fullName as String is new
				pass
			get extension as String is new
				pass
			get name as String is new
				pass
			get exists as bool is new
				pass
			pro creationTime as DateTime is new
				get
					pass
				set
					pass
			pro creationTimeUtc as DateTime is new
				get
					pass
				set
					pass
			pro lastAccessTime as DateTime is new
				get
					pass
				set
					pass
			pro lastAccessTimeUtc as DateTime is new
				get
					pass
				set
					pass
			pro lastWriteTime as DateTime is new
				get
					pass
				set
					pass
			pro lastWriteTimeUtc as DateTime is new
				get
					pass
				set
					pass
			pro attributes as FileAttributes is new
				get
					pass
				set
					pass
			def delete is new
				pass
			def refresh is new
				pass
			def getObjectData(info as System.Runtime.Serialization.SerializationInfo, context as System.Runtime.Serialization.StreamingContext) is new
				pass

		class FileInfo
			is fake
			inherits System.IO.FileSystemInfo
			implements System.Runtime.Serialization.ISerializable
			def init(fileName as String)
				pass
			get name as String is override
				pass
			get length as int is new
				pass
			get directoryName as String is new
				pass
			get directory as DirectoryInfo is new
				pass
			pro isReadOnly as bool is new
				get
					pass
				set
					pass
			get exists as bool is override
				pass
			def openText as StreamReader is new
				pass
			def createText as StreamWriter is new
				pass
			def appendText as StreamWriter is new
				pass
			def copyTo(destFileName as String) as FileInfo is new
				pass
			def copyTo(destFileName as String, overwrite as bool) as FileInfo is new
				pass
			def create as FileStream is new
				pass
			def delete is override
				pass
			def decrypt is new
				pass
			def encrypt is new
				pass
			def open(mode as FileMode) as FileStream is new
				pass
			def open(mode as FileMode, access as FileAccess) as FileStream is new
				pass
			def open(mode as FileMode, access as FileAccess, share as FileShare) as FileStream is new
				pass
			def openRead as FileStream is new
				pass
			def openWrite as FileStream is new
				pass
			def moveTo(destFileName as String) is new
				pass
			def replace(destinationFileName as String, destinationBackupFileName as String) as FileInfo is new
				pass
			def replace(destinationFileName as String, destinationBackupFileName as String, ignoreMetadataErrors as bool) as FileInfo is new
				pass
			def toString as String is override
				pass

		class DirectoryInfo
			is fake
			inherits System.IO.FileSystemInfo
			implements System.Runtime.Serialization.ISerializable
			def init(path as String)
				pass
			get name as String is override
				pass
			get parent as DirectoryInfo is new
				pass
			get exists as bool is override
				pass
			get root as DirectoryInfo is new
				pass
			def createSubdirectory(path as String) as DirectoryInfo is new
				pass
			def create is new
				pass
			def getFiles(searchPattern as String) as FileInfo[] is new
				pass
			def getFiles(searchPattern as String, searchOption as SearchOption) as FileInfo[] is new
				pass
			def getFiles as FileInfo[] is new
				pass
			def getDirectories as DirectoryInfo[] is new
				pass
			def getFileSystemInfos(searchPattern as String) as FileSystemInfo[] is new
				pass
			def getFileSystemInfos as FileSystemInfo[] is new
				pass
			def getDirectories(searchPattern as String) as DirectoryInfo[] is new
				pass
			def getDirectories(searchPattern as String, searchOption as SearchOption) as DirectoryInfo[] is new
				pass
			def moveTo(destDirName as String) is new
				pass
			def delete is override
				pass
			def delete(recursive as bool) is new
				pass
			def toString as String is override
				pass

		enum FileOptions
			is fake
			None
			Encrypted
			DeleteOnClose
			SequentialScan
			RandomAccess
			Asynchronous
			WriteThrough

		enum FileMode
			is fake
			CreateNew
			Create
			Open
			OpenOrCreate
			Truncate
			Append

		enum FileAttributes
			is fake
			ReadOnly
			Hidden
			System
			Directory
			Archive
			Device
			Normal
			Temporary
			SparseFile
			ReparsePoint
			Compressed
			Offline
			NotContentIndexed
			Encrypted

		enum SearchOption
			is fake
			TopDirectoryOnly
			AllDirectories

		enum FileAccess
			is fake
			Read
			Write
			ReadWrite

		enum FileShare
			is fake
			None
			Read
			Write
			ReadWrite
			Delete
			Inheritable


	namespace Text

		enum NormalizationForm
			is fake
			FormC
			FormD
			FormKC
			FormKD

		class StringBuilder
			is fake
			inherits System.Object
			implements System.Runtime.Serialization.ISerializable
			def init
				pass
			def init(capacity as int)
				pass
			def init(value as String)
				pass
			def init(value as String, capacity as int)
				pass
			def init(value as String, startIndex as int, length as int, capacity as int)
				pass
			def init(capacity as int, maxCapacity as int)
				pass
			pro capacity as int is new
				get
					pass
				set
					pass
			get maxCapacity as int is new
				pass
			pro length as int is new
				get
					pass
				set
					pass
			pro chars as char is new
				get
					pass
				set
					pass
			def replace(oldValue as String, newValue as String, startIndex as int, count as int) as StringBuilder is new
				pass
			def ensureCapacity(capacity as int) as int is new
				pass
			def toString as String is override
				pass
			def toString(startIndex as int, length as int) as String is new
				pass
			def append(value as char, repeatCount as int) as StringBuilder is new
				pass
			def append(value as char[], startIndex as int, charCount as int) as StringBuilder is new
				pass
			def append(value as String) as StringBuilder is new
				pass
			def append(value as String, startIndex as int, count as int) as StringBuilder is new
				pass
			def appendLine as StringBuilder is new
				pass
			def appendLine(value as String) as StringBuilder is new
				pass
			def copyTo(sourceIndex as int, destination as char[], destinationIndex as int, count as int) is new
				pass
			def insert(index as int, value as String, count as int) as StringBuilder is new
				pass
			def remove(startIndex as int, length as int) as StringBuilder is new
				pass
			def append(value as bool) as StringBuilder is new
				pass
			def append(value as int) as StringBuilder is new
				pass
			def append(value as int) as StringBuilder is new
				pass
			def append(value as char) as StringBuilder is new
				pass
			def append(value as int) as StringBuilder is new
				pass
			def append(value as int) as StringBuilder is new
				pass
			def append(value as int) as StringBuilder is new
				pass
			def append(value as float) as StringBuilder is new
				pass
			def append(value as float) as StringBuilder is new
				pass
			def append(value as decimal) as StringBuilder is new
				pass
			def append(value as int) as StringBuilder is new
				pass
			def append(value as int) as StringBuilder is new
				pass
			def append(value as int) as StringBuilder is new
				pass
			def append(value as Object) as StringBuilder is new
				pass
			def append(value as char[]) as StringBuilder is new
				pass
			def insert(index as int, value as String) as StringBuilder is new
				pass
			def insert(index as int, value as bool) as StringBuilder is new
				pass
			def insert(index as int, value as int) as StringBuilder is new
				pass
			def insert(index as int, value as int) as StringBuilder is new
				pass
			def insert(index as int, value as int) as StringBuilder is new
				pass
			def insert(index as int, value as char) as StringBuilder is new
				pass
			def insert(index as int, value as char[]) as StringBuilder is new
				pass
			def insert(index as int, value as char[], startIndex as int, charCount as int) as StringBuilder is new
				pass
			def insert(index as int, value as int) as StringBuilder is new
				pass
			def insert(index as int, value as int) as StringBuilder is new
				pass
			def insert(index as int, value as float) as StringBuilder is new
				pass
			def insert(index as int, value as float) as StringBuilder is new
				pass
			def insert(index as int, value as decimal) as StringBuilder is new
				pass
			def insert(index as int, value as int) as StringBuilder is new
				pass
			def insert(index as int, value as int) as StringBuilder is new
				pass
			def insert(index as int, value as int) as StringBuilder is new
				pass
			def insert(index as int, value as Object) as StringBuilder is new
				pass
			def appendFormat(format as String, arg0 as Object) as StringBuilder is new
				pass
			def appendFormat(format as String, arg0 as Object, arg1 as Object) as StringBuilder is new
				pass
			def appendFormat(format as String, arg0 as Object, arg1 as Object, arg2 as Object) as StringBuilder is new
				pass
			def appendFormat(format as String, args as Object[]) as StringBuilder is new
				pass
			def appendFormat(provider as IFormatProvider, format as String, args as Object[]) as StringBuilder is new
				pass
			def replace(oldValue as String, newValue as String) as StringBuilder is new
				pass
			def equals(sb as StringBuilder) as bool is new
				pass
			def replace(oldChar as char, newChar as char) as StringBuilder is new
				pass
			def replace(oldChar as char, newChar as char, startIndex as int, count as int) as StringBuilder is new
				pass

		class Encoding
			is fake
			inherits System.Object
			implements System.ICloneable
			get bodyName as String is new
				pass
			get encodingName as String is new
				pass
			get headerName as String is new
				pass
			get webName as String is new
				pass
			get windowsCodePage as int is new
				pass
			get isBrowserDisplay as bool is new
				pass
			get isBrowserSave as bool is new
				pass
			get isMailNewsDisplay as bool is new
				pass
			get isMailNewsSave as bool is new
				pass
			get isSingleByte as bool is new
				pass
			pro encoderFallback as EncoderFallback is new
				get
					pass
				set
					pass
			pro decoderFallback as DecoderFallback is new
				get
					pass
				set
					pass
			get isReadOnly as bool is new
				pass
			get aSCII as Encoding is shared
				pass
			get codePage as int is new
				pass
			get default as Encoding is shared
				pass
			get unicode as Encoding is shared
				pass
			get bigEndianUnicode as Encoding is shared
				pass
			get uTF7 as Encoding is shared
				pass
			get uTF8 as Encoding is shared
				pass
			get uTF32 as Encoding is shared
				pass
			def getEncoding(codepage as int) as Encoding is shared
				pass
			def getEncoding(codepage as int, encoderFallback as EncoderFallback, decoderFallback as DecoderFallback) as Encoding is shared
				pass
			def getEncoding(name as String) as Encoding is shared
				pass
			def getEncoding(name as String, encoderFallback as EncoderFallback, decoderFallback as DecoderFallback) as Encoding is shared
				pass
			def getEncodings as EncodingInfo[] is shared
				pass
			def getPreamble as int[] is new
				pass
			def clone as Object is new
				pass
			def isAlwaysNormalized as bool is new
				pass
			def isAlwaysNormalized(form as NormalizationForm) as bool is new
				pass
			def getDecoder as Decoder is new
				pass
			def getEncoder as Encoder is new
				pass
			def getMaxByteCount(charCount as int) as int is new
				pass
			def getMaxCharCount(byteCount as int) as int is new
				pass
			def getString(bytes as int[]) as String is new
				pass
			def getString(bytes as int[], index as int, count as int) as String is new
				pass
			def equals(value as Object) as bool is override
				pass
			def getHashCode as int is override
				pass

		class EncodingInfo
			is fake
			inherits System.Object

			get codePage as int is new
				pass
			get name as String is new
				pass
			get displayName as String is new
				pass
			def getEncoding as Encoding is new
				pass
			def equals(value as Object) as bool is override
				pass
			def getHashCode as int is override
				pass

		class Encoder
			is fake
			inherits System.Object

			pro fallback as EncoderFallback is new
				get
					pass
				set
					pass
			get fallbackBuffer as EncoderFallbackBuffer is new
				pass
			def reset is new
				pass

		class Decoder
			is fake
			inherits System.Object

			pro fallback as DecoderFallback is new
				get
					pass
				set
					pass
			get fallbackBuffer as DecoderFallbackBuffer is new
				pass
			def reset is new
				pass

		class EncoderFallback
			is fake
			inherits System.Object

			get replacementFallback as EncoderFallback is shared
				pass
			get exceptionFallback as EncoderFallback is shared
				pass
			get maxCharCount as int is new
				pass
			def createFallbackBuffer as EncoderFallbackBuffer is new
				pass

		class DecoderFallback
			is fake
			inherits System.Object

			get replacementFallback as DecoderFallback is shared
				pass
			get exceptionFallback as DecoderFallback is shared
				pass
			get maxCharCount as int is new
				pass
			def createFallbackBuffer as DecoderFallbackBuffer is new
				pass

		class DecoderFallbackBuffer
			is fake
			inherits System.Object

			get remaining as int is new
				pass
			def fallback(bytesUnknown as int[], index as int) as bool is new
				pass
			def getNextChar as char is new
				pass
			def movePrevious as bool is new
				pass
			def reset is new
				pass

		class EncoderFallbackBuffer
			is fake
			inherits System.Object

			get remaining as int is new
				pass
			def fallback(charUnknown as char, index as int) as bool is new
				pass
			def fallback(charUnknownHigh as char, charUnknownLow as char, index as int) as bool is new
				pass
			def getNextChar as char is new
				pass
			def movePrevious as bool is new
				pass
			def reset is new
				pass

		namespace RegularExpressions

			class Regex
				is fake
				inherits System.Object
				implements System.Runtime.Serialization.ISerializable
				def init(pattern as String)
					pass
				def init(pattern as String, options as RegexOptions)
					pass
				pro cacheSize as int is shared
					get
						pass
					set
						pass
				get options as RegexOptions is new
					pass
				get rightToLeft as bool is new
					pass
				def escape(str as String) as String is shared
					pass
				def unescape(str as String) as String is shared
					pass
				def toString as String is override
					pass
				def getGroupNames as String[] is new
					pass
				def getGroupNumbers as int[] is new
					pass
				def groupNameFromNumber(i as int) as String is new
					pass
				def groupNumberFromName(name as String) as int is new
					pass
				def isMatch(input as String, pattern as String) as bool is shared
					pass
				def isMatch(input as String, pattern as String, options as RegexOptions) as bool is shared
					pass
				def isMatch(input as String) as bool is new
					pass
				def isMatch(input as String, startat as int) as bool is new
					pass
				def match(input as String, pattern as String) as Match is shared
					pass
				def match(input as String, pattern as String, options as RegexOptions) as Match is shared
					pass
				def match(input as String) as Match is new
					pass
				def match(input as String, startat as int) as Match is new
					pass
				def match(input as String, beginning as int, length as int) as Match is new
					pass
				def matches(input as String, pattern as String) as MatchCollection is shared
					pass
				def matches(input as String, pattern as String, options as RegexOptions) as MatchCollection is shared
					pass
				def matches(input as String) as MatchCollection is new
					pass
				def matches(input as String, startat as int) as MatchCollection is new
					pass
				def replace(input as String, pattern as String, replacement as String) as String is shared
					pass
				def replace(input as String, pattern as String, replacement as String, options as RegexOptions) as String is shared
					pass
				def replace(input as String, replacement as String) as String is new
					pass
				def replace(input as String, replacement as String, count as int) as String is new
					pass
				def replace(input as String, replacement as String, count as int, startat as int) as String is new
					pass
				def replace(input as String, pattern as String, evaluator as MatchEvaluator) as String is shared
					pass
				def replace(input as String, pattern as String, evaluator as MatchEvaluator, options as RegexOptions) as String is shared
					pass
				def replace(input as String, evaluator as MatchEvaluator) as String is new
					pass
				def replace(input as String, evaluator as MatchEvaluator, count as int) as String is new
					pass
				def replace(input as String, evaluator as MatchEvaluator, count as int, startat as int) as String is new
					pass
				def split(input as String, pattern as String) as String[] is shared
					pass
				def split(input as String, pattern as String, options as RegexOptions) as String[] is shared
					pass
				def split(input as String) as String[] is new
					pass
				def split(input as String, count as int) as String[] is new
					pass
				def split(input as String, count as int, startat as int) as String[] is new
					pass

			class Match
				is fake
				inherits System.Text.RegularExpressions.Group

				get empty as Match is shared
					pass
				get groups as GroupCollection is new
					pass
				def nextMatch as Match is new
					pass
				def result(replacement as String) as String is new
					pass
				def synchronized(inner as Match) as Match is shared
					pass

			enum RegexOptions
				is fake
				None
				IgnoreCase
				Multiline
				ExplicitCapture
				Compiled
				Singleline
				IgnorePatternWhitespace
				RightToLeft
				ECMAScript
				CultureInvariant

			class GroupCollection
				is fake
				inherits System.Object
				implements System.Collections.ICollection, System.Collections.IEnumerable
				get syncRoot as Object is new
					pass
				get isSynchronized as bool is new
					pass
				get isReadOnly as bool is new
					pass
				get count as int is new
					pass
				get [groupnum as int] as Group
					pass
				get [groupname as String] as Group
					pass
				def copyTo(array as Array, arrayIndex as int) is new
					pass
				def getEnumerator as System.Collections.IEnumerator is new
					pass

			class CaptureCollection
				is fake
				inherits System.Object
				implements System.Collections.ICollection, System.Collections.IEnumerable
				get syncRoot as Object is new
					pass
				get isSynchronized as bool is new
					pass
				get isReadOnly as bool is new
					pass
				get count as int is new
					pass
				get [i as int] as Capture
					pass
				def copyTo(array as Array, arrayIndex as int) is new
					pass
				def getEnumerator as System.Collections.IEnumerator is new
					pass

			class MatchCollection
				is fake
				inherits System.Object
				implements System.Collections.ICollection, System.Collections.IEnumerable
				get count as int is new
					pass
				get syncRoot as Object is new
					pass
				get isSynchronized as bool is new
					pass
				get isReadOnly as bool is new
					pass
				get [i as int] as Match
					pass
				def copyTo(array as Array, arrayIndex as int) is new
					pass
				def getEnumerator as System.Collections.IEnumerator is new
					pass

			class MatchEvaluator
				is fake
				inherits System.MulticastDelegate
				implements System.ICloneable, System.Runtime.Serialization.ISerializable
				def init(object as Object, method as int)
					pass
				def invoke(match as Match) as String is new
					pass
				def endInvoke(rsult as IAsyncResult) as String is new
					pass

			class RegexCompilationInfo
				is fake
				inherits System.Object

				def init(pattern as String, options as RegexOptions, name as String, fullnamespace as String, ispublic as bool)
					pass
				pro pattern as String is new
					get
						pass
					set
						pass
				pro options as RegexOptions is new
					get
						pass
					set
						pass
				pro name as String is new
					get
						pass
					set
						pass
				pro namespace as String is new
					get
						pass
					set
						pass
				pro isPublic as bool is new
					get
						pass
					set
						pass

			class Group
				is fake
				inherits System.Text.RegularExpressions.Capture

				get success as bool is new
					pass
				get captures as CaptureCollection is new
					pass
				def synchronized(inner as Group) as Group is shared
					pass

			class Capture
				is fake
				inherits System.Object

				get index as int is new
					pass
				get length as int is new
					pass
				get value as String is new
					pass
				def toString as String is override
					pass



	namespace Net

		class WebClient
			is fake
			inherits System.ComponentModel.Component
			implements System.ComponentModel.IComponent, System.IDisposable
			def init
				pass
			pro encoding as System.Text.Encoding is new
				get
					pass
				set
					pass
			pro baseAddress as String is new
				get
					pass
				set
					pass
			pro credentials as ICredentials is new
				get
					pass
				set
					pass
			pro useDefaultCredentials as bool is new
				get
					pass
				set
					pass
			pro headers as WebHeaderCollection is new
				get
					pass
				set
					pass
			get responseHeaders as WebHeaderCollection is new
				pass
			get isBusy as bool is new
				pass
			def downloadData(address as String) as int[] is new
				pass
			def downloadData(address as Uri) as int[] is new
				pass
			def downloadFile(address as String, fileName as String) is new
				pass
			def downloadFile(address as Uri, fileName as String) is new
				pass
			def openRead(address as String) as System.IO.Stream is new
				pass
			def openRead(address as Uri) as System.IO.Stream is new
				pass
			def openWrite(address as String) as System.IO.Stream is new
				pass
			def openWrite(address as Uri) as System.IO.Stream is new
				pass
			def openWrite(address as String, method as String) as System.IO.Stream is new
				pass
			def openWrite(address as Uri, method as String) as System.IO.Stream is new
				pass
			def uploadData(address as String, data as int[]) as int[] is new
				pass
			def uploadData(address as Uri, data as int[]) as int[] is new
				pass
			def uploadData(address as String, method as String, data as int[]) as int[] is new
				pass
			def uploadData(address as Uri, method as String, data as int[]) as int[] is new
				pass
			def uploadFile(address as String, fileName as String) as int[] is new
				pass
			def uploadFile(address as Uri, fileName as String) as int[] is new
				pass
			def uploadFile(address as String, method as String, fileName as String) as int[] is new
				pass
			def uploadFile(address as Uri, method as String, fileName as String) as int[] is new
				pass
			def uploadString(address as String, data as String) as String is new
				pass
			def uploadString(address as Uri, data as String) as String is new
				pass
			def uploadString(address as String, method as String, data as String) as String is new
				pass
			def uploadString(address as Uri, method as String, data as String) as String is new
				pass
			def downloadString(address as String) as String is new
				pass
			def downloadString(address as Uri) as String is new
				pass
			def openReadAsync(address as Uri) is new
				pass
			def openReadAsync(address as Uri, userToken as Object) is new
				pass
			def openWriteAsync(address as Uri) is new
				pass
			def openWriteAsync(address as Uri, method as String) is new
				pass
			def openWriteAsync(address as Uri, method as String, userToken as Object) is new
				pass
			def downloadStringAsync(address as Uri) is new
				pass
			def downloadStringAsync(address as Uri, userToken as Object) is new
				pass
			def downloadDataAsync(address as Uri) is new
				pass
			def downloadDataAsync(address as Uri, userToken as Object) is new
				pass
			def downloadFileAsync(address as Uri, fileName as String) is new
				pass
			def downloadFileAsync(address as Uri, fileName as String, userToken as Object) is new
				pass
			def uploadStringAsync(address as Uri, data as String) is new
				pass
			def uploadStringAsync(address as Uri, method as String, data as String) is new
				pass
			def uploadStringAsync(address as Uri, method as String, data as String, userToken as Object) is new
				pass
			def uploadDataAsync(address as Uri, data as int[]) is new
				pass
			def uploadDataAsync(address as Uri, method as String, data as int[]) is new
				pass
			def uploadDataAsync(address as Uri, method as String, data as int[], userToken as Object) is new
				pass
			def uploadFileAsync(address as Uri, fileName as String) is new
				pass
			def uploadFileAsync(address as Uri, method as String, fileName as String) is new
				pass
			def uploadFileAsync(address as Uri, method as String, fileName as String, userToken as Object) is new
				pass
			def cancelAsync is new
				pass

		class WebHeaderCollection
			is fake
			inherits System.Collections.Specialized.NameValueCollection
			implements System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.ISerializable
			def init
				pass
			get count as int is override
				pass
			get allKeys as String[] is override
				pass
			def add(name as String, value as String) is override
				pass
			def add(header as String) is new
				pass
			def set(name as String, value as String) is override
				pass
			def remove(name as String) is override
				pass
			def getValues(header as String) as String[] is override
				pass
			def toString as String is override
				pass
			def toByteArray as int[] is new
				pass
			def isRestricted(headerName as String) as bool is shared
				pass
			def isRestricted(headerName as String, response as bool) as bool is shared
				pass
			def onDeserialization(sender as Object) is override
				pass
			def getObjectData(serializationInfo as System.Runtime.Serialization.SerializationInfo, streamingContext as System.Runtime.Serialization.StreamingContext) is override
				pass
			def get(name as String) as String is override
				pass
			def getEnumerator as System.Collections.IEnumerator is override
				pass
			def get(index as int) as String is override
				pass
			def getValues(index as int) as String[] is override
				pass
			def getKey(index as int) as String is override
				pass
			def clear is override
				pass

		interface ICredentials
			is fake


	namespace Web

		class HttpUtility
			is fake
			inherits System.Object

			def init
				pass
			def htmlDecode(s as String) as String is shared
				pass
			def htmlDecode(s as String, output as System.IO.TextWriter) is shared
				pass
			def htmlEncode(s as String) as String is shared
				pass
			def htmlEncode(s as String, output as System.IO.TextWriter) is shared
				pass
			def htmlAttributeEncode(s as String) as String is shared
				pass
			def htmlAttributeEncode(s as String, output as System.IO.TextWriter) is shared
				pass
			def urlEncode(str as String) as String is shared
				pass
			def urlPathEncode(str as String) as String is shared
				pass
			def urlEncode(str as String, e as System.Text.Encoding) as String is shared
				pass
			def urlEncode(bytes as int[]) as String is shared
				pass
			def urlEncode(bytes as int[], offset as int, count as int) as String is shared
				pass
			def urlEncodeToBytes(str as String) as int[] is shared
				pass
			def urlEncodeToBytes(str as String, e as System.Text.Encoding) as int[] is shared
				pass
			def urlEncodeToBytes(bytes as int[]) as int[] is shared
				pass
			def urlEncodeToBytes(bytes as int[], offset as int, count as int) as int[] is shared
				pass
			def urlEncodeUnicode(str as String) as String is shared
				pass
			def urlEncodeUnicodeToBytes(str as String) as int[] is shared
				pass
			def urlDecode(str as String) as String is shared
				pass
			def urlDecode(str as String, e as System.Text.Encoding) as String is shared
				pass
			def urlDecode(bytes as int[], e as System.Text.Encoding) as String is shared
				pass
			def urlDecode(bytes as int[], offset as int, count as int, e as System.Text.Encoding) as String is shared
				pass
			def urlDecodeToBytes(str as String) as int[] is shared
				pass
			def urlDecodeToBytes(str as String, e as System.Text.Encoding) as int[] is shared
				pass
			def urlDecodeToBytes(bytes as int[]) as int[] is shared
				pass
			def urlDecodeToBytes(bytes as int[], offset as int, count as int) as int[] is shared
				pass


	namespace Runtime

		namespace InteropServices

			enum LayoutKind
				is fake
				Sequential
				Explicit
				Auto

			class StructLayoutAttribute
				is fake
				inherits System.Attribute
				implements
				def init(layoutKind as LayoutKind)
					pass
				def init(layoutKind as int)
					pass
				get value as LayoutKind is new
					pass


		namespace Serialization

			class SerializationInfo
				is fake
				inherits System.Object

				pro fullTypeName as String is new
					get
						pass
					set
						pass
				pro assemblyName as String is new
					get
						pass
					set
						pass
				get memberCount as int is new
					pass
				def setType(type as Type) is new
					pass
				def addValue(name as String, value as Object, type as Type) is new
					pass
				def addValue(name as String, value as Object) is new
					pass
				def addValue(name as String, value as bool) is new
					pass
				def addValue(name as String, value as char) is new
					pass
				def addValue(name as String, value as int) is new
					pass
				def addValue(name as String, value as int) is new
					pass
				def addValue(name as String, value as int) is new
					pass
				def addValue(name as String, value as int) is new
					pass
				def addValue(name as String, value as int) is new
					pass
				def addValue(name as String, value as int) is new
					pass
				def addValue(name as String, value as int) is new
					pass
				def addValue(name as String, value as int) is new
					pass
				def addValue(name as String, value as float) is new
					pass
				def addValue(name as String, value as float) is new
					pass
				def addValue(name as String, value as decimal) is new
					pass
				def addValue(name as String, value as DateTime) is new
					pass
				def getValue(name as String, type as Type) as Object is new
					pass
				def getBoolean(name as String) as bool is new
					pass
				def getChar(name as String) as char is new
					pass
				def getSByte(name as String) as int is new
					pass
				def getByte(name as String) as int is new
					pass
				def getInt16(name as String) as int is new
					pass
				def getUInt16(name as String) as int is new
					pass
				def getInt32(name as String) as int is new
					pass
				def getUInt32(name as String) as int is new
					pass
				def getInt64(name as String) as int is new
					pass
				def getUInt64(name as String) as int is new
					pass
				def getSingle(name as String) as float is new
					pass
				def getDouble(name as String) as float is new
					pass
				def getDecimal(name as String) as decimal is new
					pass
				def getDateTime(name as String) as DateTime is new
					pass
				def getString(name as String) as String is new
					pass

			struct StreamingContext
				is fake
				get context as Object is new
					pass
				def equals(obj as Object) as bool is override
					pass
				def getHashCode as int is override
					pass

			interface ISerializable
				is fake
				def getObjectData(info as SerializationInfo, context as StreamingContext)



	namespace Globalization

		class Calendar
			is fake
			inherits System.Object
			implements System.ICloneable
			get minSupportedDateTime as DateTime is new
				pass
			get maxSupportedDateTime as DateTime is new
				pass
			get algorithmType as CalendarAlgorithmType is new
				pass
			get isReadOnly as bool is new
				pass
			get eras as int[] is new
				pass
			pro twoDigitYearMax as int is new
				get
					pass
				set
					pass
			def clone as Object is new
				pass
			def readOnly(calendar as Calendar) as Calendar is shared
				pass
			def addMilliseconds(time as DateTime, milliseconds as float) as DateTime is new
				pass
			def addDays(time as DateTime, days as int) as DateTime is new
				pass
			def addHours(time as DateTime, hours as int) as DateTime is new
				pass
			def addMinutes(time as DateTime, minutes as int) as DateTime is new
				pass
			def addMonths(time as DateTime, months as int) as DateTime is new
				pass
			def addSeconds(time as DateTime, seconds as int) as DateTime is new
				pass
			def addWeeks(time as DateTime, weeks as int) as DateTime is new
				pass
			def addYears(time as DateTime, years as int) as DateTime is new
				pass
			def getDayOfMonth(time as DateTime) as int is new
				pass
			def getDayOfWeek(time as DateTime) as DayOfWeek is new
				pass
			def getDayOfYear(time as DateTime) as int is new
				pass
			def getDaysInMonth(year as int, month as int) as int is new
				pass
			def getDaysInMonth(year as int, month as int, era as int) as int is new
				pass
			def getDaysInYear(year as int) as int is new
				pass
			def getDaysInYear(year as int, era as int) as int is new
				pass
			def getEra(time as DateTime) as int is new
				pass
			def getHour(time as DateTime) as int is new
				pass
			def getMilliseconds(time as DateTime) as float is new
				pass
			def getMinute(time as DateTime) as int is new
				pass
			def getMonth(time as DateTime) as int is new
				pass
			def getMonthsInYear(year as int) as int is new
				pass
			def getMonthsInYear(year as int, era as int) as int is new
				pass
			def getSecond(time as DateTime) as int is new
				pass
			def getWeekOfYear(time as DateTime, rule as CalendarWeekRule, firstDayOfWeek as DayOfWeek) as int is new
				pass
			def getYear(time as DateTime) as int is new
				pass
			def isLeapDay(year as int, month as int, day as int) as bool is new
				pass
			def isLeapDay(year as int, month as int, day as int, era as int) as bool is new
				pass
			def isLeapMonth(year as int, month as int) as bool is new
				pass
			def isLeapMonth(year as int, month as int, era as int) as bool is new
				pass
			def getLeapMonth(year as int) as int is new
				pass
			def getLeapMonth(year as int, era as int) as int is new
				pass
			def isLeapYear(year as int) as bool is new
				pass
			def isLeapYear(year as int, era as int) as bool is new
				pass
			def toDateTime(year as int, month as int, day as int, hour as int, minute as int, second as int, millisecond as int) as DateTime is new
				pass
			def toDateTime(year as int, month as int, day as int, hour as int, minute as int, second as int, millisecond as int, era as int) as DateTime is new
				pass
			def toFourDigitYear(year as int) as int is new
				pass

		enum CalendarAlgorithmType
			is fake
			Unknown
			SolarCalendar
			LunarCalendar
			LunisolarCalendar

		enum CalendarWeekRule
			is fake
			FirstDay
			FirstFullWeek
			FirstFourDayWeek

		class CompareInfo
			is fake
			inherits System.Object
			implements
			get name as String is new
				pass
			get lCID as int is new
				pass
			def getCompareInfo(culture as int, assembly as System.Reflection.Assembly) as CompareInfo is shared
				pass
			def getCompareInfo(name as String, assembly as System.Reflection.Assembly) as CompareInfo is shared
				pass
			def getCompareInfo(culture as int) as CompareInfo is shared
				pass
			def getCompareInfo(name as String) as CompareInfo is shared
				pass
			def isSortable(ch as char) as bool is shared
				pass
			def isSortable(text as String) as bool is shared
				pass
			def compare(string1 as String, string2 as String) as int is new
				pass
			def compare(string1 as String, string2 as String, options as CompareOptions) as int is new
				pass
			def compare(string1 as String, offset1 as int, length1 as int, string2 as String, offset2 as int, length2 as int) as int is new
				pass
			def compare(string1 as String, offset1 as int, string2 as String, offset2 as int, options as CompareOptions) as int is new
				pass
			def compare(string1 as String, offset1 as int, string2 as String, offset2 as int) as int is new
				pass
			def compare(string1 as String, offset1 as int, length1 as int, string2 as String, offset2 as int, length2 as int, options as CompareOptions) as int is new
				pass
			def isPrefix(source as String, prefix as String, options as CompareOptions) as bool is new
				pass
			def isPrefix(source as String, prefix as String) as bool is new
				pass
			def isSuffix(source as String, suffix as String, options as CompareOptions) as bool is new
				pass
			def isSuffix(source as String, suffix as String) as bool is new
				pass
			def indexOf(source as String, value as char) as int is new
				pass
			def indexOf(source as String, value as String) as int is new
				pass
			def indexOf(source as String, value as char, options as CompareOptions) as int is new
				pass
			def indexOf(source as String, value as String, options as CompareOptions) as int is new
				pass
			def indexOf(source as String, value as char, startIndex as int) as int is new
				pass
			def indexOf(source as String, value as String, startIndex as int) as int is new
				pass
			def indexOf(source as String, value as char, startIndex as int, options as CompareOptions) as int is new
				pass
			def indexOf(source as String, value as String, startIndex as int, options as CompareOptions) as int is new
				pass
			def indexOf(source as String, value as char, startIndex as int, count as int) as int is new
				pass
			def indexOf(source as String, value as String, startIndex as int, count as int) as int is new
				pass
			def indexOf(source as String, value as char, startIndex as int, count as int, options as CompareOptions) as int is new
				pass
			def indexOf(source as String, value as String, startIndex as int, count as int, options as CompareOptions) as int is new
				pass
			def lastIndexOf(source as String, value as char) as int is new
				pass
			def lastIndexOf(source as String, value as String) as int is new
				pass
			def lastIndexOf(source as String, value as char, options as CompareOptions) as int is new
				pass
			def lastIndexOf(source as String, value as String, options as CompareOptions) as int is new
				pass
			def lastIndexOf(source as String, value as char, startIndex as int) as int is new
				pass
			def lastIndexOf(source as String, value as String, startIndex as int) as int is new
				pass
			def lastIndexOf(source as String, value as char, startIndex as int, options as CompareOptions) as int is new
				pass
			def lastIndexOf(source as String, value as String, startIndex as int, options as CompareOptions) as int is new
				pass
			def lastIndexOf(source as String, value as char, startIndex as int, count as int) as int is new
				pass
			def lastIndexOf(source as String, value as String, startIndex as int, count as int) as int is new
				pass
			def lastIndexOf(source as String, value as char, startIndex as int, count as int, options as CompareOptions) as int is new
				pass
			def lastIndexOf(source as String, value as String, startIndex as int, count as int, options as CompareOptions) as int is new
				pass
			def getSortKey(source as String, options as CompareOptions) as SortKey is new
				pass
			def getSortKey(source as String) as SortKey is new
				pass
			def equals(value as Object) as bool is override
				pass
			def getHashCode as int is override
				pass
			def toString as String is override
				pass

		class CultureInfo
			is fake
			inherits System.Object
			implements System.ICloneable, System.IFormatProvider
			def init(name as String)
				pass
			def init(name as String, useUserOverride as bool)
				pass
			def init(culture as int)
				pass
			def init(culture as int, useUserOverride as bool)
				pass
			get currentCulture as CultureInfo is shared
				pass
			get currentUICulture as CultureInfo is shared
				pass
			get installedUICulture as CultureInfo is shared
				pass
			get invariantCulture as CultureInfo is shared
				pass
			get parent as CultureInfo is new
				pass
			get lCID as int is new
				pass
			get keyboardLayoutId as int is new
				pass
			get name as String is new
				pass
			get ietfLanguageTag as String is new
				pass
			get displayName as String is new
				pass
			get nativeName as String is new
				pass
			get englishName as String is new
				pass
			get twoLetterISOLanguageName as String is new
				pass
			get threeLetterISOLanguageName as String is new
				pass
			get threeLetterWindowsLanguageName as String is new
				pass
			get compareInfo as CompareInfo is new
				pass
			get textInfo as TextInfo is new
				pass
			get isNeutralCulture as bool is new
				pass
			get cultureTypes as CultureTypes is new
				pass
			pro numberFormat as NumberFormatInfo is new
				get
					pass
				set
					pass
			pro dateTimeFormat as DateTimeFormatInfo is new
				get
					pass
				set
					pass
			get calendar as Calendar is new
				pass
			get optionalCalendars as Calendar[] is new
				pass
			get useUserOverride as bool is new
				pass
			get isReadOnly as bool is new
				pass
			def createSpecificCulture(name as String) as CultureInfo is shared
				pass
			def getCultures(types as CultureTypes) as CultureInfo[] is shared
				pass
			def equals(value as Object) as bool is override
				pass
			def getHashCode as int is override
				pass
			def toString as String is override
				pass
			def getFormat(formatType as Type) as Object is new
				pass
			def clearCachedData is new
				pass
			def getConsoleFallbackUICulture as CultureInfo is new
				pass
			def clone as Object is new
				pass
			def readOnly(ci as CultureInfo) as CultureInfo is shared
				pass
			def getCultureInfo(culture as int) as CultureInfo is shared
				pass
			def getCultureInfo(name as String) as CultureInfo is shared
				pass
			def getCultureInfo(name as String, altName as String) as CultureInfo is shared
				pass
			def getCultureInfoByIetfLanguageTag(name as String) as CultureInfo is shared
				pass

		enum CompareOptions
			is fake
			None
			IgnoreCase
			IgnoreNonSpace
			IgnoreSymbols
			IgnoreKanaType
			IgnoreWidth
			OrdinalIgnoreCase
			StringSort
			Ordinal

		enum CultureTypes
			is fake
			NeutralCultures
			SpecificCultures
			InstalledWin32Cultures
			AllCultures
			UserCustomCulture
			ReplacementCultures
			WindowsOnlyCultures
			FrameworkCultures

		class DateTimeFormatInfo
			is fake
			inherits System.Object
			implements System.ICloneable, System.IFormatProvider
			def init
				pass
			get invariantInfo as DateTimeFormatInfo is shared
				pass
			get currentInfo as DateTimeFormatInfo is shared
				pass
			pro aMDesignator as String is new
				get
					pass
				set
					pass
			pro calendar as Calendar is new
				get
					pass
				set
					pass
			pro dateSeparator as String is new
				get
					pass
				set
					pass
			pro firstDayOfWeek as DayOfWeek is new
				get
					pass
				set
					pass
			pro calendarWeekRule as CalendarWeekRule is new
				get
					pass
				set
					pass
			pro fullDateTimePattern as String is new
				get
					pass
				set
					pass
			pro longDatePattern as String is new
				get
					pass
				set
					pass
			pro longTimePattern as String is new
				get
					pass
				set
					pass
			pro monthDayPattern as String is new
				get
					pass
				set
					pass
			pro pMDesignator as String is new
				get
					pass
				set
					pass
			get rFC1123Pattern as String is new
				pass
			pro shortDatePattern as String is new
				get
					pass
				set
					pass
			pro shortTimePattern as String is new
				get
					pass
				set
					pass
			get sortableDateTimePattern as String is new
				pass
			pro timeSeparator as String is new
				get
					pass
				set
					pass
			get universalSortableDateTimePattern as String is new
				pass
			pro yearMonthPattern as String is new
				get
					pass
				set
					pass
			pro abbreviatedDayNames as String[] is new
				get
					pass
				set
					pass
			pro shortestDayNames as String[] is new
				get
					pass
				set
					pass
			pro dayNames as String[] is new
				get
					pass
				set
					pass
			pro abbreviatedMonthNames as String[] is new
				get
					pass
				set
					pass
			pro monthNames as String[] is new
				get
					pass
				set
					pass
			get isReadOnly as bool is new
				pass
			get nativeCalendarName as String is new
				pass
			pro abbreviatedMonthGenitiveNames as String[] is new
				get
					pass
				set
					pass
			pro monthGenitiveNames as String[] is new
				get
					pass
				set
					pass
			def getInstance(provider as IFormatProvider) as DateTimeFormatInfo is shared
				pass
			def getFormat(formatType as Type) as Object is new
				pass
			def clone as Object is new
				pass
			def getEra(eraName as String) as int is new
				pass
			def getEraName(era as int) as String is new
				pass
			def getAbbreviatedEraName(era as int) as String is new
				pass
			def getAbbreviatedDayName(dayofweek as DayOfWeek) as String is new
				pass
			def getShortestDayName(dayOfWeek as DayOfWeek) as String is new
				pass
			def getAllDateTimePatterns as String[] is new
				pass
			def getAllDateTimePatterns(format as char) as String[] is new
				pass
			def getDayName(dayofweek as DayOfWeek) as String is new
				pass
			def getAbbreviatedMonthName(month as int) as String is new
				pass
			def getMonthName(month as int) as String is new
				pass
			def readOnly(dtfi as DateTimeFormatInfo) as DateTimeFormatInfo is shared
				pass
			def setAllDateTimePatterns(patterns as String[], format as char) is new
				pass

		enum DateTimeStyles
			is fake
			None
			AllowLeadingWhite
			AllowTrailingWhite
			AllowInnerWhite
			AllowWhiteSpaces
			NoCurrentDateDefault
			AdjustToUniversal
			AssumeLocal
			AssumeUniversal
			RoundtripKind

		enum DigitShapes
			is fake
			Context
			None
			NativeNational

		class NumberFormatInfo
			is fake
			inherits System.Object
			implements System.ICloneable, System.IFormatProvider
			def init
				pass
			get invariantInfo as NumberFormatInfo is shared
				pass
			pro currencyDecimalDigits as int is new
				get
					pass
				set
					pass
			pro currencyDecimalSeparator as String is new
				get
					pass
				set
					pass
			get isReadOnly as bool is new
				pass
			pro currencyGroupSizes as int[] is new
				get
					pass
				set
					pass
			pro numberGroupSizes as int[] is new
				get
					pass
				set
					pass
			pro percentGroupSizes as int[] is new
				get
					pass
				set
					pass
			pro currencyGroupSeparator as String is new
				get
					pass
				set
					pass
			pro currencySymbol as String is new
				get
					pass
				set
					pass
			get currentInfo as NumberFormatInfo is shared
				pass
			pro naNSymbol as String is new
				get
					pass
				set
					pass
			pro currencyNegativePattern as int is new
				get
					pass
				set
					pass
			pro numberNegativePattern as int is new
				get
					pass
				set
					pass
			pro percentPositivePattern as int is new
				get
					pass
				set
					pass
			pro percentNegativePattern as int is new
				get
					pass
				set
					pass
			pro negativeInfinitySymbol as String is new
				get
					pass
				set
					pass
			pro negativeSign as String is new
				get
					pass
				set
					pass
			pro numberDecimalDigits as int is new
				get
					pass
				set
					pass
			pro numberDecimalSeparator as String is new
				get
					pass
				set
					pass
			pro numberGroupSeparator as String is new
				get
					pass
				set
					pass
			pro currencyPositivePattern as int is new
				get
					pass
				set
					pass
			pro positiveInfinitySymbol as String is new
				get
					pass
				set
					pass
			pro positiveSign as String is new
				get
					pass
				set
					pass
			pro percentDecimalDigits as int is new
				get
					pass
				set
					pass
			pro percentDecimalSeparator as String is new
				get
					pass
				set
					pass
			pro percentGroupSeparator as String is new
				get
					pass
				set
					pass
			pro percentSymbol as String is new
				get
					pass
				set
					pass
			pro perMilleSymbol as String is new
				get
					pass
				set
					pass
			pro nativeDigits as String[] is new
				get
					pass
				set
					pass
			pro digitSubstitution as DigitShapes is new
				get
					pass
				set
					pass
			def getInstance(formatProvider as IFormatProvider) as NumberFormatInfo is shared
				pass
			def clone as Object is new
				pass
			def getFormat(formatType as Type) as Object is new
				pass
			def readOnly(nfi as NumberFormatInfo) as NumberFormatInfo is shared
				pass

		class SortKey
			is fake
			inherits System.Object

			get originalString as String is new
				pass
			get keyData as int[] is new
				pass
			def compare(sortkey1 as SortKey, sortkey2 as SortKey) as int is shared
				pass
			def equals(value as Object) as bool is override
				pass
			def getHashCode as int is override
				pass
			def toString as String is override
				pass

		class TextInfo
			is fake
			inherits System.Object
			implements System.ICloneable
			get aNSICodePage as int is new
				pass
			get oEMCodePage as int is new
				pass
			get macCodePage as int is new
				pass
			get eBCDICCodePage as int is new
				pass
			get lCID as int is new
				pass
			get cultureName as String is new
				pass
			get isReadOnly as bool is new
				pass
			pro listSeparator as String is new
				get
					pass
				set
					pass
			get isRightToLeft as bool is new
				pass
			def clone as Object is new
				pass
			def readOnly(textInfo as TextInfo) as TextInfo is shared
				pass
			def toLower(c as char) as char is new
				pass
			def toLower(str as String) as String is new
				pass
			def toUpper(c as char) as char is new
				pass
			def toUpper(str as String) as String is new
				pass
			def equals(obj as Object) as bool is override
				pass
			def getHashCode as int is override
				pass
			def toString as String is override
				pass
			def toTitleCase(str as String) as String is new
				pass


	namespace Reflection

		class Assembly
			is fake
			inherits System.Object
			implements System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable
			get codeBase as String is new
				pass
			get escapedCodeBase as String is new
				pass
			get fullName as String is new
				pass
			get entryPoint as MethodInfo is new
				pass
			get manifestModule as Module is new
				pass
			get reflectionOnly as bool is new
				pass
			get location as String is new
				pass
			get imageRuntimeVersion as String is new
				pass
			get globalAssemblyCache as bool is new
				pass
			get hostContext as int is new
				pass
			def createQualifiedName(assemblyName as String, typeName as String) as String is shared
				pass
			def getType(name as String, throwOnError as bool, ignoreCase as bool) as Type is new
				pass
			def getExportedTypes as Type[] is new
				pass
			def getModule(name as String) as Module is new
				pass
			def getReferencedAssemblies as AssemblyName[] is new
				pass
			def getName as AssemblyName is new
				pass
			def getName(copiedName as bool) as AssemblyName is new
				pass
			def getAssembly(type as Type) as Assembly is shared
				pass
			def getType(name as String) as Type is new
				pass
			def getType(name as String, throwOnError as bool) as Type is new
				pass
			def getTypes as Type[] is new
				pass
			def getManifestResourceStream(type as Type, name as String) as System.IO.Stream is new
				pass
			def getManifestResourceStream(name as String) as System.IO.Stream is new
				pass
			def getSatelliteAssembly(culture as System.Globalization.CultureInfo) as Assembly is new
				pass
			def getSatelliteAssembly(culture as System.Globalization.CultureInfo, version as Version) as Assembly is new
				pass
			def getObjectData(info as System.Runtime.Serialization.SerializationInfo, context as System.Runtime.Serialization.StreamingContext) is new
				pass
			def getCustomAttributes(inherit as bool) as Object[] is new
				pass
			def getCustomAttributes(attributeType as Type, inherit as bool) as Object[] is new
				pass
			def isDefined(attributeType as Type, inherit as bool) as bool is new
				pass
			def loadFrom(assemblyFile as String) as Assembly is shared
				pass
			def reflectionOnlyLoadFrom(assemblyFile as String) as Assembly is shared
				pass
			def load(assemblyString as String) as Assembly is shared
				pass
			def reflectionOnlyLoad(assemblyString as String) as Assembly is shared
				pass
			def load(assemblyRef as AssemblyName) as Assembly is shared
				pass
			def loadWithPartialName(partialName as String) as Assembly is shared
				pass
			def load(rawAssembly as int[]) as Assembly is shared
				pass
			def reflectionOnlyLoad(rawAssembly as int[]) as Assembly is shared
				pass
			def load(rawAssembly as int[], rawSymbolStore as int[]) as Assembly is shared
				pass
			def loadFile(path as String) as Assembly is shared
				pass
			def loadModule(moduleName as String, rawModule as int[]) as Module is new
				pass
			def loadModule(moduleName as String, rawModule as int[], rawSymbolStore as int[]) as Module is new
				pass
			def createInstance(typeName as String) as Object is new
				pass
			def createInstance(typeName as String, ignoreCase as bool) as Object is new
				pass
			def createInstance(typeName as String, ignoreCase as bool, bindingAttr as BindingFlags, binder as Binder, args as Object[], culture as System.Globalization.CultureInfo, activationAttributes as Object[]) as Object is new
				pass
			def getLoadedModules as Module[] is new
				pass
			def getLoadedModules(getResourceModules as bool) as Module[] is new
				pass
			def getModules as Module[] is new
				pass
			def getModules(getResourceModules as bool) as Module[] is new
				pass
			def getFile(name as String) as System.IO.FileStream is new
				pass
			def getFiles as System.IO.FileStream[] is new
				pass
			def getFiles(getResourceModules as bool) as System.IO.FileStream[] is new
				pass
			def getManifestResourceNames as String[] is new
				pass
			def getExecutingAssembly as Assembly is shared
				pass
			def getCallingAssembly as Assembly is shared
				pass
			def getEntryAssembly as Assembly is shared
				pass
			def toString as String is override
				pass

		class AssemblyName
			is fake
			inherits System.Object
			implements System.ICloneable, System.Runtime.Serialization.ISerializable
			def init
				pass
			def init(assemblyName as String)
				pass
			pro name as String is new
				get
					pass
				set
					pass
			pro version as Version is new
				get
					pass
				set
					pass
			pro cultureInfo as System.Globalization.CultureInfo is new
				get
					pass
				set
					pass
			pro codeBase as String is new
				get
					pass
				set
					pass
			get escapedCodeBase as String is new
				pass
			get fullName as String is new
				pass
			def referenceMatchesDefinition(reference as AssemblyName, definition as AssemblyName) as bool is shared
				pass
			def clone as Object is new
				pass
			def getAssemblyName(assemblyFile as String) as AssemblyName is shared
				pass
			def getPublicKey as int[] is new
				pass
			def setPublicKey(publicKey as int[]) is new
				pass
			def getPublicKeyToken as int[] is new
				pass
			def setPublicKeyToken(publicKeyToken as int[]) is new
				pass
			def toString as String is override
				pass
			def getObjectData(info as System.Runtime.Serialization.SerializationInfo, context as System.Runtime.Serialization.StreamingContext) is new
				pass
			def onDeserialization(sender as Object) is new
				pass

		class Binder
			is fake
			inherits System.Object

			def bindToField(bindingAttr as BindingFlags, match as FieldInfo[], value as Object, culture as System.Globalization.CultureInfo) as FieldInfo is new
				pass
			def selectMethod(bindingAttr as BindingFlags, match as MethodBase[], types as Type[], modifiers as ParameterModifier[]) as MethodBase is new
				pass
			def selectProperty(bindingAttr as BindingFlags, match as PropertyInfo[], returnType as Type, indexes as Type[], modifiers as ParameterModifier[]) as PropertyInfo is new
				pass
			def changeType(value as Object, type as Type, culture as System.Globalization.CultureInfo) as Object is new
				pass

		enum BindingFlags
			is fake
			Default
			IgnoreCase
			DeclaredOnly
			Instance
			Static
			Public
			NonPublic
			FlattenHierarchy
			InvokeMethod
			CreateInstance
			GetField
			SetField
			GetProperty
			SetProperty
			PutDispProperty
			PutRefDispProperty
			ExactBinding
			SuppressChangeType
			OptionalParamBinding
			IgnoreReturn

		enum CallingConventions
			is fake
			Standard
			VarArgs
			Any
			HasThis
			ExplicitThis

		class ConstructorInfo
			is fake
			inherits System.Reflection.MethodBase
			implements System.Reflection.ICustomAttributeProvider
			get memberType as MemberTypes is override
				pass
			def invoke(parameters as Object[]) as Object is new
				pass
			def invoke(invokeAttr as BindingFlags, binder as Binder, parameters as Object[], culture as System.Globalization.CultureInfo) as Object is new
				pass

		class EventInfo
			is fake
			inherits System.Reflection.MemberInfo
			implements System.Reflection.ICustomAttributeProvider
			get memberType as MemberTypes is override
				pass
			get eventHandlerType as Type is new
				pass
			get isSpecialName as bool is new
				pass
			get isMulticast as bool is new
				pass
			def getOtherMethods(nonPublic as bool) as MethodInfo[] is new
				pass
			def getAddMethod(nonPublic as bool) as MethodInfo is new
				pass
			def getRemoveMethod(nonPublic as bool) as MethodInfo is new
				pass
			def getRaiseMethod(nonPublic as bool) as MethodInfo is new
				pass
			def getOtherMethods as MethodInfo[] is new
				pass
			def getAddMethod as MethodInfo is new
				pass
			def getRemoveMethod as MethodInfo is new
				pass
			def getRaiseMethod as MethodInfo is new
				pass
			def addEventHandler(target as Object, handler as Delegate) is new
				pass
			def removeEventHandler(target as Object, handler as Delegate) is new
				pass

		enum FieldAttributes
			is fake
			PrivateScope
			Private
			FamANDAssem
			Assembly
			Family
			FamORAssem
			Public
			FieldAccessMask
			Static
			InitOnly
			Literal
			NotSerialized
			HasFieldRVA
			SpecialName
			RTSpecialName
			HasFieldMarshal
			PinvokeImpl
			HasDefault
			ReservedMask

		class FieldInfo
			is fake
			inherits System.Reflection.MemberInfo
			implements System.Reflection.ICustomAttributeProvider
			get memberType as MemberTypes is override
				pass
			get fieldHandle as RuntimeFieldHandle is new
				pass
			get fieldType as Type is new
				pass
			get attributes as FieldAttributes is new
				pass
			get isPublic as bool is new
				pass
			get isPrivate as bool is new
				pass
			get isFamily as bool is new
				pass
			get isAssembly as bool is new
				pass
			get isFamilyAndAssembly as bool is new
				pass
			get isFamilyOrAssembly as bool is new
				pass
			get isStatic as bool is new
				pass
			get isInitOnly as bool is new
				pass
			get isLiteral as bool is new
				pass
			get isNotSerialized as bool is new
				pass
			get isSpecialName as bool is new
				pass
			get isPinvokeImpl as bool is new
				pass
			def getFieldFromHandle(handle as RuntimeFieldHandle) as FieldInfo is shared
				pass
			def getFieldFromHandle(handle as RuntimeFieldHandle, declaringType as RuntimeTypeHandle) as FieldInfo is shared
				pass
			def getRequiredCustomModifiers as Type[] is new
				pass
			def getOptionalCustomModifiers as Type[] is new
				pass
			def setValueDirect(obj as TypedReference, value as Object) is new
				pass
			def getValueDirect(obj as TypedReference) as Object is new
				pass
			def getValue(obj as Object) as Object is new
				pass
			def getRawConstantValue as Object is new
				pass
			def setValue(obj as Object, value as Object, invokeAttr as BindingFlags, binder as Binder, culture as System.Globalization.CultureInfo) is new
				pass
			def setValue(obj as Object, value as Object) is new
				pass

		enum GenericParameterAttributes
			is fake
			None
			Covariant
			Contravariant
			VarianceMask
			ReferenceTypeConstraint
			NotNullableValueTypeConstraint
			DefaultConstructorConstraint
			SpecialConstraintMask

		interface ICustomAttributeProvider
			is fake
			def getCustomAttributes(attributeType as Type, inherit as bool) as Object[]
			def getCustomAttributes(inherit as bool) as Object[]
			def isDefined(attributeType as Type, inherit as bool) as bool

		struct InterfaceMapping
			is fake

		class Module
			is fake
			inherits System.Object
			implements System.Runtime.Serialization.ISerializable, System.Reflection.ICustomAttributeProvider
			get mDStreamVersion as int is new
				pass
			get fullyQualifiedName as String is new
				pass
			get moduleVersionId as Guid is new
				pass
			get metadataToken as int is new
				pass
			get scopeName as String is new
				pass
			get name as String is new
				pass
			get assembly as Assembly is new
				pass
			get moduleHandle as ModuleHandle is new
				pass
			def resolveMethod(metadataToken as int) as MethodBase is new
				pass
			def resolveSignature(metadataToken as int) as int[] is new
				pass
			def resolveMethod(metadataToken as int, genericTypeArguments as Type[], genericMethodArguments as Type[]) as MethodBase is new
				pass
			def resolveField(metadataToken as int) as FieldInfo is new
				pass
			def resolveField(metadataToken as int, genericTypeArguments as Type[], genericMethodArguments as Type[]) as FieldInfo is new
				pass
			def resolveType(metadataToken as int) as Type is new
				pass
			def resolveType(metadataToken as int, genericTypeArguments as Type[], genericMethodArguments as Type[]) as Type is new
				pass
			def resolveMember(metadataToken as int) as MemberInfo is new
				pass
			def resolveMember(metadataToken as int, genericTypeArguments as Type[], genericMethodArguments as Type[]) as MemberInfo is new
				pass
			def resolveString(metadataToken as int) as String is new
				pass
			def getCustomAttributes(inherit as bool) as Object[] is new
				pass
			def getCustomAttributes(attributeType as Type, inherit as bool) as Object[] is new
				pass
			def isDefined(attributeType as Type, inherit as bool) as bool is new
				pass
			def getObjectData(info as System.Runtime.Serialization.SerializationInfo, context as System.Runtime.Serialization.StreamingContext) is new
				pass
			def getType(className as String, ignoreCase as bool) as Type is new
				pass
			def getType(className as String) as Type is new
				pass
			def getType(className as String, throwOnError as bool, ignoreCase as bool) as Type is new
				pass
			def findTypes(filter as TypeFilter, filterCriteria as Object) as Type[] is new
				pass
			def getTypes as Type[] is new
				pass
			def isResource as bool is new
				pass
			def getFields as FieldInfo[] is new
				pass
			def getFields(bindingFlags as BindingFlags) as FieldInfo[] is new
				pass
			def getField(name as String) as FieldInfo is new
				pass
			def getField(name as String, bindingAttr as BindingFlags) as FieldInfo is new
				pass
			def getMethods as MethodInfo[] is new
				pass
			def getMethods(bindingFlags as BindingFlags) as MethodInfo[] is new
				pass
			def getMethod(name as String, bindingAttr as BindingFlags, binder as Binder, callConvention as CallingConventions, types as Type[], modifiers as ParameterModifier[]) as MethodInfo is new
				pass
			def getMethod(name as String, types as Type[]) as MethodInfo is new
				pass
			def getMethod(name as String) as MethodInfo is new
				pass
			def toString as String is override
				pass

		class MemberFilter
			is fake
			inherits System.MulticastDelegate
			implements System.ICloneable, System.Runtime.Serialization.ISerializable
			def init(object as Object, method as int)
				pass
			def invoke(m as MemberInfo, filterCriteria as Object) as bool is new
				pass
			def endInvoke(rsult as IAsyncResult) as bool is new
				pass

		class MemberInfo
			is fake
			inherits System.Object
			implements System.Reflection.ICustomAttributeProvider
			get memberType as MemberTypes is new
				pass
			get name as String is new
				pass
			get declaringType as Type is new
				pass
			get reflectedType as Type is new
				pass
			get metadataToken as int is new
				pass
			get module as Module is new
				pass
			def getCustomAttributes(inherit as bool) as Object[] is new
				pass
			def getCustomAttributes(attributeType as Type, inherit as bool) as Object[] is new
				pass
			def isDefined(attributeType as Type, inherit as bool) as bool is new
				pass

		enum MemberTypes
			is fake
			Constructor
			Event
			Field
			Method
			Property
			TypeInfo
			Custom
			NestedType
			All

		enum MethodAttributes
			is fake
			ReuseSlot
			PrivateScope
			Private
			FamANDAssem
			Assembly
			Family
			FamORAssem
			Public
			MemberAccessMask
			UnmanagedExport
			Static
			Final
			Virtual
			HideBySig
			NewSlot
			VtableLayoutMask
			CheckAccessOnOverride
			Abstract
			SpecialName
			RTSpecialName
			PinvokeImpl
			HasSecurity
			RequireSecObject
			ReservedMask

		class MethodBase
			is fake
			inherits System.Reflection.MemberInfo
			implements System.Reflection.ICustomAttributeProvider
			get methodHandle as RuntimeMethodHandle is new
				pass
			get attributes as MethodAttributes is new
				pass
			get callingConvention as CallingConventions is new
				pass
			get isGenericMethodDefinition as bool is new
				pass
			get containsGenericParameters as bool is new
				pass
			get isGenericMethod as bool is new
				pass
			get isPublic as bool is new
				pass
			get isPrivate as bool is new
				pass
			get isFamily as bool is new
				pass
			get isAssembly as bool is new
				pass
			get isFamilyAndAssembly as bool is new
				pass
			get isFamilyOrAssembly as bool is new
				pass
			get isStatic as bool is new
				pass
			get isFinal as bool is new
				pass
			get isVirtual as bool is new
				pass
			get isHideBySig as bool is new
				pass
			get isAbstract as bool is new
				pass
			get isSpecialName as bool is new
				pass
			get isConstructor as bool is new
				pass
			def getMethodFromHandle(handle as RuntimeMethodHandle) as MethodBase is shared
				pass
			def getMethodFromHandle(handle as RuntimeMethodHandle, declaringType as RuntimeTypeHandle) as MethodBase is shared
				pass
			def getCurrentMethod as MethodBase is shared
				pass
			def getParameters as ParameterInfo[] is new
				pass
			def getMethodImplementationFlags as MethodImplAttributes is new
				pass
			def invoke(obj as Object, invokeAttr as BindingFlags, binder as Binder, parameters as Object[], culture as System.Globalization.CultureInfo) as Object is new
				pass
			def getGenericArguments as Type[] is new
				pass
			def invoke(obj as Object, parameters as Object[]) as Object is new
				pass
			def getMethodBody as MethodBody is new
				pass

		class MethodBody
			is fake
			inherits System.Object

			get localSignatureMetadataToken as int is new
				pass
			get maxStackSize as int is new
				pass
			get initLocals as bool is new
				pass
			def getILAsByteArray as int[] is new
				pass

		enum MethodImplAttributes
			is fake
			Managed
			IL
			Native
			OPTIL
			Runtime
			CodeTypeMask
			Unmanaged
			ManagedMask
			NoInlining
			ForwardRef
			Synchronized
			PreserveSig
			InternalCall
			MaxMethodImplVal

		class MethodInfo
			is fake
			inherits System.Reflection.MethodBase
			implements System.Reflection.ICustomAttributeProvider
			get memberType as MemberTypes is override
				pass
			get returnType as Type is new
				pass
			get returnParameter as ParameterInfo is new
				pass
			get returnTypeCustomAttributes as ICustomAttributeProvider is new
				pass
			get isGenericMethodDefinition as bool is override
				pass
			get containsGenericParameters as bool is override
				pass
			get isGenericMethod as bool is override
				pass
			def getBaseDefinition as MethodInfo is new
				pass
			def getGenericArguments as Type[] is override
				pass
			def getGenericMethodDefinition as MethodInfo is new
				pass
			def makeGenericMethod(typeArguments as Type[]) as MethodInfo is new
				pass

		enum ParameterAttributes
			is fake
			None
			In
			Out
			Lcid
			Retval
			Optional
			HasDefault
			HasFieldMarshal
			Reserved3
			Reserved4
			ReservedMask

		class ParameterInfo
			is fake
			inherits System.Object
			implements System.Reflection.ICustomAttributeProvider
			get parameterType as Type is new
				pass
			get name as String is new
				pass
			get defaultValue as Object is new
				pass
			get rawDefaultValue as Object is new
				pass
			get position as int is new
				pass
			get attributes as ParameterAttributes is new
				pass
			get member as MemberInfo is new
				pass
			get isIn as bool is new
				pass
			get isOut as bool is new
				pass
			get isLcid as bool is new
				pass
			get isRetval as bool is new
				pass
			get isOptional as bool is new
				pass
			get metadataToken as int is new
				pass
			def getRequiredCustomModifiers as Type[] is new
				pass
			def getOptionalCustomModifiers as Type[] is new
				pass
			def toString as String is override
				pass
			def getCustomAttributes(inherit as bool) as Object[] is new
				pass
			def getCustomAttributes(attributeType as Type, inherit as bool) as Object[] is new
				pass
			def isDefined(attributeType as Type, inherit as bool) as bool is new
				pass

		struct ParameterModifier
			is fake
			def init(parameterCount as int)
				pass
			pro [index as int] as bool
				get
					pass
				set
					pass

		enum PropertyAttributes
			is fake
			None
			SpecialName
			RTSpecialName
			HasDefault
			Reserved2
			Reserved3
			Reserved4
			ReservedMask

		class PropertyInfo
			is fake
			inherits System.Reflection.MemberInfo
			implements System.Reflection.ICustomAttributeProvider
			get memberType as MemberTypes is override
				pass
			get propertyType as Type is new
				pass
			get attributes as PropertyAttributes is new
				pass
			get canRead as bool is new
				pass
			get canWrite as bool is new
				pass
			get isSpecialName as bool is new
				pass
			def getConstantValue as Object is new
				pass
			def getRawConstantValue as Object is new
				pass
			def setValue(obj as Object, value as Object, invokeAttr as BindingFlags, binder as Binder, index as Object[], culture as System.Globalization.CultureInfo) is new
				pass
			def getAccessors(nonPublic as bool) as MethodInfo[] is new
				pass
			def getGetMethod(nonPublic as bool) as MethodInfo is new
				pass
			def getSetMethod(nonPublic as bool) as MethodInfo is new
				pass
			def getIndexParameters as ParameterInfo[] is new
				pass
			def getValue(obj as Object, index as Object[]) as Object is new
				pass
			def getValue(obj as Object, invokeAttr as BindingFlags, binder as Binder, index as Object[], culture as System.Globalization.CultureInfo) as Object is new
				pass
			def setValue(obj as Object, value as Object, index as Object[]) is new
				pass
			def getRequiredCustomModifiers as Type[] is new
				pass
			def getOptionalCustomModifiers as Type[] is new
				pass
			def getAccessors as MethodInfo[] is new
				pass
			def getGetMethod as MethodInfo is new
				pass
			def getSetMethod as MethodInfo is new
				pass

		class TargetInvocationException
			is fake
			inherits System.ApplicationException
			implements System.Runtime.Serialization.ISerializable
			def init(inner as Exception)
				pass
			def init(message as String, inner as Exception)
				pass

		enum TypeAttributes
			is fake
			NotPublic
			AutoLayout
			AnsiClass
			Class
			Public
			NestedPublic
			NestedPrivate
			NestedFamily
			NestedAssembly
			NestedFamANDAssem
			NestedFamORAssem
			VisibilityMask
			SequentialLayout
			ExplicitLayout
			LayoutMask
			Interface
			ClassSemanticsMask
			Abstract
			Sealed
			SpecialName
			RTSpecialName
			Import
			Serializable
			UnicodeClass
			AutoClass
			StringFormatMask
			CustomFormatClass
			HasSecurity
			ReservedMask
			BeforeFieldInit
			CustomFormatMask

		class TypeFilter
			is fake
			inherits System.MulticastDelegate
			implements System.ICloneable, System.Runtime.Serialization.ISerializable
			def init(object as Object, method as int)
				pass
			def invoke(m as Type, filterCriteria as Object) as bool is new
				pass
			def endInvoke(rsult as IAsyncResult) as bool is new
				pass


	namespace ComponentModel

		interface IComponent
			is fake

		class Component
			is fake
			inherits System.MarshalByRefObject
			implements System.ComponentModel.IComponent, System.IDisposable
			def init
				pass
			def dispose is new
				pass
			def toString as String is override
				pass


	namespace Diagnostics

		class Process
			is fake
			inherits System.ComponentModel.Component
			implements System.ComponentModel.IComponent, System.IDisposable
			def init
				pass
			get basePriority as int is new
				pass
			get exitCode as int is new
				pass
			get hasExited as bool is new
				pass
			get exitTime as DateTime is new
				pass
			get handle as int is new
				pass
			get handleCount as int is new
				pass
			get id as int is new
				pass
			get machineName as String is new
				pass
			get mainWindowHandle as int is new
				pass
			get mainWindowTitle as String is new
				pass
			pro maxWorkingSet as int is new
				get
					pass
				set
					pass
			pro minWorkingSet as int is new
				get
					pass
				set
					pass
			get nonpagedSystemMemorySize as int is new
				pass
			get nonpagedSystemMemorySize64 as int is new
				pass
			get pagedMemorySize as int is new
				pass
			get pagedMemorySize64 as int is new
				pass
			get pagedSystemMemorySize as int is new
				pass
			get pagedSystemMemorySize64 as int is new
				pass
			get peakPagedMemorySize as int is new
				pass
			get peakPagedMemorySize64 as int is new
				pass
			get peakWorkingSet as int is new
				pass
			get peakWorkingSet64 as int is new
				pass
			get peakVirtualMemorySize as int is new
				pass
			get peakVirtualMemorySize64 as int is new
				pass
			pro priorityBoostEnabled as bool is new
				get
					pass
				set
					pass
			get privateMemorySize as int is new
				pass
			get privateMemorySize64 as int is new
				pass
			get privilegedProcessorTime as TimeSpan is new
				pass
			get processName as String is new
				pass
			pro processorAffinity as int is new
				get
					pass
				set
					pass
			get responding as bool is new
				pass
			get sessionId as int is new
				pass
			pro startInfo as ProcessStartInfo is new
				get
					pass
				set
					pass
			get startTime as DateTime is new
				pass
			get totalProcessorTime as TimeSpan is new
				pass
			get userProcessorTime as TimeSpan is new
				pass
			get virtualMemorySize as int is new
				pass
			get virtualMemorySize64 as int is new
				pass
			pro enableRaisingEvents as bool is new
				get
					pass
				set
					pass
			get standardInput as System.IO.StreamWriter is new
				pass
			get standardOutput as System.IO.StreamReader is new
				pass
			get standardError as System.IO.StreamReader is new
				pass
			get workingSet as int is new
				pass
			get workingSet64 as int is new
				pass
			def closeMainWindow as bool is new
				pass
			def close is new
				pass
			def enterDebugMode is shared
				pass
			def leaveDebugMode is shared
				pass
			def getProcessById(processId as int, machineName as String) as Process is shared
				pass
			def getProcessById(processId as int) as Process is shared
				pass
			def getProcessesByName(processName as String) as Process[] is shared
				pass
			def getProcessesByName(processName as String, machineName as String) as Process[] is shared
				pass
			def getProcesses as Process[] is shared
				pass
			def getProcesses(machineName as String) as Process[] is shared
				pass
			def getCurrentProcess as Process is shared
				pass
			def refresh is new
				pass
			def start as bool is new
				pass
			def start(fileName as String) as Process is shared
				pass
			def start(fileName as String, arguments as String) as Process is shared
				pass
			def start(startInfo as ProcessStartInfo) as Process is shared
				pass
			def kill is new
				pass
			def toString as String is override
				pass
			def waitForExit(milliseconds as int) as bool is new
				pass
			def waitForExit is new
				pass
			def waitForInputIdle(milliseconds as int) as bool is new
				pass
			def waitForInputIdle as bool is new
				pass
			def beginOutputReadLine is new
				pass
			def beginErrorReadLine is new
				pass
			def cancelOutputRead is new
				pass
			def cancelErrorRead is new
				pass

		class ProcessStartInfo
			is fake
			inherits System.Object

			def init
				pass
			def init(fileName as String)
				pass
			def init(fileName as String, arguments as String)
				pass
			pro verb as String is new
				get
					pass
				set
					pass
			pro arguments as String is new
				get
					pass
				set
					pass
			pro createNoWindow as bool is new
				get
					pass
				set
					pass
			pro redirectStandardInput as bool is new
				get
					pass
				set
					pass
			pro redirectStandardOutput as bool is new
				get
					pass
				set
					pass
			pro redirectStandardError as bool is new
				get
					pass
				set
					pass
			pro standardErrorEncoding as System.Text.Encoding is new
				get
					pass
				set
					pass
			pro standardOutputEncoding as System.Text.Encoding is new
				get
					pass
				set
					pass
			pro useShellExecute as bool is new
				get
					pass
				set
					pass
			get verbs as String[] is new
				pass
			pro userName as String is new
				get
					pass
				set
					pass
			pro domain as String is new
				get
					pass
				set
					pass
			pro loadUserProfile as bool is new
				get
					pass
				set
					pass
			pro fileName as String is new
				get
					pass
				set
					pass
			pro workingDirectory as String is new
				get
					pass
				set
					pass
			pro errorDialog as bool is new
				get
					pass
				set
					pass
			pro errorDialogParentHandle as int is new
				get
					pass
				set
					pass


namespace Cobra

	namespace Lang

		use System.Collections.Generic

		interface ICallable
			is fake
			pass

		class AssertException
			is fake
			inherits Exception
			get info as Object?
				pass

		class ExpectException
			is fake
			inherits Exception
			get expectedExceptionType as Type
				pass
			get actualException as Exception
				pass

		class FallThroughException
			is fake
			inherits Exception
			get info as Object
				pass

		class RequireException
			is fake
			inherits AssertException
			pro next as RequireException?
				get
					return nil
				set
					pass

		class EnsureException
			is fake
			inherits AssertException
			pass

		class SliceException
			is fake
			inherits SystemException
			pass

		class CobraCore
			is fake
			shared
				get commandLineArgs as List<of String>
					pass

				get releaseNum as int
					pass

				get version as Version
					pass

				get hasSuperStackTrace as bool
					return true

				def dumpStack
					pass

				def toTechString(obj as Object?) as String
					pass

				def typeName(type as Type) as String
					pass

				pro willCheckInvariant as bool
					get
						pass
					set
						pass

				pro willCheckRequire as bool
					get
						pass
					set
						pass

				pro willCheckEnsure as bool
					get
						pass
					set
						pass

				pro willCheckAssert as bool
					get
						pass
					set
						pass

				pro willCheckNonNilClassVars as bool
					get
						pass
					set
						pass

				set willCheckAll as bool
					pass
