class Property
	inherits ProperDexer

	def construct(token as IToken, box as Box, name as String, isNames as List<of String>, coverVar as ClassVar, coverAccess as String, docString as String)
		base.construct(token, box, name, isNames, docString)
		_coverVar = coverVar
		_coverAccess = coverAccess
		_isNames = isNames
		.defaultToVirtual()

	def construct(token as IToken, box as Box, name as String, returnTypeOrNode as INode, isNames as List<of String>, docString as String)
		base.construct(token, box, name, returnTypeOrNode, isNames, docString)

	get isCallable as bool is override
		return false

	get englishName as String is override
		return 'property'

	def makeGetPart(token as IToken) as OneCodeBlockMember is override
		require .getPart is nil
		ensure .getPart!
		_getPart = PropertyGetter(token, this)
		return _getPart to PropertyGetter  # CC: to ! | CC: shouldn't need because of assignment

	def makeSetPart(token as IToken) as OneCodeBlockMember is override
		require .setPart is nil
		ensure .setPart!
		_setPart = PropertySetter(token, this)
		return _setPart to PropertySetter  # CC: to ! | CC: shouldn't need because of assignment

	def writeSharpDef(sw as SharpWriter) is override
		base.writeSharpDef(sw)
		sw.write('\n')
		.writeSharpIsNames(sw)
		sw.write(' ')
		_returnType.writeSharpRef(sw)
		sw.write(' [Utils.capped(.name)]')
		.writeSharpBody(sw)
		.writeSharpTest(sw)


class PropertyGetter
	inherits ProperDexerXetter

	def construct(token as IToken, prop as Property)
		base.construct(token, prop, List<of String>())  # TODO: take in docString

	get xetPartName as String is override
		return 'get'

	def _bindInt is override
		base._bindInt()
		_returnType = .parent.returnType
		assert _returnType


class PropertySetter
	inherits ProperDexerXetter

	def construct(token as IToken, prop as Property)
		base.construct(token, prop, List<of String>())  # TODO: take in docString

		# make a token for the Param()
		t = token.copy
		t.which = 'ID'
		t.text = 'value'
		t.value = 'value'

		if prop.returnType
			p = Param(t, prop.returnType, true)
		else if prop.returnTypeNode
			p = Param(t, prop.returnTypeNode, true)
		else
			throw FallThroughException(prop)
		_params.add(p)

	get xetPartName as String is override
		return 'set'

	def _bindInt is override
		base._bindInt()
		_returnType = .compiler.voidType
		assert _returnType
