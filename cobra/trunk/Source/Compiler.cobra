

enum ProblemAction
	Exit
	Throw


class Compiler

	var _verbosity as int
	var _whenError as ProblemAction
	var _options as Dictionary<of String, Object>
	var _globalNS as NameSpace
	var _modules as List<of Module>

	def construct(verbosity as int)
		.construct(verbosity, ProblemAction.Exit)

	def construct(verbosity as int, whenError as ProblemAction)
		_verbosity = verbosity
		_modules = List<of Module>()
		_whenError = whenError
		_globalNS = NameSpace(Token.empty, '(global)')

	get modules from var

	pro whenError from var

	pro options from var

	def parseFilesNamed(filenames as List<of String>) as List<of Module>
		"""
		Returns the modules for the newly parsed files.
		Also, extends self.modules with those modules.
		"""
		require
			filenames
		ensure
			true
		code
			if _modules.count == 0
				if false  # TODO
					# python: path = os.path.join(os.path.dirname(__file__), 'SystemInterfaces.cobra')
					path = r'C:\All\echuck\Projects\Cobra\Cobra\Source\SystemInterfaces.cobra'
					assert File.exists(path), path
					filenames.insert(0, path)
			modules = List<of Module>()
			for filename in filenames
				# TODO: support C# code
#				if filename.endsWith('.cs')
#					if _verbosity>1
#						print 'Noting [filename]'
#					modules.add(SharpModule(filename))
#				else
				if 1
					if _verbosity>1
						print 'Parsing [filename]'
					parser = Parser()
					parser.verbosity = _verbosity
					parser.whenError = if(_whenError==ProblemAction.Exit, Parser.WhenErrorEnum.exit, Parser.WhenErrorEnum.throww)
					# TODO: parser.whenWarning = whenWarning
					assert _globalNS
					parser.globalNS = _globalNS
					# @@ TODO: assert _globalNS is parser.nameSpaceStack[0]
					module = parser.parseFileNamed(filename)
					assert module
					modules.add(module)
			assert modules
			_modules.addRange(modules)
			return modules

	def bindInt
		# TODO: bindInt to all existing types
		Node.setCompiler(this)
		try
			for module in _modules
				module.bindInt()
		finally
			Node.setCompiler(nil)

	def bindImp
		# TODO: bindImp to all existing types
		Node.setCompiler(this)
		try
			for module in _modules
				module.bindImp()
		finally
			Node.setCompiler(nil)


	def genCS
		pass

	def compileCS
		pass
