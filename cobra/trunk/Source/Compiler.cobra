use System.Reflection


class StopCompilation
	inherits Exception
	"""
	Thrown by the compiler when it must stop compilation due to errors. This can happen at the end
	of the phases:
		* parsing
		* bind interface
		* bind implementation
		* code gen
	"""

	var _comp as Compiler

	def init(comp as Compiler)
		_comp = comp


class UnexpectedInvocationException
	inherits SystemException
	"""
	Throw this when a class is not expecting a particular method to be invoked at runtime
	(even though it inherits it or must implement it for an interface).
	"""

	def init(obj as Object)
		base.init('Not expecting invocation.')


enum PlatformEnum
	Microsoft
	Novell


class Compiler
	implements ITypeProvider, IWarningRecorder
	"""
	General notes:

	To cope with nesting, the compiler keeps a stack of the three types of things that can be nested. Items are pushed and popped off these stacks during each of the "bind interface" and "bind implementation" phases. The three stacks are:
		* nameSpaceStack - namespaces
		* boxStack - boxes are classes, structs and interfaces
		* codeMemberStack - methods, properties and constructors
	"""

	var _nextSerialNum as int is shared
	var _serialNum as int
	var _verbosity as int
	var _options as Dictionary<of String, Object>
	var _globalNS as NameSpace
	var _modules as List<of Module>
	var _firstUserModuleIndex as int

	var _curModule as Module?  # set during bindInt and bindImp
	var _nameSpaceStack as Stack<of NameSpace>
	var _boxStack as Stack<of Box>
	var _codeMemberStack as Stack<of AbstractMethod>

	var _isBindingInt as bool
	var _isBindingImp as bool

	var _errors as List<of CobraException>
	var _warnings as List<of CobraWarning>
	var _messages as List<of Object>  # all errors and warnings

	def init(verbosity as int)
		_nextSerialNum += 1
		_serialNum = _nextSerialNum
		_verbosity = verbosity
		_modules = List<of Module>()
		_options = Dictionary<of String, Object>()
		_globalNS = NameSpace(Token.empty, '(global)')
		_nameSpaceStack = Stack<of NameSpace>()
		_boxStack = Stack<of Box>()
		_codeMemberStack = Stack<of AbstractMethod>()
		_errors = List<of CobraException>()
		_messages = List<of Object>()
		_warnings = List<of CobraWarning>()
		_exeFileName = ''  # CC: just make _exeFileName a String?, but note that compiler chokes on doing so!

	def toString as String is override
		return '[.getType.name]([_serialNum])'

	get verbosity from var

	get isBindingInt from var

	get isBindingImp from var

	get globalNS from var

	get modules from var

	pro options from var

	get nameSpaceStack from var

	get boxStack from var

	get curBox as Box
		require .boxStack
		return _boxStack.peek to Box  # CC: axe typecast

	get curCodeMember as AbstractMethod
		require .codeMemberStack
		return _codeMemberStack.peek

	get codeMemberStack from var

	get errors from var

	get warnings from var

	get hasSuperStackTraceOption as bool
		# CC: return _options.get('superstacktrace', false) to bool
		if _options.containsKey('superstacktrace')
			return if(_options['superstacktrace'], true, false)
		else
			return false

	def recordError(ce as CobraException)
		"""
		Node call this to record errors.
		"""
		if ce inherits NodeMultiException
			for exc in ce.exceptions
				_addError(exc)
		else
			_addError(ce)

	get cobraExeDir as String
		"""
		Returns the directory where cobra.exe is residing.
		Related resources such as CobraLang.cs reside there.
		"""
		return Path.getDirectoryName(Assembly.getEntryAssembly.location)

	def parseFilesNamed(filenames as List<of String>) as List<of Module>
		"""
		Returns the modules for the newly parsed files.
		Also, extends _modules with those modules.
		"""
		require
			filenames
		ensure
			true
		body
			if _modules.count == 0
				path = Path.combine(.cobraExeDir, 'SystemInterfaces.cobra')
				assert File.exists(path), path
				filenames.insert(0, path)
				path = Path.combine(.cobraExeDir, 'CobraLang.cobra')
				assert File.exists(path), path
				filenames.insert(1, path)
				_firstUserModuleIndex = 2
			modules = List<of Module>()
			for filename in filenames
				if filename.endsWith('.cs')
					if _verbosity>1
						print 'Noting [filename]'
					modules.add(SharpModule(filename, _verbosity))
				else
					if _verbosity>1
						print 'Parsing [filename]'
					parser = Parser()
					parser.verbosity = _verbosity
					parser.typeProvider = this
					parser.warningRecorder = this
					assert _globalNS
					parser.globalNS = _globalNS
					# @@ TODO: assert _globalNS is parser.nameSpaceStack[0]
					try
						module = parser.parseFileNamed(filename)
					catch ce as CobraException
						.recordError(ce)
					success
						assert module
						modules.add(module)
			assert modules
			_modules.addRange(modules)
			if _errors.count
				_exitFromErrors
			return modules


	##
	## ITypeProvider
	##

	var _boolType as BoolType?
	var _charType as CharType?
	var _decimalType as DecimalType?
	var _dynamicType as DynamicType?
	var _floatType as FloatType?
	var _intType as IntType?
	var _nilType as NilType?
	var _numberType as NumberType?
	var _passThroughType as PassThroughType?
	var _typeType as TypeType?
	var _unspecifiedType as UnspecifiedType?
	var _voidType as VoidType?
	var _variTypes as Dictionary<of INode, VariType>?

	def typeForName(name as String) as IType
		assert false, 'TODO'
		return CobraType()

	def typeOrNilForName(name as String) as IType?
		assert false, 'TODO'
		return nil

	get boolType as BoolType
		if _boolType is nil
			_boolType = BoolType()
		return _boolType to BoolType  # CC: to ! | CC: axe to !

	get charType as CharType
		if _charType is nil
			_charType = CharType()
		return _charType to CharType  # CC: to! | CC: axe to !

	get decimalType as DecimalType
		if _decimalType is nil
			_decimalType = DecimalType()
		return _decimalType to DecimalType  # CC: to! | CC: axe to !

	get dynamicType as DynamicType
		if _dynamicType is nil
			_dynamicType = DynamicType()
		return _dynamicType to DynamicType

	get intType as IntType
		if _intType is nil
			_intType = IntType()
		return _intType to IntType  # CC: to! | CC: axe to !

	get floatType as FloatType
		if _floatType is nil
			_floatType = FloatType()
		return _floatType to FloatType  # CC: to! | CC: axe to !

	get nilType as NilType
		if _nilType is nil
			_nilType = NilType()
		return _nilType to NilType  # CC: to! | CC: axe to !

	get numberType as NumberType
		if _numberType is nil
			_numberType = NumberType()
		return _numberType to NumberType  # CC: to! | CC: axe to !

	get passThroughType as PassThroughType
		if _passThroughType is nil
			_passThroughType = PassThroughType()
		return _passThroughType to PassThroughType  # CC: to ! | CC: axe to !

	get typeType as TypeType
		if _typeType is nil
			_typeType = TypeType()
		return _typeType to TypeType  # CC: to ! | CC: axe to !

	get unspecifiedType as UnspecifiedType
		if _unspecifiedType is nil
			_unspecifiedType = UnspecifiedType()
		return _unspecifiedType to UnspecifiedType  # CC: to ! | CC: axe to !

	get voidType as VoidType
		if _voidType is nil
			_voidType = VoidType()
		return _voidType to VoidType  # CC: to ! | CC: axe to !

	def variType(type as IType) as VariType
		if _variTypes is nil
			_variTypes = Dictionary<of INode, VariType>()
		else if _variTypes.containsKey(type)
			return _variTypes[type]
		_variTypes[type] = vt = VariType(type)
		return vt

	def variType(typeNode as INode) as VariType
		if _variTypes is nil
			_variTypes = Dictionary<of INode, VariType>()
		else if _variTypes.containsKey(typeNode)
			return _variTypes[typeNode]
		_variTypes[typeNode] = vt = VariType(typeNode)
		return vt

	## More type stuff

	def nilableType(t as IType) as NilableType
		"""
		Returns a NilableType wrapper for t, unless t is already a NilableType in which case
		it is returned directly.
		"""
		if t inherits NilableType
			return t
		else
			# CC: after supporting "as this" for return types, the following 3 lines can be:
			# return NilableType(t).bindAll
			t = NilableType(t)
			t.bindAll
			return t to NilableType  # CC: axe cast after code flow picks up on assignments

	##
	## Binding
	##

	def bindInt
		# TODO: bindInt to all existing types
		_isBindingInt = true
		try
			Node.setCompiler(this)
			try
				for module in _modules  # CC: make that _curModule and axe following assignment statement
					try
						_curModule = module
						_curModule.bindInt
					catch ce as CobraException
						.recordError(ce)
			finally
				Node.setCompiler(nil)
		finally
			_isBindingInt = false
		if _errors.count
			_exitFromErrors

	def bindImp
		# TODO: bindImp to all existing types
		_isBindingImp = true
		try
			Node.setCompiler(this)
			try
				for module in _modules  # CC: make that _curModule and axe following assignment statement
					try
						_curModule = module
						_curModule.bindImp
					catch ce as CobraException
						.recordError(ce)
			finally
				Node.setCompiler(nil)
		finally
			_isBindingImp = false
		if _errors.count
			_exitFromErrors

	def symbolForName(name as String, canBeMember as bool, haveThis as bool) as IMember?
		"""
		name - obvious.
		canBeMember - the symbol can be a member of the current box
			TODO: can this be retired now that there is findLocal?
		haveThis - if false, symbols like methods, properties, etc. will not be returned while enums, nested classes, etc. could be.
		"""
		require
			name
		body
			assert _curModule

			# TODO: is canBeMember ever false?

			if name[0].toString.toLower==name[0] and name[0]>=c'a' and name[0]<=c'z'  # TODO: cut out first part of expr?
				assert false, 'use findLocal instead. [name]'
				return nil

			boxStack = Stack<of Box>(_boxStack)
			while boxStack.count
				box = boxStack.pop
				x = box.symbolForName(name, canBeMember, haveThis)
				if x
					return x

			nameSpaceStack = Stack<of NameSpace>(_nameSpaceStack)
			while nameSpaceStack.count
				ns = nameSpaceStack.pop
				assert ns.superNameSpace is nil or ns.superNameSpace is not nil
				x = ns.symbolForName(name)
				if x
					return x

			x = _curModule.symbolForName(name)
			if x
				return x

			return _globalNS.symbolForName(name)

	def dumpModulesForTestify(output as IndentedWriter)
		.dumpModulesForTestify(output, 'Modules')

	def dumpModulesForTestify(output as IndentedWriter, title as String)
		print '[title]:'
		output.indent
		try
			for module in _modules
				if module.isCobraLibrary
					continue
				# when going to the new SystemInterfaces.cobra,
				# the following statement:
				# module.writeDeepString(output)
				# produced:
				# Compiler.cobra(391): Cannot find "writeDeepString" in Module.
				# so now:
				$sharp('module.WriteDeepString(output)')
				# but maybe this simply goes away when switching to reading DLLs
		finally
			output.dedent

	def _exitFromErrors
		require _errors
		.printMessages
		throw StopCompilation(this)

	def printMessages
		for obj in _messages
			if obj inherits CobraException
				print obj.message
			else if obj inherits String
				print obj
			else
				throw FallThroughException(obj)

	##
	## Services to nodes
	##

	def canNameBeMember(name as String) as bool
		"""
		Returns true if the given name is the kind of name that can reference a box member without
		using the dot operator. Returns true if the name starts with an underscore or capital
		letter. The underscored names are typically protected data fields or methods while the
		uppercase names would be enums or (in the future) nested boxes.
		"""
		return name.startsWith('_') or Utils.isCapped(name)

	def findLocal(name as String) as AbstractLocalVar?
		"""
		Finds a local parameter or variable in the current code member.
		"""
		require
			.isBindingImp
			.codeMemberStack
		body
			return .codeMemberStack.peek.findLocal(name)

	def libraryType(names as vari String) as IType
		"""
		Used to retrieve types such as System.String.
		Example:
			.compiler.libraryType('System', 'String')
		"""
		ns as IContainer = _globalNS
		thing as IContainer? = nil
		for name in names
			possible = (thing ? ns).declForName(name)
			assert possible, name
			if possible inherits IContainer
				thing = possible
			else
				assert false, [name, possible.getType.name, possible]
		if thing inherits IType
			if thing.name<>names[names.length-1] # TODO: add this as an ensure as well
				print 'names=' stop
				print $sharp(r"CobraCore.ToTechString(names)")
				print 'thing=[thing]'
				assert false
			return thing
		else
			throw FallThroughException('found [name], but it is not an IType. it is [thing]')

	def suggestionFor(name as String) as String?
		require name
		# CC: return _unknownSuggestions.getDefault(name, nil)
		if _unknownSuggestions.containsKey(name)
			return _unknownSuggestions[name]
		else
			return nil

	def warning(node as ISyntaxNode, msg as String)
		require msg
		.warning(CobraWarning(node.token, msg))

	def warning(cw as CobraWarning)
		_warnings.add(cw)
		_messages.add(cw)

	var _unknownSuggestions = {
		# literals
		'null':		'nil',
		'NULL':		'nil',
		'None':		'nil',
		'Nothing':	'nil',
		'True':		'true',
		'False':	'false',

		# special
		'self':		'this',
		'super':	'base',

		# operators (word ones anyway)
		'isa':		'inherits',
		'new':		'SomeClass() or SomeClass(arg1,arg2) without new',

		# constructs
		#'lambda':	'def(args) ...',  # TODO

		# statements
		'do':		'post while <condition>',
		'elif':		'else if',
		'elseif':	'else if',
		'foreach':	'for',
		'throw':	'raise',

		# types
		'boolean':	'bool',
		'double':	'float',
		'single':	'float32',
		'str':		'string',
		# TODO: various int types like short, byte, long
	}

	get unknownSuggestions from var


	##
	## Services to this
	##

	def _addError(ce as CobraException)
		_errors.add(ce)
		_messages.add(ce)

	def _addMessage(msg as String)
		# typically used for C# compiler output that is auxilliary (extra error info, warnings)
		_messages.add(msg)


	##
	## Generating C#
	##

	var _moduleFileName_to_sharpToCobraLineNum as Dictionary<of String, Dictionary<of int, int>>?

	def writeSharp
		Node.setCompiler(this)
		try
			_moduleFileName_to_sharpToCobraLineNum = Dictionary<of String, Dictionary<of int, int>>()
			for module in _modules  # CC: make that _curModule and axe following assignment statement
				if not module.fileName.endsWith('SystemInterfaces.cobra')
					_curModule = module
					sharpToCobraLineNum = _curModule.writeSharpDef
					_moduleFileName_to_sharpToCobraLineNum[module.fileName] = sharpToCobraLineNum
					_moduleFileName_to_sharpToCobraLineNum[Path.getFullPath(module.fileName)] = sharpToCobraLineNum
		finally
			Node.setCompiler(nil)

	def writeSharpTestInvocation
		dt = DateTime.now
		fileName = 'test-[dt.year][dt.month][dt.day][dt.hour][dt.minute].cs'  # TODO: format the numbers to have leading zeros
		using f = SharpWriter(File.createText(fileName))
			print to f
				print 'using System;'
				print 'using Cobra.Lang;'
				print ''
				print 'class RunTests {'
				print ''
				print '	public static void Main() {'
				print '		CobraImp.ShowTestProgress = true;'
				if .hasSuperStackTraceOption
					print '		bool success = false;'
					print '		try {'
				for module in _modules
					module.writeSharpTestInvocation(f)
				if .hasSuperStackTraceOption
					print '		success = true;'
					print '		} catch (Exception e) {'
					print '			CobraCore.DumpStack();'
					print '			CobraImp.PrintLine(string.Format("\\nUncaught: {0}: {1}", e.GetType().Name, e.Message));'
					print '			if (e.InnerException!=null)'
					print '				CobraImp.PrintLine(string.Format("InnerException: {0}: {1}", e.InnerException.GetType().Name, e.InnerException.Message));'
					print '		}'
					print '		if (success)'
				print '		CobraImp.TestProgressWriter.WriteLine("\\nSuccess!  All tests pass.\\n");'
				print '	}'
				print '}'
		_modules.add(SharpModule(fileName, _verbosity))

	var _exeFileName as String

	var _cscExecPaths = [
		[r'\WINDOWS\Microsoft.NET\Framework\v2.0.50727\csc', 'ms'],  # common
		[r'\WINNT\Microsoft.NET\Framework\v2.0.50727\csc', 'ms'],
		[r'/usr/bin/gmcs', 'novell'],  # common
		[r'/bin/gmcs', 'novell'],
		[r'/usr/local/bin/gmcs', 'novell'],
	]

	get exeFileName from var

	var _platform as PlatformEnum

	get platform from var

	def compileCS
		.compileCS('')

	def compileCS(extraCscOptions as String)  # TODO: rename to compileSharp
		require
			.options
			.modules
			.modules[0].fileName.endsWith('SystemInterfaces.cobra')
		body
			# locate the C# compiler
			found = false
			for execPathSpec in _cscExecPaths
				cscPath = execPathSpec[0]
				platform = execPathSpec[1]
				if File.exists(cscPath) or File.exists(cscPath+'.exe')
					found = true
					break
			if not found
				print 'Looked for C# compiler at:'
				for execPathSpec in _cscExecPaths
					cscPath = execPathSpec[0]
					print '  [cscPath]'
				print 'But cannot find a C# compiler from Microsoft .NET or Novell Mono.'
				throw StopCompilation(this)

			assert platform in ['ms', 'novell']
			_platform = if(platform=='ms', PlatformEnum.Microsoft, PlatformEnum.Novell)
			optChar = if(platform=='ms', '/', '-')  # option prefix character

			# exe names
			# CC: exe = if(Utils.getSO(_options, 'test', nil), _modules[_modules.count-1].csFileName, _modules[_firstUserModuleIndex].csFileName)
			outName = if(Utils.getSO(_options, 'test', nil), _modules[_modules.count-1].csFileName to passthrough, _modules[_firstUserModuleIndex].csFileName to passthrough) to String
			if outName.endsWith('.cs')
				outName = outName.substring(0, outName.length-3) # CC: [..-3]
			if outName.endsWith('.cobra')
				outName = outName.substring(0, outName.length-6) # CC: [..-6]
			_exeFileName = outName

			# options
			options = ''

			target = Utils.getSO(_options, 'target', '') to String
			if target and target.length
				if target=='lib'
					target = 'library'
				options += ' [optChar]target:[target]'
				# TODO: what is the output for a module?
				branch target
					on 'exe', 'winexe': outName += '.exe'
					on 'library': outName += '.dll'
					on 'module': outName += '.netmodule'  # http://msdn2.microsoft.com/en-us/library/58scf68s(VS.80).aspx
					else: throw FallThroughException(target)
			else
				outName += '.exe'

			# CC: cleanup
			thing = Utils.getSO(_options, 'reference', []) to List<of Object>
			for refer in thing to List<of Object>
				options += ' [optChar]r:[refer]' # TODO: mono?

			debug = Utils.getSO(_options, 'debug', '') to String
			if debug.length
				# TODO: mono does not support full and pdbonly afaik
				assert debug in ['-', '+', 'full', 'pdbonly'], debug
				options += ' [optChar]debug' + if(debug.length==1, debug, ':[debug]')

			options += ' "[optChar]out:[outName]"'  # TODO: mono?

			if _verbosity<3
				options += ' [optChar]nologo'  # TODO: mono?

			options += ' ' + extraCscOptions

			# .cs files
			csFileNameList = List<of String>()
			for module in _modules.getRange(1, _modules.count-1)  # CC: use range
				csFileNameList.add('"' + module.csFileName to String + '"')  # CC: shouldn't need cast
			csFileNames = Utils.join(' ', csFileNameList)

			# compilation command
			cobraLangPath = Path.combine(.cobraExeDir, 'CobraLang.cs')
			assert File.exists(cobraLangPath), cobraLangPath

			if _verbosity
				print 'Compiling to produce [outName]'
			p as System.Diagnostics.Process = $sharp('new System.Diagnostics.Process()')
			p.startInfo.fileName = cscPath
			p.startInfo.arguments = '[options] [csFileNames] "[cobraLangPath]"'
			if _verbosity >= 2
				print '[p.startInfo.fileName] [p.startInfo.arguments]'
			p.startInfo.redirectStandardOutput = true
			p.startInfo.redirectStandardError = true
			p.startInfo.useShellExecute = false
			p.start
			output = p.standardOutput.readToEnd
			output += p.standardOutput.readToEnd
			p.waitForExit

			hadError = false
			for line as String in output.split(c'\n')  # CC: axe as
				line = line.trim
				if not line.length
					continue
				if 'error ' in line
					_addError(SharpCompilationError(line, this))
					hadError = true
				else if 'Unreachable code detected' in line
					# because Cobra forces you to put in a "return" stmt even though you have a "throw" and then C# warns about that  TODO: fix
					pass
				else if 'is assigned but its value' in line
					# Cobra catches this one itself
					pass
				else if 'Compilation succeeded' in line
					# Novell Mono gmcs ends with this
					pass
				else
					_addMessage(line)
			if hadError  # TODO: change to "if _errors" like bindInt and bindImp and axe hadError
				_exitFromErrors

			# remove C#
			if Utils.getSO(_options, 'deletegen', 0)
				for csFileName in csFileNameList
					File.delete(csFileName)

	def cobraLineNumForSharp(fileName as String, lineNum as int) as int
		"""
		Returns the source cobra line number given a filename (sans ".cs") and line number in the
		generated C#. Used by SharpCompilationError.
		"""
		# for some reason the C# filenames come in with a lower case drive letter,
		# and in 2006 strings are *still* case sensitive.
		# *sigh*
		if fileName.length>=2 and fileName[1]==c':'
			fileName = Utils.capped(fileName)

		# TODO: handle relative paths like ..\foo.cobra which C# spells out as absolute paths

		# TODO: take out next 3 lines someday. was put in 2006-11-12
		if not _moduleFileName_to_sharpToCobraLineNum.containsKey(fileName)
			if 'CobraLang.cs' not in fileName
				print '<> Cannot find fileName "[fileName]" in:'
				for obj in _moduleFileName_to_sharpToCobraLineNum
					print '   [obj]'
			return lineNum  # better than not getting the error message
		sharpToCobraLineNum = _moduleFileName_to_sharpToCobraLineNum[fileName]
		if sharpToCobraLineNum.containsKey(lineNum)
			return sharpToCobraLineNum[lineNum]
		else
			# TODO: take this out someday. was put in 2006-11-12
			print '<> Cannot map C# location back to cobra.'
			print '   fileName = [fileName]'
			print '   lineNum = [lineNum]'
			print '   sharpToCobraLineNum = [CobraCore.toTechString(sharpToCobraLineNum)]'
			return sharpToCobraLineNum[lineNum]


class SharpCompilationError
	inherits CobraException
	implements ISourceError

	var _msg as String
	var _fileName as String?
	var _lineNum as int?

	def init(line as String, compiler as Compiler)
		base.init(line)
		line = line.trim
		i = line.indexOf(': error')
		if i<>-1
			# kill the " error CS0234" part
			j = line.indexOf(':', i+1)
			line = line.substring(0, i+': error'.length) + line.substring(j)
			# kill the ".cs"
			line = line.replace('.cs', '')
			# translate the line number
			i = line.indexOf('(')
			fileName = line.substring(0, i)
			j = line.indexOf(',', i)
			lineStr = line.substring(i+1, j-i-1)
			sharpLineNum as int = int.parse(lineStr)  # CC: axe cast
			lineNum = compiler.cobraLineNumForSharp(fileName, sharpLineNum)
			end = line.indexOf(')', j)
			line = line.substring(0, i+1) + lineNum.toString + line.substring(end)
			# add (sharp)
			if compiler.verbosity or .isDevMachine
				line += ' (C# [sharpLineNum])'
			_fileName = fileName
			_lineNum = lineNum
		_msg = line

	get isDevMachine as bool
		if Environment.getEnvironmentVariable('USERDOMAIN')<>'MACXP'
			return false
		if Environment.getEnvironmentVariable('USERNAME')<>'Chuck'
			return false
		return true

	get message as String is override
		return _msg

	get hasSourceInfo as bool
		return _fileName is not nil

	get fileName as String
		return _fileName to String  # CC: to !

	get lineNum as int
		return _lineNum to int  # CC: to !
