

enum ProblemAction
	Exit
	Throw


class Compiler
	implements ITypeProvider
	"""
	General notes:

	To cope with nesting, the compiler keeps a stack of the three types of things that can be nested. Items are pushed and popped off these stacks during each of the "bind interface" and "bind implementation" phases. The three stacks are:
		* nameSpaceStack - namespaces
		* boxStack - boxes are classes, structs and interfaces
		* codeMemberStack - methods, properties and constructors
	"""

	var _verbosity as int
	var _whenError as ProblemAction
	var _options as Dictionary<of String, Object>
	var _globalNS as NameSpace
	var _modules as List<of Module>

	var _nameSpaceStack as Stack<of NameSpace>
	var _boxStack as Stack<of Box>
	var _codeMemberStack as Stack<of ICodePart>

	def construct(verbosity as int)
		.construct(verbosity, ProblemAction.Exit)

	def construct(verbosity as int, whenError as ProblemAction)
		_verbosity = verbosity
		_modules = List<of Module>()
		_whenError = whenError
		_globalNS = NameSpace(Token.empty, '(global)')
		_nameSpaceStack = Stack<of NameSpace>()
		_boxStack = Stack<of Box>()
		_codeMemberStack = Stack<of ICodePart>()

	get modules from var

	pro whenError from var

	pro options from var

	get nameSpaceStack from var

	get boxStack from var

	get codeMemberStack from var

	def parseFilesNamed(filenames as List<of String>) as List<of Module>
		"""
		Returns the modules for the newly parsed files.
		Also, extends self.modules with those modules.
		"""
		require
			filenames
		ensure
			true
		code
			if _modules.count == 0
				# python: path = os.path.join(os.path.dirname(__file__), 'SystemInterfaces.cobra')
				path = r'C:\All\echuck\Projects\Cobra\Cobra\Source\SystemInterfaces.cobra'
				assert File.exists(path), path
				filenames.insert(0, path)
			modules = List<of Module>()
			for filename in filenames
				# TODO: support C# code
#				if filename.endsWith('.cs')
#					if _verbosity>1
#						print 'Noting [filename]'
#					modules.add(SharpModule(filename))
#				else
				if 1
					if _verbosity>1
						print 'Parsing [filename]'
					parser = Parser()
					parser.verbosity = _verbosity
					parser.whenError = if(_whenError==ProblemAction.Exit, Parser.WhenErrorEnum.exit, Parser.WhenErrorEnum.throww)
					parser.typeProvider = this
					# TODO: parser.whenWarning = whenWarning
					assert _globalNS
					parser.globalNS = _globalNS
					# @@ TODO: assert _globalNS is parser.nameSpaceStack[0]
					module = parser.parseFileNamed(filename)
					assert module
					modules.add(module)
			assert modules
			_modules.addRange(modules)
			return modules


	##
	## ITypeProvider
	##

	var _boolType as BoolType?
	var _charType as CharType?
	var _dynamicType as DynamicType?
	var _passThroughType as PassThroughType?
	var _voidType as VoidType?
	var _variTypes as Dictionary<of INode, VariType>

	def typeForName(name as String) as IType
		assert false, 'TODO'
		return CobraType()

	def typeOrNilForName(name as String) as IType?
		assert false, 'TODO'
		return nil

	get boolType as BoolType
		if _boolType is nil
			_boolType = BoolType()
		return _boolType to BoolType  # CC: to ! | CC: axe to !

	get charType as CharType
		if _charType is nil
			_charType = CharType()
		return _charType to CharType  # CC: to! | CC: axe to !

	get dynamicType as DynamicType
		if _dynamicType is nil
			_dynamicType = DynamicType()
		return _dynamicType to DynamicType

	get passThroughType as PassThroughType
		if _passThroughType is nil
			_passThroughType = PassThroughType()
		return _passThroughType to PassThroughType  # CC: to ! | CC: axe to !

	get voidType as VoidType
		if _voidType is nil
			_voidType = VoidType()
		return _voidType to VoidType  # CC: to ! | CC: axe to !

	def variType(type as IType) as VariType
		if _variTypes is nil
			_variTypes = Dictionary<of INode, VariType>()
		else if _variTypes.containsKey(type)
			return _variTypes[type]
		_variTypes[type] = vt = VariType(type)
		return vt

	def variType(typeNode as INode) as VariType
		if _variTypes is nil
			_variTypes = Dictionary<of INode, VariType>()
		else if _variTypes.containsKey(typeNode)
			return _variTypes[typeNode]
		_variTypes[typeNode] = vt = VariType(typeNode)
		return vt


	##
	## Binding
	##

	def bindInt
		# TODO: bindInt to all existing types
		Node.setCompiler(this)
		try
			for module in _modules
				module.bindInt()
		finally
			Node.setCompiler(nil)

	def bindImp
		# TODO: bindImp to all existing types
		Node.setCompiler(this)
		try
			for module in _modules
				module.bindImp()
		finally
			Node.setCompiler(nil)

	def symbolForName(name as String, canBeMember as bool) as INode?
		return nil

	##
	## Generating C#
	##

	def genCS
		pass

	def compileCS
		pass
