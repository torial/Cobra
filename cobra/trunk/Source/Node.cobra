class NodeException
	inherits Exception

	var _node as Node

	def construct(node as Node, msg as String)
		base.construct(msg)
		_node = node

	get node from var


class Node
	"""
	Just about everything in the Cobra compiler that forms a data
	structure of a program ultimately inherits from Node. For example,
	all types and ASTs descend from Node.

	However, the tokenizer, parser, compiler object and command line
	objects do not.
	"""

	shared
		var _nextNodeSerialNum = 1001
		var _compiler as Compiler?

		pro compiler from var

		def setCompiler(c as Compiler?) # CC: axe this method after the shared property is working
			_compiler = c

	var _serialNum as int

	var _didBindInt as bool
	var _didBindImp as bool
	var _superNode as Node?
		"""
		Possibly points to the node that owns this node.
		But this is not strictly required. It's used only when needed (typically in expressions).
		"""


	def construct
		ensure
			.serialNum > 1000
			not .didBindInt
			not .didBindImp
		code
			_serialNum = _nextNodeSerialNum
			_nextNodeSerialNum += 1

	get serialNum from var

	def writeDeepString
		pass
		# TODO

	pro superNode from var


	##
	## Inquiries
	##

	get namedType as IType?
		"""
		If this node represents a type, this property returns it.
		Otherwise, return nil
		Implemented by TypeExpr and IdentifierExpr.
		TODO: Can this be moved down to Expr?
		"""
		return nil


	##
	## Binding
	##

	def bindInt as Node  # CC: as this
		"""
		Invoke this method; do not override it.
		"""
		require .compiler
		if not _didBindInt
			_bindInt()
			assert _didBindInt
		return this

	def _bindInt
		"""
		Bind interface elements such as return types and parameter types.
		Override this method; do not send it. Invoke base.
		"""
		require .compiler
		_didBindInt = true

	def bindImp as Node  # CC: as this
		"""
		Invoke this method; do not override it.
		"""
		if not _didBindImp
			_bindImp()
			assert _didBindImp
		return this

	def _bindImp
		"""
		Bind implementation elements such as statements and expressions.
		Override this method; do not send it. Invoke base.
		"""
		require .compiler
		_didBindImp = true

	def bindAll as Node  # CC: as this
		.bindInt()
		.bindImp()
		return this

	get didBindInt from var

	get didBindImp from var


	##
	## Errors
	##

	def _error(msg as String)
		throw NodeException(this, msg)


class SyntaxNode
	inherits Node
	"""
	An abstract tree syntax node (AST).
	Also: a node with a token.
	Also: a node that came from parsing.

	Descendants include NamedNode, Box (indirectly), Stmt and Expr.
	"""

	var _token as IToken

	def construct(token as IToken)
		_token = token

	get token from var


class NamedNode
	inherits SyntaxNode
	"""
	A NamedNode is just a syntax node plus a name.
	"""

#	invariant
#		.name

	var _name as String

	def construct(token as IToken, name as String)
		require name
		base.construct(token)
		_name = name

	get name from var
