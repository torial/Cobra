class Node

	shared
		var _compiler as Compiler?

		pro compiler from var

		def setCompiler(c as Compiler?) # CC: axe this method after the shared property is working
			_compiler = c

	var _token as IToken
	var _didBindInt as bool
	var _didBindImp as bool


	def construct(token as IToken)
		_token = token

	def writeDeepString
		pass
		# TODO


	##
	## Basic props
	##

	get token from var


	##
	## Inquiries
	##

	get namedType as CobraType?
		"""
		If this node represents a type, this property returns it.
		Otherwise, return nil
		Implemented by TypeExpr and IdentifierExpr.
		TODO: Can this be moved down to Expr?
		"""
		return nil


	##
	## Binding
	##

	def bindInt as Node  # CC: as this
		"""
		Invoke this method; do not override it.
		"""
		require .compiler
		if not _didBindInt
			_bindInt()
			assert _didBindInt
		return this

	def _bindInt
		"""
		Bind interface elements such as return types and parameter types.
		Override this method; do not send it. Invoke base.
		"""
		require .compiler
		_didBindInt = true

	def bindImp as Node  # CC: as this
		"""
		Invoke this method; do not override it.
		"""
		if not _didBindImp
			_bindImp()
			assert _didBindImp
		return this

	def _bindImp
		"""
		Bind implementation elements such as statements and expressions.
		Override this method; do not send it. Invoke base.
		"""
		require .compiler
		_didBindImp = true

	def bindAll as Node  # CC: as this
		.bindInt()
		.bindImp()
		return this


class NamedNode
	inherits Node

#	invariant
#		.name

	var _name as String

	def construct(token as IToken, name as String)
		require name
		base.construct(token)
		_name = name

	get name from var
