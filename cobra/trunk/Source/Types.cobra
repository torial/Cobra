interface ITypeProvider
	"""
	A type provider can provide essential types and serve as a place
	they are "uniqued" in order to avoid type duplication.
	"""

	def typeForName(name as String) as IType

	def typeOrNilForName(name as String) as IType?

	get boolType as BoolType

	get charType as CharType

	get decimalType as DecimalType

	get floatType as FloatType

	get intType as IntType

	get dynamicType as DynamicType

	get nilType as NilType

	get numberType as NumberType

	get passThroughType as PassThroughType

	get typeType as TypeType

	get unspecifiedType as UnspecifiedType

	get voidType as VoidType

	def variType(type as IType) as VariType

	def variType(typeNode as INode) as VariType


class BasicTypeProvider
	implements ITypeProvider
	"""
	TODO: rename to TypeProvider, change to a "mix-in" and have the Compiler class inherit it
	"""

	var _boolType			as BoolType?
	var _charType			as CharType?
	var _decimalType		as DecimalType?
	var _dynamicType		as DynamicType?
	var _floatType			as FloatType?
	var _intType			as IntType?
	var _nilType			as NilType?
	var _numberType			as NumberType?
	var _passThroughType	as PassThroughType?
	var _typeType			as TypeType?
	var _unspecifiedType	as UnspecifiedType
	var _voidType			as VoidType?
	var _variTypes			as Dictionary<of INode, VariType>

	def typeForName(name as String) as IType
		assert false, 'TODO'
		return CobraType()

	def typeOrNilForName(name as String) as IType?
		assert false, 'TODO'
		return nil

	get boolType as BoolType
		if _boolType is nil
			_boolType = BoolType()
		return _boolType to BoolType  # CC: to ! | CC: axe to !

	get charType as CharType
		if _charType is nil
			_charType = CharType()
		return _charType to CharType  # CC: to! | CC: axe to !

	get decimalType as DecimalType
		if _decimalType is nil
			_decimalType = DecimalType()
		return _decimalType to DecimalType  # CC: to! | CC: axe to !

	get dynamicType as DynamicType
		if _dynamicType is nil
			_dynamicType = DynamicType()
		return _dynamicType to DynamicType

	get floatType as FloatType
		if _floatType is nil
			_floatType = FloatType()
		return _floatType to FloatType  # CC: to! | CC: axe to !

	get intType as IntType
		if _intType is nil
			_intType = IntType()
		return _intType to IntType  # CC: to! | CC: axe to !

	get nilType as NilType
		if _nilType is nil
			_nilType = NilType()
		return _nilType to NilType  # CC: to! | CC: axe to !

	get numberType as NumberType
		if _numberType is nil
			_numberType = NumberType()
		return _numberType to NumberType  # CC: to! | CC: axe to !

	get passThroughType as PassThroughType
		if _passThroughType is nil
			_passThroughType = PassThroughType()
		return _passThroughType to PassThroughType  # CC: to ! | CC: axe to !

	get typeType as TypeType
		if _typeType is nil
			_typeType = TypeType()
		return _typeType to TypeType  # CC: to ! | CC: axe to !

	get unspecifiedType as UnspecifiedType
		if _unspecifiedType is nil
			_unspecifiedType = UnspecifiedType()
		return _unspecifiedType to UnspecifiedType  # CC: to ! | CC: axe to !

	get voidType as VoidType
		if _voidType is nil
			_voidType = VoidType()
		return _voidType to VoidType  # CC: to ! | CC: axe to !

	def variType(type as IType) as VariType
		if _variTypes is nil
			_variTypes = Dictionary<of INode, VariType>()
		else if _variTypes.containsKey(type)
			return _variTypes[type]
		_variTypes[type] = vt = VariType(type)
		return vt

	def variType(typeNode as INode) as VariType
		if _variTypes is nil
			_variTypes = Dictionary<of INode, VariType>()
		else if _variTypes.containsKey(typeNode)
			return _variTypes[typeNode]
		_variTypes[typeNode] = vt = VariType(typeNode)
		return vt


interface IType
	inherits IMember  # TODO: does an IType need to also be an IContainer? TODO: Why does it have to be either?

	def isAssignableTo(type as IType) as bool

	def isDescendantOf(type as IType) as bool

	get isReference as bool
		"""
		Returns true if the type is a reference type, such as a class, interface or nilable type.
		And as opposed to value type such as a struct, int, etc.).
		"""

	get isGenericDef as bool
		"""
		Returns true if this type is a definition of a generic type, and
		therefore capable of making subsequent generic types via the
		`constructedTypeFor` method. A generic type will have generic
		parameters which are all GenericParam (as opposed to other types
		such as `int` or a given class).
		"""

	get isGeneric as bool
		"""
		Returns true if this type is a generic type which includes
		generic type defs and open-or-closed constructed types. Note
		that arrays of generic types and pointers to generic types will
		return false.
		"""

	get genericParams as List<of IType>
		"""
		Return the list of generic params for this generic type. This
		property requires that .isGenericDef is true.
		"""
		# TODO: require .isGenericDef

	def constructedTypeFor(typeArgs as List<of IType>) as IType
		"""
		Makes a new generic type with the given typeArgs which must
		match in number to the generic parameters. This method requires
		that .isGenericDef is true. Note that the type args can be
		GenericParams or other types or a mix. Also, this method must
		return an existing type that matches the typeArgs if one already
		exists.
		"""
		# TODO: require .isGenericDef; typesArgs.count==.genericParams.count

	def greatestCommonDenominatorWith(type as IType) as IType

	def indexType(argTypes as List<of IType>) as IType?
		"""
		Used by the IndexExpr.
		"""

	get innerType as IType?
		"""
		Used by the enumerable for statement to infer the type of the control variable.
		"""

	get superType as IType?
		"""
		Returns the super type of this type.
		If an implementor has multiple super types (interfaces do), then this method should
		return nil and other methods such as isDescendantOf() and memberForName() must be
		sure to take the multiple super types into consideration.
		"""

	def memberForName(name as String) as IMember?
		"""
		Used for `foo.bar` where this type is the type of `foo`.
		Should return members that are inherited (if any).
		"""

	## Code gen

	get csInit as String

	def writeSharpRef(sw as SharpWriter)  # TODO: get rid of this in favor or sharpRef

	get sharpRef as String
		"""
		Returns a string that refers to this type.
		Examples: 'int'  'List<String>'  'object'
		"""


class CobraType
	inherits Node
	implements IType
	"""
	This is the parent type of all other types.
	It exists for organizational purposes.
	No actual expression as ever directly assigned this type.
	If you are looking for "dynamic", see DynamicType.
	If you are looking for the type of types, see TypeType.
	If you are looking for "object", see ObjectType.
	"""

	var _superType as IType?

	def construct
		base.construct()

	get englishName as String
		assert false, '[.getType().name], [this]'  # TODO: pass this to OverrideException() instead
		throw OverrideException()

	get name as String
		return .getType().toString()

	get isCallable as bool
		return true

	get isReference as bool
		throw OverrideException()
		return false

	get isShared as bool
		return true

	get requiresThis as bool
		return false

	get resultType as IType?
		return this

	get typeForIdentifier as IType
		return .compiler.typeType

	get typeForReceiver as IType
		return this

	def indexType(argTypes as List<of IType>) as IType?
		return nil

	get innerType as IType?
		return nil

	get namedType as IType? is override
		# TODO: is this essential? if so, perhaps "namedType" --> "effectiveType"
		return this

	get superType as IType?
		return _superType

	get isGenericDef as bool
		return false

	get isGeneric as bool
		return false

	get genericParams as List<of IType>
		if .isGenericDef
			throw Exception('.isGenericDef returns true, but there is no override to return the genericParams')
		else
			throw Exception('.isGenericDef returns false, so there can be no genericParams')

	def constructedTypeFor(typeArgs as List<of IType>) as IType
		if .isGenericDef
			throw Exception('.isGenericDef returns true, but there is no override to constructedTypeFor')
		else
			throw Exception('.isGenericDef returns false, so there can be no constructedTypeFor')
		return CobraType()  # TODO: axe whole line when code flow analysis proves it's not needed

	def greatestCommonDenominatorWith(type as IType) as IType
		if this is type
			return this
		if .isDescendantOf(type)
			return type
		if type.isDescendantOf(this)
			return this
		# TODO: following is a guess
		if .superType and type.superType
			return .superType.greatestCommonDenominatorWith(type.superType to IType)
		else
			return .compiler.libraryType('System', 'Object')

	def isAssignableTo(type as IType) as bool
		require
			.compiler
		code
			if type is .compiler.passThroughType
				return true
			if type is .compiler.libraryType('System', 'Object')
				return true
			# TODO: remove this:
			if type inherits GenericParam
				return true
			# TODO: would this be needed if not for qualified types?
			if type inherits WrappedType
				return .isAssignableTo(type.theWrappedType to passthrough) # CC: do something here
			return .isDescendantOf(type)

	def isDescendantOf(type as IType) as bool
		"""
		Returns true if this type is a subtype (direct or indirect) of type.
		"""
		if this is type
			return true
		curType as IType? = this  # CC: change to: curType = this to ?
		while true
			if curType is type
				return true
			curType = curType.superType
			if curType is nil
				break
		return false

	def declForName(name as String) as IMember?
		"""
		Returns nil by default.
		"""
		return nil

	def memberForName(name as String) as IMember?
		"""
		Returns nil by default.
		"""
		objectClass = .compiler.libraryType('System', 'Object')
		return objectClass.memberForName(name)

	def equals(obj as Object) as bool is override
		if obj is nil
			return false
		if obj inherits CobraType
			return .serialNum.equals(obj.serialNum)
		else
			return false

	def getHashCode as int is override
		return .serialNum.getHashCode()

	## Code gen

	get csInit as String
		throw OverrideException(.getType())

	def writeSharpRef(sw as SharpWriter)
		sw.write(.sharpName)

	get sharpName as String
		return .name

	get sharpRef as String  # TODO: kill writeSharpRef in favor of this
		sw = StringWriter()
		.writeSharpRef(SharpWriter(sw))
		return sw.toString()

	def writeSharpTestInvocation(sw as SharpWriter)
		pass


class ValueType
	inherits CobraType

	get englishName as String is override
		return 'primitive type'

	get isReference as bool is override
		return false

	def equals(obj as Object) as bool is override
		if obj is nil
			return false
		if not obj inherits CobraType
			return false
		if .getType() is obj.getType()
			return true
		return false

	def getHashCode as int is override
		return .getType().getHashCode()


class PrimitiveType
	inherits ValueType
	"""
	The base class of BoolType, CharType, etc.
	Used purely for classification purposes (`t inherits PrimitiveType`).
	"""
	pass


class BoolType
	inherits PrimitiveType

	def construct
		base.construct()

	get name as String is override
		return 'bool'

	get csInit as String is override
		return 'false'


class CharType
	inherits PrimitiveType

	def construct
		base.construct()

	get name as String is override
		return 'char'

	get csInit as String is override
		return '(char)0'


class DecimalType
	inherits NumberType

	def construct
		base.construct()

	get name as String is override
		return 'decimal'


class DynamicType
	inherits CobraType
	"""
	TODO: flesh out DynamicType
	"""

	get englishName as String is override
		return 'basic type'

	get name as String is override
		return 'dynamic'

	def isDescendantOf(type as IType) as bool is override
		"""
		dynamic is compatible with all types because it is fully dynamic--only
		at runtime will it be checked.
		"""
		return true

	get csInit as String is override
		return 'null'


class FloatType
	inherits NumberType

	def construct
		base.construct()

	get name as String is override
		return 'float'

	get sharpName as String is override
		return 'double'


class IntType
	inherits NumberType

	def construct
		base.construct()

	get name as String is override
		return 'int'

	def isAssignableTo(type as IType) as bool is override
		if type is .compiler.decimalType
			return true
		if type is .compiler.floatType
			return true
		return base.isAssignableTo(type)


class NilableType
	inherits WrappedType

	def construct(t as IType)
		base.construct(t)

	get name as String is override
		if _wrappedType is not nil
			return _wrappedType.name + '?'
		else if _wrappedTypeNode is not nil
			# CC:
			#return _wrappedTypeNode.toString() + '?'
			return '[_wrappedTypeNode.toString()]?'
		else
			throw FallThroughException(this)

	get isReference as bool is override
		return _wrappedType.isReference

	# TODO: I think the following is appropriate, but come up with a test case for it first.
	#def innerType(self):
	#	return self.wrappedType.innerType

	def indexType(argTypes as List<of IType>) as IType? is override
		assert .didBindInt  # TODO: promote this to Type?
		return _wrappedType.indexType(argTypes)

	def isAssignableTo(type as IType) as bool is override
		if type inherits PassThroughType
			return true
		if type inherits NilableType
			assert _wrappedType
			return _wrappedType.isAssignableTo(type.theWrappedType to IType)  # CC: to ! or something
		return false

	def isDescendantOf(type as IType) as bool is override
		return base.isDescendantOf(type) and _wrappedType.isDescendantOf(type)

	def memberForName(name as String) as IMember? is override
		assert .didBindInt
		assert _wrappedType  # TODO: can CobraType require a wrappedType
		return _wrappedType.memberForName(name)

	get csInit as String is override
		return 'null'

	def writeSharpRef(sw as SharpWriter) is override
		_wrappedType.writeSharpRef(sw)
		if not _wrappedType.isReference
			sw.write('?')


class NilType
	inherits CobraType

	get name as String is override
		return 'nil'

	get isReference as bool is override
		return true

	def isAssignableTo(type as IType) as bool is override
		if this is type
			return true
		if type is .compiler.passThroughType
			return true
		if type inherits NilableType
			return true
		return false

# TODO:
#	def checkBinaryOp(self, op, right, compiler):
#		RootType.checkBinaryOp(self, op, right, compiler)
#		if op=='TO':
#			from Expressions import TypeExpr
#			type = right.namedType
#			assert types is not nil, right
#			assert not inherits(type, NilType)
#			if not inherits(type, NilableType) and type is not tpassthrough:
#				self.error('Cannot cast nil to a non-nil type.')

	get csInit as String is override
		return 'null'


class NumberType
	inherits PrimitiveType
	"""
	The base class for int, float and decimal.
	"""

	get csInit as String is override
		return '0'


class PassThroughType
	inherits CobraType
	"""
	This is a temporary helper type used while Cobra is still deficient in type checking mostly
	due to its inability to look up methods, properties, etc.

	Originally it overrode isDescendantOf() to always return true, but this mislead the C#
	code generation. The override was removed and now you have to check for it explicitly.

	TODO: remove this class
	"""

	def construct
		base.construct()

	get englishName as String is override
		return 'basic type'

	get isReference as bool is override
		return true

	get name as String is override
		return 'passthrough'

	def indexType(argTypes as List<of IType>) as IType? is override
		return this

	get innerType as IType? is override
		return this

	def isAssignableTo(type as IType) as bool is override
		return true

	get csInit as String is override
		return 'null'

	def writeSharpRef(sw as SharpWriter) is override
		sw.write('object')

class VoidType
	inherits ValueType  # TODO: change to CobraType
	"""
	This type is used only for methods that don't declare a return type and therefore cannot return
	anything.
	"""

	def construct
		base.construct()

	get englishName as String is override
		return 'void type'

	get name as String is override
		return 'void'

	get csInit as String is override
		throw Exception('Cannot init a void type.')


##
## Wrapped Types
##

class WrappedType
	inherits CobraType

	# TODO: flesh this out

	var _wrappedType as IType?
	var _wrappedTypeNode as INode?
	var _hashCode as int?
	var _didResolveType as bool

	def construct(wrappedType as IType)
		base.construct()  # TODO: ? pass wrappedType.superType
		_wrappedType = wrappedType
		_wrappedTypeNode = nil

	def construct(wrappedTypeNode as INode)
		base.construct()
		_wrappedType = nil
		_wrappedTypeNode = wrappedTypeNode

	def addMinFields is override
		base.addMinFields()
		.addField('didResolveType', _didResolveType)

	def addRefFields is override
		base.addRefFields()
		.addField('wrappedTypeNode', _wrappedTypeNode)
		.addField('wrappedType', _wrappedType)

	get didResolveType from var

	def equals(obj as Object) as bool is override
		if base.equals(obj)
			assert obj inherits WrappedType
			wt = obj to WrappedType  # CC: shouldn't need this due to the assertion just above
			if _wrappedType and wt._wrappedType
				return _wrappedType.equals(wt._wrappedType)
			else if _wrappedTypeNode and wt._wrappedTypeNode
				return _wrappedTypeNode.equals(wt._wrappedTypeNode)
			else
				throw FallThroughException([this, obj])
		return false

	def getHashCode as int is override
		if _hashCode is nil
			if _wrappedTypeNode
				_hashCode = _wrappedTypeNode.getHashCode()
			else if _wrappedType
				_hashCode = _wrappedType.getHashCode()
			else
				_hashCode = base.getHashCode()
		return _hashCode to int  # CC: to !

	# CC: this should work, but C# don't dig it.
	#get wrappedType from _wrappedType

	get theWrappedType as IType?
		return _wrappedType

	get innerType as IType? is override
		# TODO: why doesn't this `require` work?
		# require .didResolveType
		# doing this instead
		if not .didResolveType
			_resolveType()
			_wrappedType.bindInt()
		return _wrappedType.innerType

	def _bindInt is override
		base._bindInt()
		_resolveType()

	def _bindImp is override
		base._bindImp()
		_resolveType()

	def _resolveType
		require _wrappedType! or _wrappedTypeNode!
		if _wrappedType!
			return
		if _wrappedTypeNode inherits IType
			_wrappedType = _wrappedTypeNode to passthrough   # CC: shouldn't need the cast here
			return
		_wrappedType = _wrappedTypeNode.bindAll().namedType
		if _wrappedType is nil
			_error('Cannot resolve type.')  # TODO: add the name of the wrappedTypeNode or something
		_didResolveType = true

	get csInit as String is override
		return _wrappedType.csInit


class VariType
	inherits WrappedType
	"""
	Represents the type for variable number of arguments:
		def sumInts(nums as vari int)
	Not valid for non-parameters such as locals and class fields.
	"""

	def construct(wrappedType as IType)
		base.construct(wrappedType)

	def construct(wrappedTypeNode as INode)
		base.construct(wrappedTypeNode)

	get englishName as String is override
		return 'variable args type'

	def indexType(argTypes as List<of IType>) as IType? is override
		return _wrappedType

	get innerType as IType? is override
		return _wrappedType

	get isReference as bool is override
		return true

	get name as String is override
		if _wrappedType
			return 'vari ' + _wrappedType.name
		else
			return 'vari UNBOUND'

	def isAssignableTo(type as IType) as bool is override
		# TODO: should also be assignable to IEnumerable, I think
		return base.isAssignableTo(type)

	def writeSharpRef(sw as SharpWriter) is override
		sw.write('params ')
		_wrappedType.writeSharpRef(sw)
		sw.write(r'[]')


class QualifiedType
	inherits WrappedType
	"""
	Represents types such as SomeNamespace.SomeClass.SomeEnum.
	The parser has to track these namespace navigations in the code.
	"""

	var _initNodes as List<of AbstractTypeIdentifier>
	var _boundNodes as List<of Container>
	var _dottedParentNames as String?

	def construct(nodes as IList<of ISyntaxNode>)
		require
			nodes
		code
			base.construct(nodes[nodes.count-1])
			_initNodes = List<of AbstractTypeIdentifier>()
			for node in nodes
				if node inherits AbstractTypeIdentifier
					_initNodes.add(node)
				else
					assert false, node
			_boundNodes = List<of Container>()  # set by _bindInt()
			_dottedParentNames = nil

	def addRefFields is override
		base.addRefFields()
		.addField('boundNodes', _boundNodes)

	def addSubFields is override
		base.addSubFields()
		.addField('initNodes', _initNodes)
		if _dottedParentNames
			.addField('dottedParentNames', _dottedParentNames)

	get name as String is override
		sb = StringBuilder()
		for ti in _initNodes
			if sb.length
				sb.append('.')
			sb.append(ti.name)
		return sb.toString()
		# TODO:
#		if false and _wrappedType
#			return _dottedParentNames to String + _wrappedType.name  # CC: axe the cast
#		else
#			nodes = Utils.join(', ', _initNodes)
#			return '[.getType().name]([nodes])'

	get englishName as String is override
		assert .didBindInt # TODO: try moving this to CobraType
		return _wrappedType.englishName

	def memberForName(name as String) as IMember? is override
		assert .didBindInt
		assert _wrappedType  # TODO: can CobraType require a wrappedType
		return _wrappedType.memberForName(name)

	def toString as String is override
		if _dottedParentNames is nil
			return .name
		else
			return '[_dottedParentNames].[_wrappedType]'

	def isDescendantOf(type as IType) as bool is override
		assert .didBindInt
		return _wrappedType.isDescendantOf(type)

	get isReference as bool is override
		assert _didBindInt, this
		return _wrappedType.isReference

	def _bindInt is override
		# TODO?: base._bindInt()
		_dottedParentNames = ''
		prevNode as Container? = nil
		node as INode? = nil
		sep = ''
		for initNode in _initNodes
			isLast = initNode is _initNodes[_initNodes.count-1]  # CC: ... _initNodes.last
			if prevNode is nil
				initNode.bindInt()
				node = initNode.namedType
				if node inherits Container
					node.bindInt()
					_boundNodes.add(node)
					prevNode = node
					if not isLast
						_dottedParentNames += sep + node.name
				else
					assert false, node
			else
				node = initNode.memberFrom(prevNode to Container)  # CC: axe cast if "else" is smart about "not nil"
				if node is nil
					_error('Cannot find "[initNode.name]" in [prevNode].')
				if node inherits Container
					node.bindInt()
					_boundNodes.add(node)
					prevNode = node
					if not isLast
						_dottedParentNames += sep + node.name
				else
					assert false, node
			sep = '.'
		_wrappedType = _boundNodes[_boundNodes.count-1]
		base._bindInt()
		if _superType is nil
			_superType = _wrappedType.superType
			# TODO: are the following 2 lines needed?
			if _superType is nil
				_superType = .compiler.typeType

	## Code gen

	def writeSharpRef(sw as SharpWriter) is override
		sw.write('[_dottedParentNames].')
		_wrappedType.writeSharpRef(sw)

	get csInit as String is override
		cs = _wrappedType.csInit
		if cs<>'null'
			cs = _dottedParentNames to String + '.' + cs  # CC: axe cast
		return cs


class UnspecifiedType
	inherits CobraType
	"""
	This is for the compiler's internal use.
	See CobraParser.localVarDecl() and the methods that use it.
	"""

	pass


class TypeType
	inherits CobraType

	def construct
		base.construct()

	get englishName as String is override
		return 'type for types'

	get isReference as bool is override
		return true

	get name as String is override
		return 'Type'

	def isAssignableTo(type as IType) as bool is override
		b = base.isAssignableTo(type)
		b = b or type is .compiler.libraryType('System', 'Type')
		return b

	get csInit as String is override
		return 'null'


class AbstractTypeIdentifier
	inherits SyntaxNode
	"""
	The base class for:
		TypeIdentifier
		GenericTypeIdentifier
	"""

	var _name as String
	var _actualType as IType?

	def construct(token as IToken, name as String)
		base.construct(token)
		_name = name

	def addMinFields is override
		base.addMinFields()
		.addField('name', _name)

	def addRefFields is override
		base.addSubFields()
		.addField('actualType', _actualType)

	get name from var

	get actualType from var

	get namedType as IType? is override
		require
			.didBindInt or .didBindImp
			.actualType
		code
			return _actualType

	def equals(other as Object) as bool is override
		if other is nil
			return false
		if this is other
			return true
		if other inherits AbstractTypeIdentifier
			if _actualType and other._actualType
				return _actualType.equals(other._actualType)
			else
				return _name.equals(other._name)
		return false

	def getHashCode as int is override
		return _name.getHashCode()

	def memberFrom(container as Container) as IMember?
		"""
		Used to get the real member represented by this type identifier in container.
		Used for qualified types such as:
			System.Windows.Forms.Control
			System.Collections.Generic.List<of String>
		The default implementation is:
			return container.memberForName(.name)
		Generics have to do more work, though.
		"""
		return container.memberForName(.name)

	def _bindInt is override
		base._bindInt()
		_resolveType()
		_actualType.bindInt()

	def _bindImp is override
		base._bindImp()
		_resolveType()

		# A TypeIdentifier can be given a type that is constructed
		# during parsing (such as a QualifiedType). Consequently, it may
		# not have gotten a bindInt() and without one, it will barf at
		# some point. So:
		# TODO: this may be axeable when QualifiedType is retired
		_actualType.bindInt()

	def _resolveType
		"""
		Subclasses must override. No need to invoke base.
		"""
		ensure .actualType
		pass


class NilableTypeIdentifier
	inherits AbstractTypeIdentifier

	var _typeId as AbstractTypeIdentifier

	def construct(token as IToken, typeId as AbstractTypeIdentifier)
		require
			token.text
		ensure
			.name
		code
			base.construct(token, token.text)
			_typeId = typeId

	def _bindInt is override
		_typeId.bindInt()
		base._bindInt()

	def _bindImp is override
		_typeId.bindImp()
		base._bindImp()

	def _resolveType is override
		if _actualType is not nil
			return
		_actualType = NilableType(_typeId.actualType)


class TypeIdentifier
	inherits AbstractTypeIdentifier
	"""
	Created by CobraParser.type() for identifiers found where types are
	expected.

	Cobra allows forward references so even though types are expected in
	places like the return type of a method, they cannot be turned into
	actual types until the bindInt phase (or bindImp for expressions).
	"""

	def construct(token as IToken)
		require
			token.which=='ID'
			token.value
		ensure
			.name
		code
			base.construct(token, token.text)

	def construct(token as IToken, type as IType)
		require
			token.text
		ensure
			.name
		code
			base.construct(token, token.text)
			_actualType = type

	def construct(token as IToken, name as String, type as IType)
		"""
		Use this to dictate a name other than what is specified by the token.
		Used for QualifiedTypes, for example, that are created from multiple tokens.
		"""
		require
			name
		ensure
			.name
		code
			base.construct(token, name)
			_actualType = type

	def _resolveType is override
		if _actualType is not nil
			return
		# don't need to check "basic types" like int, bool, etc. here. the parser does those.
		if Utils.isCapped(_name)
			symbol = .compiler.symbolForName(.name, true, false)  # nested enum and class types are capped and are members of the current class
		else
			symbol = nil
		if symbol is nil
			sugg = ''
			if not Utils.isCapped(_name)
				sugg = Utils.capped(_name)
				other = .compiler.symbolForName(sugg, true, false)
				sugg = if(other, ' Try "[sugg]".', '')
			_error('Cannot find type for "[_name]".[sugg]')

		if symbol inherits IType
			_actualType = symbol
		else
			what = symbol.namedType
			assert what!, symbol
			_actualType = what

		assert _actualType is not nil


class GenericTypeIdentifier
	inherits AbstractTypeIdentifier
	"""
	The parser produces these when it encounters "List<of String>", for example.
	"""

	var _rootName as String  # ex: 'List'
	var _fullName as String  # ex: 'List<of String>'
	var _typeRefName as String # ex: 'List<of>' 'IDictionary<of,>' -- matches the actual box

	var _typeNodes as List<of ISyntaxNode>

	def construct(token as IToken, rootName as String, typeNodes as List<of ISyntaxNode>, fullName as String)
		require
			token.which=='OPEN_GENERIC'
			rootName
			fullName
		code
			base.construct(token, fullName)
			_rootName = rootName
			_typeNodes = typeNodes
			_fullName = fullName
			_typeRefName = _rootName + '<of'
			for i = 0 .. _typeNodes.count-1
				_typeRefName += ','
			_typeRefName += '>'

	def memberFrom(container as Container) as IMember? is override
		genericType = container.memberForName(_typeRefName)
		_resolveType(genericType)
		return _actualType

	def _resolveType is override
		genericType = .compiler.symbolForName(_typeRefName, Utils.isCapped(_name), false)
		_resolveType(genericType)

	def _resolveType(genericType as IMember?)
		if genericType is nil
			_error('Cannot find a generic type named "[_typeRefName]".')
		if genericType inherits IType
			gt as IType = genericType to IType  # CC: shouldn't need this local. if-inherits looks broken for interfaces
			if not gt.isGeneric
				_error('"[_rootName]" is not a generic type.')
			types = List<of IType>()
			for tn in _typeNodes
				tn.bindInt()
				types.add(tn.namedType)
			if gt.genericParams.count<>types.count
				_error('The generic type "[_rootName]" expects [gt.genericParams.count] type arguments, not [types.count].')
			t = gt.constructedTypeFor(types)
			assert t
			assert t.isGeneric
			# TODO: is this a good idea or not? t.bindInt()
			# assert not t.isGenericDef  Wrong! If some of the parameters are generic, then the constructed type could have generic params...
			# ... hmmm, but am I using the wrong terms? Maybe the returned type is an open or closed constructed type and never a generic def. TODO: resolve this.
			_actualType = t
		else
			assert false, 'When does this happen?'
			_error('The definition for "[_fullName]" is not a type.')
